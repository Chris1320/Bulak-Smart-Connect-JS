name: API Security Scanning

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 1'  # Weekly on Monday
  workflow_dispatch:

jobs:
  api-security-scan:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: bulak_smart_connect
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install backend dependencies
        run: cd bsc-js-backend && npm ci
      
      - name: Start API server for scanning
        run: |
          cd bsc-js-backend
          # Create a minimal .env file with required variables
          echo "
          DB_TYPE=mysql
          DB_HOST=127.0.0.1
          DB_PORT=3306
          DB_USERNAME=root
          DB_PASSWORD=root
          DB_NAME=bulak_smart_connect
          JWT_SECRET=test-security-scan-secret
          " > .env
          
          # Modify main.ts properly by replacing the entire listen call
          if grep -q "await app.listen" src/main.ts; then
            sed -i 's/await app.listen([^)]*)/await app.listen(process.env.PORT ?? 3000, "0.0.0.0")/g' src/main.ts
          fi
          
          npm run start:dev > api.log 2>&1 &
          echo $! > api.pid
          
          # Wait for API to be available with timeout
          echo "Waiting for API server to be ready..."
          timeout=60
          while ! curl -s http://localhost:3000 > /dev/null; do
            if [ "$timeout" -le 0 ]; then
              echo "API server failed to start or is not accessible"
              cat api.log
              exit 1
            fi
            timeout=$((timeout-1))
            sleep 1
          done
          
          echo "API server started successfully and is accessible"
      
      # Using direct command approach to avoid artifact conflict
      - name: Run ZAP Full Scan
        run: |
          # Pull ZAP Docker image
          docker pull ghcr.io/zaproxy/zaproxy:stable
          
          # Create directory for reports
          mkdir -p reports
          touch reports/report.html reports/report.json reports/report.md
          chmod 777 reports/report.html reports/report.json reports/report.md
          
          # Run ZAP scan using host.docker.internal instead of localhost
          docker run --rm -v "$(pwd)/reports:/zap/wrk/reports:rw" \
            ghcr.io/zaproxy/zaproxy:stable zap-full-scan.py \
            -t http://host.docker.internal:3000 \
            -r /zap/wrk/reports/report.html \
            -J /zap/wrk/reports/report.json \
            -w /zap/wrk/reports/report.md \
            -i
      
      - name: List report files
        if: always()
        run: |
          ls -la reports/ || echo "No report files found"
      
      - name: Upload scan reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-security-reports
          path: reports/
          retention-days: 30
      
      # Stop the API server
      - name: Stop API server
        if: always()
        run: |
          if [ -f "bsc-js-backend/api.pid" ]; then
            kill $(cat bsc-js-backend/api.pid) || true
          fi