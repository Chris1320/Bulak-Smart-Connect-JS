name: Frontend Documentation

on:
  push:
    branches: [ '*']
    paths:
      - 'bulak-smart-connect-js/src/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-frontend-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'bulak-smart-connect-js/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd bulak-smart-connect-js
          npm ci
          
          # Install only required dependencies for documentation
          npm install --no-save react-styleguidist babel-loader @babel/preset-env @babel/preset-react style-loader css-loader file-loader
          
          # Fix vulnerabilities that don't break functionality
          npm audit fix --production || true
      
      - name: Fix CSS image references before build
        run: |
          cd bulak-smart-connect-js
          
          # Find all CSS files with background-image URLs that might cause issues
          find src -name "*.css" -exec grep -l "background-image: url" {} \; | while read file; do
            echo "Fixing image paths in $file"
            # Replace image paths with CSS gradients
            sed -i 's|background-image: url([^)]*);|background-image: linear-gradient(to bottom, #f8f9fa, #e9ecef);|g' "$file"
          done

      - name: Generate frontend documentation
        run: |
          cd bulak-smart-connect-js
          
          # Install Babel plugins needed for Styleguidist to parse modern React
          npm install --no-save @babel/core @babel/preset-env @babel/preset-react babel-loader react-styleguidist
          
          # Create .babelrc for Styleguidist
          cat > .babelrc << 'EOF'
          {
            "presets": [
              "@babel/preset-env",
              ["@babel/preset-react", {"runtime": "automatic"}]
            ]
          }
          EOF
          
          # Create a Vite-compatible styleguide config
          cat > styleguide.config.cjs << 'EOF'
          const path = require('path');
          
          module.exports = {
            title: 'Bulak Smart Connect React Components',
            pagePerSection: true,
            sections: [
              {
                name: 'Introduction',
                content: 'README.md'
              },
              {
                name: 'User Interface',
                components: 'src/UserBulakSmartConnect/**/*.jsx',
                exampleMode: 'expand',
                usageMode: 'expand',
                sectionDepth: 2
              },
              {
                name: 'Admin Interface',
                components: 'src/AdminBulakSmartConnect/**/*.jsx',
                exampleMode: 'expand',
                usageMode: 'expand',
                sectionDepth: 2
              },
              {
                name: 'Navigation',
                components: 'src/NavigationComponents/**/*.jsx',
                exampleMode: 'expand',
                usageMode: 'expand'
              },
              {
                name: 'Login Components',
                components: 'src/LogInComponents/**/*.jsx',
                exampleMode: 'expand',
                usageMode: 'expand'
              }
            ],
            ignore: [
              '**/__tests__/**',
              '**/*.test.{js,jsx}',
              '**/*.spec.{js,jsx}',
              '**/node_modules/**',
              '**/main.jsx',
              '**/App.jsx',
              '**/*.d.ts'
            ],
            skipComponentsWithoutExample: false,
            updateExample: (props) => {
              const { settings, lang } = props;
              if (lang === 'jsx' && typeof settings.file === 'string') {
                const filePath = settings.file;
                settings.static = true;
              }
              return props;
            },
            webpackConfig: {
              module: {
                rules: [
                  {
                    test: /\.(js|jsx)$/,
                    exclude: /node_modules/,
                    use: {
                      loader: 'babel-loader'
                    }
                  },
                  {
                    test: /\.css$/,
                    use: ['style-loader', 'css-loader']
                  },
                  {
                    test: /\.(png|jpg|gif|svg)$/i,
                    type: 'asset/resource'
                  }
                ]
              },
              resolve: {
                extensions: ['.js', '.jsx'],
                alias: {
                  // Add any path aliases your project uses
                  '@': path.resolve(__dirname, 'src'),
                }
              }
            }
          };
          EOF
          
          # Create a simple README.md for the documentation
          cat > README.md << 'EOF'
          # Bulak Smart Connect Frontend Documentation
          
          This documentation covers the React components used in the Bulak Smart Connect frontend application.
          
          ## Component Organization
          
          - **User Interface**: Components for regular citizens
          - **Admin Interface**: Components for administrators
          - **Navigation**: Shared navigation elements
          - **Login Components**: Authentication-related UI
          
          ## Technology Stack
          
          - React
          - Vite with SWC
          - React Router
          - Material UI
          EOF
          
          # Generate both Styleguidist and fallback documentation
          echo "Building with Styleguidist..."
          npx react-styleguidist build --config styleguide.config.cjs || echo "Styleguidist build failed, using fallback"
          
          # Ensure output directory exists
          mkdir -p docs/frontend
          
          # Create component list file directly (without sed)
          echo "Creating component list..."
          COMPONENT_LIST=$(find src -name "*.jsx" | sort | jq -R . | jq -s . || echo "[]")
          cat > docs/frontend/component-list.js << EOF
          const componentFiles = ${COMPONENT_LIST};
          EOF
          
          # Generate component tree with external script reference
          cat > docs/frontend/component-tree.html << 'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="utf-8">
              <title>Bulak Smart Connect Component Tree</title>
              <style>
                body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px; }
                h1, h2 { color: #1976d2; }
                .folder { margin-left: 20px; }
                .file { margin-left: 40px; color: #333; }
                .component { font-weight: bold; color: #2e7d32; }
                .non-component { color: #757575; }
                .tree-container { border: 1px solid #e0e0e0; border-radius: 4px; padding: 20px; background: #fafafa; }
              </style>
            </head>
            <body>
              <h1>Bulak Smart Connect Component Structure</h1>
              <p>This page shows the structure of React components in the application.</p>
              
              <div class="tree-container">
                <h2>Component Tree</h2>
                <div id="component-tree">Loading component tree...</div>
              </div>
              
              <script src="component-list.js"></script>
              <script>
                document.addEventListener('DOMContentLoaded', function() {
                  const treeContainer = document.getElementById('component-tree');
                  
                  // Organize files by directory
                  const tree = {};
                  componentFiles.forEach(file => {
                    const parts = file.split('/');
                    let current = tree;
                    
                    // Build the tree structure
                    for (let i = 0; i < parts.length - 1; i++) {
                      if (!current[parts[i]]) {
                        current[parts[i]] = {};
                      }
                      current = current[parts[i]];
                    }
                    
                    // Add the file as a leaf node
                    const fileName = parts[parts.length - 1];
                    current[fileName] = true;
                  });
                  
                  // Function to render the tree
                  function renderTree(node, element, path = '') {
                    const entries = Object.entries(node);
                    entries.sort((a, b) => {
                      // Sort directories first, then files
                      const aIsDir = typeof a[1] === 'object';
                      const bIsDir = typeof b[1] === 'object';
                      if (aIsDir && !bIsDir) return -1;
                      if (!aIsDir && bIsDir) return 1;
                      return a[0].localeCompare(b[0]);
                    });
                    
                    entries.forEach(([key, value]) => {
                      if (typeof value === 'object') {
                        // Directory
                        const folderDiv = document.createElement('div');
                        folderDiv.className = 'folder';
                        folderDiv.textContent = `üìÅ ${key}/`;
                        element.appendChild(folderDiv);
                        
                        const childrenDiv = document.createElement('div');
                        renderTree(value, childrenDiv, path + key + '/');
                        element.appendChild(childrenDiv);
                      } else {
                        // File
                        const fileDiv = document.createElement('div');
                        const isComponent = /^[A-Z].*\.jsx$/.test(key);
                        fileDiv.className = isComponent ? 'file component' : 'file non-component';
                        fileDiv.textContent = isComponent ? `üîπ ${key}` : `üìÑ ${key}`;
                        element.appendChild(fileDiv);
                      }
                    });
                  }
                  
                  treeContainer.innerHTML = '';
                  renderTree(tree, treeContainer);
                });
              </script>
            </body>
          </html>
          EOF
          
          # If Styleguidist build succeeded, copy its output
          if [ -d "styleguide" ] && [ -f "styleguide/index.html" ]; then
            echo "Styleguidist build succeeded, using its output"
            cp -r styleguide/* docs/frontend/
          else
            # Create a nice fallback page with component listings
            echo "Creating fallback documentation page"
            cp docs/frontend/component-tree.html docs/frontend/index.html
          fi

      - name: Create documentation hub
        run: |
          mkdir -p doc_hub
          touch doc_hub/.nojekyll
          
          echo '<!DOCTYPE html>
          <html>
            <head>
              <meta charset="utf-8">
              <title>Bulak Smart Connect Documentation Hub</title>
              <style>
                body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
                .card { border: 1px solid #ddd; border-radius: 8px; padding: 16px; margin: 16px 0; }
                .button { display: inline-block; background-color: #4CAF50; color: white; padding: 10px 20px; 
                          text-decoration: none; border-radius: 4px; }
              </style>
            </head>
            <body>
              <h1>Bulak Smart Connect Documentation</h1>
              
              <div class="card">
                <h2>API Documentation</h2>
                <p>Backend API documentation generated with Compodoc.</p>
                <a href="api-docs/" class="button">View API Docs</a>
              </div>
              
              <div class="card">
                <h2>Frontend Documentation</h2>
                <p>Frontend component and service documentation.</p>
                <a href="frontend-docs/" class="button">View Frontend Docs</a>
              </div>
            </body>
          </html>' > doc_hub/index.html
      
      - name: Deploy frontend docs
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: bulak-smart-connect-js/docs/frontend
          target-folder: frontend-docs
          branch: gh-pages
          clean: true
          clean-exclude: |
            .nojekyll
            api-docs/**

      - name: Deploy documentation hub
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: doc_hub
          branch: gh-pages
          clean: false