name: Frontend Documentation

on:
  push:
    branches: ['*']
    paths:
      - 'bulak-smart-connect-js/src/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'bulak-smart-connect-js/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd bulak-smart-connect-js
          npm ci
          npm install --save-dev @storybook/react @storybook/react-vite @storybook/addon-essentials \
            @storybook/addon-links @storybook/addon-interactions @storybook/blocks \
            @vitejs/plugin-react-swc glob prop-types

      - name: Setup Storybook configuration
        run: |
          cd bulak-smart-connect-js
          mkdir -p .storybook
          
          # Main configuration
          cat > .storybook/main.js << 'EOF'
          /** @type {import('@storybook/react-vite').StorybookConfig} */
          const config = {
            stories: ['../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
            addons: [
              '@storybook/addon-links',
              '@storybook/addon-essentials',
              '@storybook/addon-interactions',
            ],
            framework: {
              name: '@storybook/react-vite',
              options: {},
            },
            docs: {
              autodocs: true,
            },
            core: {
              disableTelemetry: true
            },
            staticDirs: ['../public'],
          };
          
          export default config;
          EOF
          
          # Mock authentication for components
          cat > .storybook/preview.js << 'EOF'
          import React from 'react';
          import { BrowserRouter } from 'react-router-dom';

          // Create mock auth context for Storybook
          const MockAuthContext = React.createContext(null);
          
          const MockAuthProvider = ({ children }) => {
            const authValue = {
              isAuthenticated: true,
              user: {
                name: 'John Doe',
                email: 'john@example.com',
                roles: ['admin', 'citizen'],
                defaultRole: 'admin'
              },
              login: () => Promise.resolve({ success: true }),
              logout: () => {},
              hasRole: (role) => ['admin', 'staff', 'citizen'].includes(role),
              hasAnyRole: () => true,
              isAdmin: true,
              isStaff: true,
              isCitizen: true,
              loading: false,
              error: null
            };
            
            return React.createElement(MockAuthContext.Provider, 
              { value: authValue }, 
              children
            );
          };

          // Export the hook as global for components to use
          window.useAuth = () => React.useContext(MockAuthContext);
          
          const preview = {
            parameters: {
              actions: { argTypesRegex: "^on[A-Z].*" },
              controls: {
                matchers: {
                  color: /(background|color)$/i,
                  date: /Date$/,
                },
              },
            },
            decorators: [
              (Story) => React.createElement(
                MockAuthProvider, 
                null,
                React.createElement(
                  BrowserRouter,
                  null,
                  React.createElement(Story, null)
                )
              ),
            ],
          };
          
          export default preview;
          EOF

      - name: Create sample components and mocks
        run: |
          cd bulak-smart-connect-js
          
          # Create mocks directory and auth context mock
          mkdir -p src/__mocks__
          cat > src/__mocks__/authContext.js << 'EOF'
          export const useAuth = () => ({
            isAuthenticated: true,
            user: { 
              name: 'John Doe', 
              email: 'john@example.com', 
              roles: ['admin']
            },
            login: () => Promise.resolve({ success: true }),
            logout: () => {},
            hasRole: () => true,
            isAdmin: true
          });
          EOF
          
          # Create guaranteed Button component and story
          mkdir -p src/stories
          cat > src/stories/Button.jsx << 'EOF'
          import React from 'react';
          import PropTypes from 'prop-types';

          /**
           * Basic button component for user interactions
           */
          const Button = ({ primary, backgroundColor, size, label, onClick }) => {
            const mode = primary ? 'primary-button' : 'secondary-button';
            return (
              <button
                type="button"
                className={['button', `button--${size}`, mode].join(' ')}
                style={backgroundColor && { backgroundColor }}
                onClick={onClick}
              >
                {label}
              </button>
            );
          };

          Button.propTypes = {
            primary: PropTypes.bool,
            backgroundColor: PropTypes.string,
            size: PropTypes.oneOf(['small', 'medium', 'large']),
            label: PropTypes.string.isRequired,
            onClick: PropTypes.func,
          };

          Button.defaultProps = {
            primary: false,
            size: 'medium',
            onClick: undefined,
          };

          export default Button;
          EOF

          cat > src/stories/Button.stories.jsx << 'EOF'
          import React from 'react';
          import Button from './Button';

          export default {
            title: 'Example/Button',
            component: Button,
            tags: ['autodocs'],
            argTypes: {
              backgroundColor: { control: 'color' },
              onClick: { action: 'clicked' },
            },
          };

          export const Primary = {
            args: {
              primary: true,
              label: 'Button',
            },
          };

          export const Secondary = {
            args: {
              label: 'Button',
            },
          };

          export const Large = {
            args: {
              size: 'large',
              label: 'Button',
            },
          };

          export const Small = {
            args: {
              size: 'small',
              label: 'Button',
            },
          };
          EOF

          # Create example component stories
          cat > src/NavigationComponents/NavBar.stories.jsx << 'EOF'
          import React from 'react';
          import NavBar from './NavBar';

          export default {
            title: 'Navigation/NavBar',
            component: NavBar,
            parameters: {
              layout: 'fullscreen',
            }
          };

          const Template = (args) => <NavBar {...args} />;

          export const Default = Template.bind({});
          Default.args = {
            isSidebarOpen: false,
            setIsSidebarOpen: () => {},
          };

          export const WithOpenSidebar = Template.bind({});
          WithOpenSidebar.args = {
            isSidebarOpen: true,
            setIsSidebarOpen: () => {},
          };
          EOF

          cat > src/LandingPageComponents/LandingPage.stories.jsx << 'EOF'
          import React from 'react';
          import LandingPage from './LandingPage';

          export default {
            title: 'Pages/LandingPage',
            component: LandingPage,
            parameters: {
              layout: 'fullscreen',
            }
          };

          export const Default = {};
          EOF
      
      - name: Generate AI-assisted component stories
        run: |
          cd bulak-smart-connect-js
          
          # Create AI story generator
          cat > generate-ai-stories.mjs << 'EOF'
          import fs from 'fs/promises';
          import path from 'path';
          import { fileURLToPath } from 'url';
          import { dirname } from 'path';
          import * as globModule from 'glob';
          import { promisify } from 'util';
          
          const glob = globModule.default || globModule.glob || globModule;
          const globAsync = promisify(glob);
          const __filename = fileURLToPath(import.meta.url);
          const __dirname = dirname(__filename);
          
          // Configuration
          const SRC_DIR = './src';
          
          // Known component directories
          const COMPONENT_DIRS = [
            'AdminBulakSmartConnect',
            'LandingPageComponents',
            'LogInComponents',
            'NavigationComponents',
            'UserBulakSmartConnect',
            'components'
          ];
          
          async function generateAIStories() {
            try {
              console.log('Starting AI-assisted story generation...');
              
              // Get all JSX files in component directories
              const allComponentFiles = [];
              
              for (const dir of COMPONENT_DIRS) {
                const dirPath = path.join(SRC_DIR, dir);
                try {
                  const files = await globAsync(`${dirPath}/**/*.jsx`, {
                    ignore: ['**/node_modules/**', '**/*.stories.*', '**/*.test.*', '**/*.spec.*']
                  });
                  allComponentFiles.push(...files);
                } catch (error) {
                  console.log(`Directory not found: ${dirPath}`);
                }
              }
              
              console.log(`Found ${allComponentFiles.length} potential components`);
              
              let storiesGenerated = 0;
              
              // Analyze and generate stories for components
              for (const filePath of allComponentFiles) {
                try {
                  const relativePath = path.relative(SRC_DIR, path.dirname(filePath));
                  const fileName = path.basename(filePath, path.extname(filePath));
                  
                  // Skip existing stories
                  const storyPath = path.join(path.dirname(filePath), `${fileName}.stories.jsx`);
                  try {
                    await fs.access(storyPath);
                    console.log(`Story already exists for ${fileName}, skipping`);
                    continue;
                  } catch (error) {
                    // File doesn't exist, continue
                  }
                  
                  console.log(`Processing component: ${fileName} in ${relativePath}`);
                  
                  const content = await fs.readFile(filePath, 'utf8');
                  const hasDefaultExport = content.includes(`export default ${fileName}`) || 
                                          content.includes('export default function') ||
                                          content.includes('export default class') ||
                                          content.includes('export default (') ||
                                          content.includes('export default');
                                      
                  const importStatement = hasDefaultExport
                    ? `import ${fileName} from './${fileName}';`
                    : `import { ${fileName} } from './${fileName}';`;
                  
                  // Extract props from function parameters or PropTypes (simplified)
                  let props = [];
                  const propsMatch = content.match(/(?:function|const)\s+\w+\s*=?\s*\(\s*\{([^}]*)\}\s*\)/);
                  if (propsMatch && propsMatch[1]) {
                    props = propsMatch[1]
                      .split(',')
                      .map(p => p.trim())
                      .filter(p => p && !p.includes('...'));
                  }
                  
                  // Create a simple story template
                  const storyTemplate = `import React from 'react';
          ${importStatement}
          
          export default {
            title: '${relativePath}/${fileName}',
            component: ${fileName},
            parameters: {
              componentSubtitle: 'Component from ${relativePath}'
            },
            tags: ['autodocs'],
          };
          
          export const Default = {
            args: {
              ${props.map(prop => `${prop}: undefined`).join(',\n              ')}
            }
          };`;
                  
                  await fs.writeFile(storyPath, storyTemplate);
                  console.log(`✓ Created story for ${fileName}`);
                  storiesGenerated++;
                  
                } catch (error) {
                  console.log(`Error processing ${filePath}: ${error.message}`);
                }
              }
              
              console.log(`✅ Story generation complete!`);
              console.log(`Generated ${storiesGenerated} stories`);
              
            } catch (error) {
              console.error(`Error in story generation: ${error.message}`);
            }
          }
          
          generateAIStories();
          EOF
          
          # Run the story generator
          node generate-ai-stories.mjs
      
      - name: Validate generated stories
        run: |
          cd bulak-smart-connect-js
          echo "=== Story files in project ==="
          find src -name "*.stories.*" | sort
          echo "=== Number of story files: $(find src -name "*.stories.*" | wc -l) ==="
          
          # Ensure at least one story exists
          if [ $(find src -name "*.stories.*" | wc -l) -eq 0 ]; then
            echo "No story files found! Creating fallback story."
            cat > src/fallback.stories.jsx << 'EOF'
          import React from 'react';
          
          const Fallback = () => (
            <div style={{ padding: '20px', textAlign: 'center' }}>
              <h2>No component stories were generated</h2>
              <p>This is a fallback component to ensure Storybook can build properly.</p>
            </div>
          );
          
          export default {
            title: 'Fallback/NoStories',
            component: Fallback
          };
          
          export const Default = {};
          EOF
          fi

      - name: Build and deploy Storybook
        run: |
          cd bulak-smart-connect-js
          # Build Storybook
          npx storybook build --output-dir storybook-static
          
          # Add .nojekyll to prevent GitHub Pages from ignoring files that start with underscore
          touch storybook-static/.nojekyll
        
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: bulak-smart-connect-js/storybook-static
          target-folder: frontend-docs
          branch: gh-pages
          clean: true
          clean-exclude: |
            .nojekyll
            api-docs/**

      - name: Create and deploy documentation hub
        run: |
          mkdir -p doc_hub
          touch doc_hub/.nojekyll
          
          cat > doc_hub/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="utf-8">
              <title>Bulak Smart Connect Documentation Hub</title>
              <style>
                body { 
                  font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
                  max-width: 800px;
                  margin: 0 auto;
                  padding: 20px;
                  line-height: 1.6;
                }
                .header {
                  text-align: center;
                  padding: 20px 0;
                  margin-bottom: 40px;
                  border-bottom: 1px solid #eaeaea;
                }
                .header h1 {
                  color: #184a5b;
                  margin-bottom: 10px;
                }
                .card {
                  border: 1px solid #e0e0e0;
                  border-radius: 8px;
                  padding: 24px;
                  margin-bottom: 24px;
                  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                  transition: transform 0.2s, box-shadow 0.2s;
                }
                .card:hover {
                  transform: translateY(-2px);
                  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                }
                .card h2 {
                  margin-top: 0;
                  color: #184a5b;
                }
                .button {
                  display: inline-block;
                  background-color: #184a5b;
                  color: white;
                  padding: 10px 20px;
                  text-decoration: none;
                  border-radius: 4px;
                  margin-top: 10px;
                  font-weight: 500;
                  transition: background-color 0.2s;
                }
                .button:hover {
                  background-color: #0d3446;
                }
                .footer {
                  text-align: center;
                  color: #666;
                  margin-top: 40px;
                  padding-top: 20px;
                  border-top: 1px solid #eaeaea;
                  font-size: 0.9em;
                }
              </style>
            </head>
            <body>
              <div class="header">
                <h1>Bulak Smart Connect</h1>
                <p>Comprehensive Documentation Hub</p>
              </div>
              
              <div class="card">
                <h2>API Documentation</h2>
                <p>Backend API documentation generated with Compodoc, providing detailed information about endpoints, services, and models.</p>
                <a href="api-docs/" class="button">View API Docs</a>
              </div>
              
              <div class="card">
                <h2>Component Documentation</h2>
                <p>Frontend component documentation built with Storybook, including live examples, props documentation, and usage guides.</p>
                <a href="frontend-docs/" class="button">View Components</a>
              </div>
              
              <div class="footer">
                <p>© $(date +%Y) Bulak Smart Connect</p>
              </div>
            </body>
          </html>
          EOF

      - name: Create documentation hub
        run: |
          cd bulak-smart-connect-js
          mkdir -p ../doc_hub
          touch ../doc_hub/.nojekyll
          
          cat > ../doc_hub/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="utf-8">
              <title>Bulak Smart Connect Documentation Hub</title>
              <style>
                body { 
                  font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
                  max-width: 800px;
                  margin: 0 auto;
                  padding: 20px;
                  line-height: 1.6;
                }
                .header {
                  text-align: center;
                  padding: 20px 0;
                  margin-bottom: 40px;
                  border-bottom: 1px solid #eaeaea;
                }
                .header h1 {
                  color: #184a5b;
                  margin-bottom: 10px;
                }
                .card {
                  border: 1px solid #e0e0e0;
                  border-radius: 8px;
                  padding: 24px;
                  margin-bottom: 24px;
                  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                  transition: transform 0.2s, box-shadow 0.2s;
                }
                .card:hover {
                  transform: translateY(-2px);
                  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                }
                .card h2 {
                  margin-top: 0;
                  color: #184a5b;
                }
                .button {
                  display: inline-block;
                  background-color: #184a5b;
                  color: white;
                  padding: 10px 20px;
                  text-decoration: none;
                  border-radius: 4px;
                  margin-top: 10px;
                  font-weight: 500;
                  transition: background-color 0.2s;
                }
                .button:hover {
                  background-color: #0d3446;
                }
                .footer {
                  text-align: center;
                  color: #666;
                  margin-top: 40px;
                  padding-top: 20px;
                  border-top: 1px solid #eaeaea;
                  font-size: 0.9em;
                }
              </style>
            </head>
            <body>
              <div class="header">
                <h1>Bulak Smart Connect</h1>
                <p>Comprehensive Documentation Hub</p>
              </div>
              
              <div class="card">
                <h2>API Documentation</h2>
                <p>Backend API documentation generated with Compodoc, providing detailed information about endpoints, services, and models.</p>
                <a href="api-docs/" class="button">View API Docs</a>
              </div>
              
              <div class="card">
                <h2>Component Documentation</h2>
                <p>Frontend component documentation built with Storybook, including live examples, props documentation, and usage guides.</p>
                <a href="frontend-docs/" class="button">View Components</a>
              </div>
              
              <div class="footer">
                <p>© $(date +%Y) Bulak Smart Connect</p>
              </div>
            </body>
          </html>
          EOF

      - name: Deploy documentation hub
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: doc_hub
          branch: gh-pages
          clean: false