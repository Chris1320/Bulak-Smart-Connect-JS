name: Frontend Documentation

on:
  push:
    branches: [ '*']
    paths:
      - 'bulak-smart-connect-js/src/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-storybook:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'bulak-smart-connect-js/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd bulak-smart-connect-js
          npm ci
          
          # Install Storybook with correct package names
          npm install --save-dev @storybook/react @storybook/builder-vite @storybook/addon-essentials @storybook/addon-links @storybook/addon-interactions @storybook/blocks @vitejs/plugin-react-swc
          
      - name: Setup Storybook
        run: |
          cd bulak-smart-connect-js
          
          # Create .storybook directory if it doesn't exist
          mkdir -p .storybook
          
          # Create main.js configuration using CommonJS module syntax
          cat > .storybook/main.js << 'EOF'
          /** @type {import('@storybook/react-vite').StorybookConfig} */
          module.exports = {
            stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx)'],
            addons: [
              '@storybook/addon-links',
              '@storybook/addon-essentials',
              '@storybook/addon-interactions',
            ],
            framework: {
              name: '@storybook/react-vite',
              options: {},
            },
            docs: {
              autodocs: true,
            },
            core: {
              disableTelemetry: true
            },
            async viteFinal(config) {
              const { mergeConfig } = await import('vite');
              const { default: react } = await import('@vitejs/plugin-react-swc');
              
              return mergeConfig(config, {
                plugins: [react()]
              });
            }
          };
          EOF
          
          # Create preview.js configuration - using JS not TS
          cat > .storybook/preview.js << 'EOF'
          /** @type {import('@storybook/react').Preview} */
          const preview = {
            parameters: {
              actions: { argTypesRegex: "^on[A-Z].*" },
              controls: {
                matchers: {
                  color: /(background|color)$/i,
                  date: /Date$/,
                },
              },
            },
          };
          
          export default preview;
          EOF
          
          # Create story generator script for JSX with correct ES module imports
          cat > generate-stories.mjs << 'EOF'
          import fs from 'fs/promises';
          import path from 'path';
          import { fileURLToPath } from 'url';
          import { dirname } from 'path';
          import * as globModule from 'glob';  // Import the entire module, not as default
          import { promisify } from 'util';
          
          const glob = globModule.default || globModule.glob || globModule;  // Handle different versions
          const globAsync = promisify(glob);
          const __filename = fileURLToPath(import.meta.url);
          const __dirname = dirname(__filename);
          
          // Configuration
          const SRC_DIR = './src';
          const COMPONENT_EXTENSIONS = ['.jsx', '.js']; // JSX only, no TS
          
          async function generateStories() {
            try {
              // Find component files
              const componentFiles = await globAsync(`${SRC_DIR}/**/*{${COMPONENT_EXTENSIONS.join(',')}}`, {
                ignore: ['**/node_modules/**', '**/stories/**', '**/*.stories.*', '**/*.test.*', '**/*.spec.*']
              });
              
              console.log(`Found ${componentFiles.length} potential component files`);
              
              for (const filePath of componentFiles) {
                try {
                  const content = await fs.readFile(filePath, 'utf8');
                  
                  // Basic React component check
                  if (!content.includes('export') || 
                      (!content.includes('React') && !content.includes('react'))) {
                    continue;
                  }
                  
                  // Get component info
                  const fileName = path.basename(filePath, path.extname(filePath));
                  const fileExt = path.extname(filePath);
                  const relativePath = path.relative(SRC_DIR, path.dirname(filePath));
                  const category = relativePath.split(path.sep)[0] || 'General';
                  
                  // Create story path
                  const storyFilePath = path.join(
                    path.dirname(filePath),
                    `${fileName}.stories${fileExt}`
                  );
                  
                  // Skip if exists
                  try {
                    await fs.access(storyFilePath);
                    console.log(`Story already exists for ${fileName}, skipping`);
                    continue;
                  } catch (error) {
                    // File doesn't exist, continue
                  }
                  
                  // Determine export type
                  const isDefaultExport = content.includes(`export default ${fileName}`) || 
                                         content.includes('export default function') ||
                                         content.includes('export default class');
                  
                  const importStatement = isDefaultExport
                    ? `import ${fileName} from './${fileName}';`
                    : `import { ${fileName} } from './${fileName}';`;
                  
                  // Create JSX-friendly story template (no TypeScript)
                  const storyTemplate = `import React from 'react';
                  ${importStatement}

                  /**
                  * ${fileName} component from ${relativePath}
                  */
                  export default {
                  title: '${category}/${fileName}',
                  component: ${fileName},
                  tags: ['autodocs'],
                  parameters: {
                  componentSubtitle: 'Component from ${relativePath}',
                     },
                  };              


                   // Story template
                   const Template = (args) => <${fileName} {...args} />;

                  // Default story
                  export const Default = Template.bind({});
                  Default.args = {
                  // Add default props here
                  };`;
                  
                  await fs.writeFile(storyFilePath, storyTemplate);
                  console.log(`✓ Created story for ${fileName}`);
                  
                } catch (error) {
                  console.log(`Could not process component ${filePath}: ${error.message}`);
                }
              }
              
              console.log('✅ Story generation complete!');
            } catch (error) {
              console.error('Error generating stories:', error);
              process.exit(1);
            }
          }
          
          generateStories();
          EOF
          
          # Install necessary packages for story generation
          npm install --no-save glob
          
          # Run story generator
          node generate-stories.mjs
      
      - name: Build Storybook
        run: |
          cd bulak-smart-connect-js
          npx storybook build --output-dir storybook-static
      
      - name: Add .nojekyll file
        run: |
          cd bulak-smart-connect-js
          touch storybook-static/.nojekyll
      
      - name: Deploy Storybook
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: bulak-smart-connect-js/storybook-static
          target-folder: frontend-docs
          branch: gh-pages
          clean: true
          clean-exclude: |
            .nojekyll
            api-docs/**

      - name: Update documentation hub
        run: |
          mkdir -p doc_hub
          touch doc_hub/.nojekyll
          
          cat > doc_hub/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="utf-8">
              <title>Bulak Smart Connect Documentation Hub</title>
              <style>
                body { 
                  font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
                  max-width: 800px;
                  margin: 0 auto;
                  padding: 20px;
                  line-height: 1.6;
                }
                .header {
                  text-align: center;
                  padding: 20px 0;
                  margin-bottom: 40px;
                  border-bottom: 1px solid #eaeaea;
                }
                .header h1 {
                  color: #184a5b;
                  margin-bottom: 10px;
                }
                .card {
                  border: 1px solid #e0e0e0;
                  border-radius: 8px;
                  padding: 24px;
                  margin-bottom: 24px;
                  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                  transition: transform 0.2s, box-shadow 0.2s;
                }
                .card:hover {
                  transform: translateY(-2px);
                  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                }
                .card h2 {
                  margin-top: 0;
                  color: #184a5b;
                }
                .button {
                  display: inline-block;
                  background-color: #184a5b;
                  color: white;
                  padding: 10px 20px;
                  text-decoration: none;
                  border-radius: 4px;
                  margin-top: 10px;
                  font-weight: 500;
                  transition: background-color 0.2s;
                }
                .button:hover {
                  background-color: #0d3446;
                }
                .footer {
                  text-align: center;
                  color: #666;
                  margin-top: 40px;
                  padding-top: 20px;
                  border-top: 1px solid #eaeaea;
                  font-size: 0.9em;
                }
              </style>
            </head>
            <body>
              <div class="header">
                <h1>Bulak Smart Connect</h1>
                <p>Comprehensive Documentation Hub</p>
              </div>
              
              <div class="card">
                <h2>API Documentation</h2>
                <p>Backend API documentation generated with Compodoc, providing detailed information about endpoints, services, and models.</p>
                <a href="api-docs/" class="button">View API Docs</a>
              </div>
              
              <div class="card">
                <h2>Component Documentation</h2>
                <p>Frontend component documentation built with Storybook, including live examples, props documentation, and usage guides.</p>
                <a href="frontend-docs/" class="button">View Components</a>
              </div>
              
              <div class="footer">
                <p>© $(date +%Y) Bulak Smart Connect</p>
              </div>
            </body>
          </html>
          EOF
          
      - name: Deploy documentation hub
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: doc_hub
          branch: gh-pages
          clean: false