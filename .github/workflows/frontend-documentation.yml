name: Frontend Documentation

on:
  push:
    branches: [ '*']
    paths:
      - 'bulak-smart-connect-js/src/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-storybook:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'bulak-smart-connect-js/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd bulak-smart-connect-js
          npm ci
          npm install --save-dev @storybook/react @storybook/react-vite @storybook/addon-essentials @storybook/addon-links @storybook/addon-interactions @storybook/blocks @vitejs/plugin-react-swc glob
      
      - name: Configure Storybook
        run: |
          cd bulak-smart-connect-js
          
          # Create .storybook directory
          mkdir -p .storybook
          
          # Create main.js configuration
          cat > .storybook/main.js << 'EOF'
          /** @type {import('@storybook/react-vite').StorybookConfig} */
          const config = {
            stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
            addons: [
              '@storybook/addon-links',
              '@storybook/addon-essentials',
              '@storybook/addon-interactions',
            ],
            framework: {
              name: '@storybook/react-vite',
              options: {},
            },
            docs: {
              autodocs: 'tag',
            },
            core: {
              disableTelemetry: true
            },
            staticDirs: ['../public'],
          };
          
          export default config;
          EOF
          
          # Create preview.js
          cat > .storybook/preview.js << 'EOF'
          import React from 'react';
          import { BrowserRouter } from 'react-router-dom';

          /** @type {import('@storybook/react').Preview} */
          const preview = {
            parameters: {
              actions: { argTypesRegex: "^on[A-Z].*" },
              controls: {
                matchers: {
                  color: /(background|color)$/i,
                  date: /Date$/,
                },
              },
            },
            decorators: [
              (Story) => React.createElement(
                BrowserRouter,
                null,
                React.createElement(Story, null)
              ),
            ],
          };
          
          export default preview;
          EOF

      - name: Generate Component Stories
        run: |
          cd bulak-smart-connect-js
          
          # Create comprehensive story generator with modern CSF3 format
          cat > generate-stories.mjs << 'EOF'
          import fs from 'fs/promises';
          import path from 'path';
          import { fileURLToPath } from 'url';
          import { dirname } from 'path';
          import * as globModule from 'glob';
          import { promisify } from 'util';
          
          const glob = globModule.default || globModule.glob || globModule;
          const globAsync = promisify(glob);
          const __filename = fileURLToPath(import.meta.url);
          const __dirname = dirname(__filename);
          
          // Configuration
          const SRC_DIR = './src';
          const COMPONENT_EXTENSIONS = ['.jsx', '.js'];
          
          // Patterns that help identify component files vs utility files
          const COMPONENT_MARKERS = ['function', 'return', 'render', 'React', '<', '/>'];
          const UTILITY_PATTERNS = [
            'api', 'service', 'util', 'helper', 'context', 'provider', 
            'store', 'reducer', 'action', 'constant', 'config', 'hook',
            'data', 'mock', 'info', 'manager'
          ];
          
          // Known component directories
          const COMPONENT_DIRS = [
            'AdminBulakSmartConnect',
            'LandingPageComponents',
            'LogInComponents',
            'NavigationComponents',
            'UserBulakSmartConnect/ApplicationComponents',
            'UserBulakSmartConnect/AppointmentComponents',
            'UserBulakSmartConnect/SignUpComponents',
            'UserBulakSmartConnect/UserDashboard',
            'UserBulakSmartConnect/WalkInComponents',
            'UserBulakSmartConnect/QRCodeComponents',
            'components'
          ];
          
          // File analysis helpers
          function isUtilityFile(filePath, content) {
            const fileName = path.basename(filePath).toLowerCase();
            
            // Check if filename contains utility patterns
            if (UTILITY_PATTERNS.some(pattern => fileName.includes(pattern.toLowerCase()))) {
              return true;
            }
            
            // For JS files, check content patterns
            if (path.extname(filePath) === '.js') {
              // If it has multiple exports but no JSX, likely utility
              const hasMultipleExports = (content.match(/export\s+/g) || []).length > 1;
              const hasJSX = content.includes('<') && 
                            (content.includes('/>') || content.includes('</'));
              
              if (hasMultipleExports && !hasJSX) {
                return true;
              }
              
              // If it's just exporting functions/variables without JSX returns
              if (content.includes('export function') || content.includes('export const')) {
                if (!content.includes('return <') && !content.includes('return (')) {
                  return true;
                }
              }
            }
            
            return false;
          }
          
          function isLikelyComponent(filePath, content) {
            // JSX files are almost always components
            if (path.extname(filePath) === '.jsx') {
              return true;
            }
            
            // Check if it has component markers
            const markerCount = COMPONENT_MARKERS.filter(marker => 
              content.includes(marker)).length;
              
            // If it has at least 4 component markers, likely a component
            return markerCount >= 4;
          }
          
          function analyzeExports(content, fileName) {
            // Check for default export
            const hasDefaultExport = content.includes(`export default ${fileName}`) || 
                                    content.includes(`export default function ${fileName}`) ||
                                    content.includes(`export default class ${fileName}`) ||
                                    content.includes('export default (') ||
                                    content.includes('export default ') && !content.includes(`export default ${fileName}`);
            
            // Check for named export of the same name as the file
            const hasNamedExport = content.includes(`export function ${fileName}`) || 
                                  content.includes(`export const ${fileName}`) || 
                                  content.includes(`export class ${fileName}`);
            
            return {
              hasDefaultExport,
              hasNamedExport
            };
          }
          
          async function generateStories() {
            try {
              console.log(`Looking for components in ${path.resolve(SRC_DIR)}`);
              
              // Create mocks for context providers
              await setupMocks();
              
              // Get all JS/JSX files
              const allFiles = await globAsync(`${SRC_DIR}/**/*{${COMPONENT_EXTENSIONS.join(',')}}`, {
                ignore: ['**/node_modules/**', '**/*.stories.*', '**/*.test.*', '**/*.spec.*']
              });
              
              console.log(`Found ${allFiles.length} total JS/JSX files`);
              
              // Prioritize files in known component directories
              const priorityFiles = allFiles.filter(file => {
                const relativePath = path.relative(SRC_DIR, file);
                return COMPONENT_DIRS.some(dir => relativePath.startsWith(dir)) ||
                      path.basename(file) === 'App.jsx';
              });
              
              console.log(`Found ${priorityFiles.length} files in priority component directories`);
              
              // Process and filter components
              const componentFiles = [];
              const skippedFiles = [];
              
              for (const file of priorityFiles) {
                try {
                  const content = await fs.readFile(file, 'utf8');
                  
                  // Skip utility files
                  if (isUtilityFile(file, content)) {
                    skippedFiles.push(path.basename(file));
                    continue;
                  }
                  
                  // Check if it's likely a component
                  if (isLikelyComponent(file, content)) {
                    componentFiles.push({ path: file, content });
                  } else {
                    skippedFiles.push(path.basename(file));
                  }
                } catch (err) {
                  console.log(`Error reading ${file}: ${err.message}`);
                }
              }
              
              console.log(`Identified ${componentFiles.length} component files`);
              console.log(`Skipped ${skippedFiles.length} non-component files`);
              
              // Generate stories for components
              let storiesGenerated = 0;
              
              for (const { path: filePath, content } of componentFiles) {
                try {
                  const fileName = path.basename(filePath, path.extname(filePath));
                  const relativePath = path.relative(SRC_DIR, path.dirname(filePath));
                  const category = relativePath.split(path.sep)[0] || 'General';
                  
                  console.log(`Generating story for ${fileName} in ${category}`);
                  
                  // Check if story already exists
                  const storyPath = path.join(path.dirname(filePath), `${fileName}.stories.jsx`);
                  try {
                    await fs.access(storyPath);
                    console.log(`Story already exists for ${fileName}, skipping`);
                    continue;
                  } catch (error) {
                    // File doesn't exist, continue
                  }
                  
                  // Analyze exports to determine import statement
                  const { hasDefaultExport, hasNamedExport } = analyzeExports(content, fileName);
                  
                  // Create import statement based on export analysis
                  const importStatement = hasDefaultExport
                    ? `import ${fileName} from './${fileName}';`
                    : hasNamedExport
                      ? `import { ${fileName} } from './${fileName}';`
                      : `// Failed to determine export type\nimport ${fileName} from './${fileName}';`;
                  
                  // Generate story with CSF3 format
                  const storyTemplate = `import React from 'react';
          ${importStatement}
          
          /**
           * ${fileName} component from ${relativePath}
           */
          export default {
            title: '${category}/${fileName}',
            component: ${fileName},
            parameters: {
              layout: 'padded',
              componentSubtitle: 'Component from ${relativePath}'
            },
            tags: ['autodocs'],
          };
          
          /**
           * Default example of the ${fileName} component
           */
          export const Default = {
            args: {
              // Default props here
            }
          };
          `;
                  
                  await fs.writeFile(storyPath, storyTemplate);
                  console.log(`✓ Created story for ${fileName}`);
                  storiesGenerated++;
                  
                } catch (error) {
                  console.log(`Error processing ${filePath}: ${error.message}`);
                }
              }
              
              // Create a fallback story if needed
              if (storiesGenerated === 0) {
                await createFallbackStory();
              }
              
              console.log(`✅ Story generation complete!`);
              console.log(`Generated ${storiesGenerated} stories`);
              
            } catch (error) {
              console.error(`Error in story generation: ${error.message}`);
              console.error(error.stack);
              process.exit(1);
            }
          }
          
          async function setupMocks() {
            // Create mocks directory
            const mocksDir = path.join(SRC_DIR, '__mocks__');
            await fs.mkdir(mocksDir, { recursive: true });
            
            // Create AuthContext mock
            const authMockPath = path.join(mocksDir, 'authContext.js');
            const authMock = `
          // Mock AuthContext for Storybook
          export const useAuth = () => ({
            isAuthenticated: true,
            user: {
              name: 'John Doe',
              email: 'john.doe@example.com',
              roles: ['admin'],
              defaultRole: 'admin'
            },
            loading: false,
            error: null,
            login: () => Promise.resolve({ success: true }),
            logout: () => {},
            hasRole: () => true,
            hasAnyRole: () => true,
            isAdmin: true,
            isStaff: true,
            isCitizen: true
          });
          `;
            await fs.writeFile(authMockPath, authMock);
            
            // Add other mocks as needed
          }
          
          async function createFallbackStory() {
            const dummyPath = path.join(SRC_DIR, 'dummy.stories.jsx');
            const dummyStory = `
          import React from 'react';
          
          /**
           * This is a placeholder component to ensure Storybook has at least one story to display.
           */
          const Dummy = () => (
            <div style={{ 
              padding: '2rem', 
              backgroundColor: '#f5f5f5',
              borderRadius: '8px',
              textAlign: 'center' 
            }}>
              <h2>Bulak Smart Connect Components</h2>
              <p>This is a placeholder component. No actual component stories were generated.</p>
            </div>
          );
          
          export default {
            title: 'Placeholder/Dummy',
            component: Dummy,
          };
          
          export const Default = {};
          `;
            await fs.writeFile(dummyPath, dummyStory);
            console.log('Created fallback story');
            return 1;
          }
          
          // Run the story generator
          generateStories();
          EOF
          
          # Run the generator
          node generate-stories.mjs

      - name: Validate stories
        run: |
          cd bulak-smart-connect-js
          echo "=== Story files in project ==="
          find src -name "*.stories.*" | sort
          echo "=== Number of story files: $(find src -name "*.stories.*" | wc -l) ==="
          
          # Show sample story content
          SAMPLE=$(find src -name "*.stories.*" | head -n 1)
          if [ -n "$SAMPLE" ]; then
            echo "=== Sample story file content ==="
            cat "$SAMPLE"
          else
            echo "No story files found!"
            # Create fallback story if none exists
            cat > src/fallback.stories.jsx << 'EOF'
          import React from 'react';
          
          const Fallback = () => (
            <div style={{ padding: '20px', textAlign: 'center' }}>
              <h2>No component stories were generated</h2>
              <p>This is a fallback component to ensure Storybook can build properly.</p>
            </div>
          );
          
          export default {
            title: 'Fallback/NoStories',
            component: Fallback
          };
          
          export const Default = {};
          EOF
            echo "Created fallback story"
          fi

      - name: Build Storybook
        run: |
          cd bulak-smart-connect-js
          npx storybook build --output-dir storybook-static
        continue-on-error: false
      
      - name: Add .nojekyll file
        run: |
          cd bulak-smart-connect-js
          touch storybook-static/.nojekyll
      
      - name: Deploy Storybook
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: bulak-smart-connect-js/storybook-static
          target-folder: frontend-docs
          branch: gh-pages
          clean: true
          clean-exclude: |
            .nojekyll
            api-docs/**

      - name: Update documentation hub
        run: |
          mkdir -p doc_hub
          touch doc_hub/.nojekyll
          
          cat > doc_hub/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="utf-8">
              <title>Bulak Smart Connect Documentation Hub</title>
              <style>
                body { 
                  font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
                  max-width: 800px;
                  margin: 0 auto;
                  padding: 20px;
                  line-height: 1.6;
                }
                .header {
                  text-align: center;
                  padding: 20px 0;
                  margin-bottom: 40px;
                  border-bottom: 1px solid #eaeaea;
                }
                .header h1 {
                  color: #184a5b;
                  margin-bottom: 10px;
                }
                .card {
                  border: 1px solid #e0e0e0;
                  border-radius: 8px;
                  padding: 24px;
                  margin-bottom: 24px;
                  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                  transition: transform 0.2s, box-shadow 0.2s;
                }
                .card:hover {
                  transform: translateY(-2px);
                  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                }
                .card h2 {
                  margin-top: 0;
                  color: #184a5b;
                }
                .button {
                  display: inline-block;
                  background-color: #184a5b;
                  color: white;
                  padding: 10px 20px;
                  text-decoration: none;
                  border-radius: 4px;
                  margin-top: 10px;
                  font-weight: 500;
                  transition: background-color 0.2s;
                }
                .button:hover {
                  background-color: #0d3446;
                }
                .footer {
                  text-align: center;
                  color: #666;
                  margin-top: 40px;
                  padding-top: 20px;
                  border-top: 1px solid #eaeaea;
                  font-size: 0.9em;
                }
              </style>
            </head>
            <body>
              <div class="header">
                <h1>Bulak Smart Connect</h1>
                <p>Comprehensive Documentation Hub</p>
              </div>
              
              <div class="card">
                <h2>API Documentation</h2>
                <p>Backend API documentation generated with Compodoc, providing detailed information about endpoints, services, and models.</p>
                <a href="api-docs/" class="button">View API Docs</a>
              </div>
              
              <div class="card">
                <h2>Component Documentation</h2>
                <p>Frontend component documentation built with Storybook, including live examples, props documentation, and usage guides.</p>
                <a href="frontend-docs/" class="button">View Components</a>
              </div>
              
              <div class="footer">
                <p>© $(date +%Y) Bulak Smart Connect</p>
              </div>
            </body>
          </html>
          EOF
          
      - name: Deploy documentation hub
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: doc_hub
          branch: gh-pages
          clean: false

      - name: Fix Storybook configuration and build
        run: |
          cd bulak-smart-connect-js
          
          # 1. Fix preview.js by replacing JSX with React.createElement
          cat > .storybook/preview.js << 'EOF'
          import React from 'react';
          import { BrowserRouter } from 'react-router-dom';

          /** @type {import('@storybook/react').Preview} */
          const preview = {
            parameters: {
              actions: { argTypesRegex: "^on[A-Z].*" },
              controls: {
                matchers: {
                  color: /(background|color)$/i,
                  date: /Date$/,
                },
              },
            },
            decorators: [
              (Story) => React.createElement(
                BrowserRouter,
                null,
                React.createElement(Story, null)
              ),
            ],
          };
          
          export default preview;
          EOF
          
          # 2. Create a simple test story to ensure something works
          mkdir -p src/stories
          cat > src/stories/Button.jsx << 'EOF'
          import React from 'react';
          import PropTypes from 'prop-types';

          /**
           * Basic button component for user interactions
           */
          const Button = ({ primary, backgroundColor, size, label, onClick }) => {
            const mode = primary ? 'primary-button' : 'secondary-button';
            return (
              <button
                type="button"
                className={['button', `button--${size}`, mode].join(' ')}
                style={backgroundColor && { backgroundColor }}
                onClick={onClick}
              >
                {label}
              </button>
            );
          };

          Button.propTypes = {
            /**
             * Is this the principal call to action on the page?
             */
            primary: PropTypes.bool,
            /**
             * What background color to use
             */
            backgroundColor: PropTypes.string,
            /**
             * How large should the button be?
             */
            size: PropTypes.oneOf(['small', 'medium', 'large']),
            /**
             * Button contents
             */
            label: PropTypes.string.isRequired,
            /**
             * Optional click handler
             */
            onClick: PropTypes.func,
          };

          Button.defaultProps = {
            primary: false,
            size: 'medium',
            onClick: undefined,
          };

          export default Button;
          EOF

          cat > src/stories/Button.stories.jsx << 'EOF'
          import React from 'react';
          import Button from './Button';

          export default {
            title: 'Example/Button',
            component: Button,
            tags: ['autodocs'],
            argTypes: {
              backgroundColor: { control: 'color' },
              onClick: { action: 'clicked' },
            },
          };

          export const Primary = {
            args: {
              primary: true,
              label: 'Button',
            },
          };

          export const Secondary = {
            args: {
              label: 'Button',
            },
          };

          export const Large = {
            args: {
              size: 'large',
              label: 'Button',
            },
          };

          export const Small = {
            args: {
              size: 'small',
              label: 'Button',
            },
          };
          EOF
          
          # 3. Add missing prop-types dependency
          npm install --save prop-types
          
          # 4. Run storybook build again
          npx storybook build --output-dir storybook-static