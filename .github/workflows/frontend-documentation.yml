name: Frontend Documentation

on:
  push:
    branches: [ '*']
    paths:
      - 'bulak-smart-connect-js/src/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-storybook:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'bulak-smart-connect-js/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd bulak-smart-connect-js
          npm ci
          npm install --save-dev @storybook/react @storybook/react-vite @storybook/addon-essentials @storybook/addon-links @storybook/addon-interactions @storybook/blocks @vitejs/plugin-react-swc glob
      
      - name: Configure Storybook
        run: |
          cd bulak-smart-connect-js
          
          # Create .storybook directory
          mkdir -p .storybook
          
          # Create main.js configuration
          cat > .storybook/main.js << 'EOF'
          /** @type {import('@storybook/react-vite').StorybookConfig} */
          const config = {
            stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
            addons: [
              '@storybook/addon-links',
              '@storybook/addon-essentials',
              '@storybook/addon-interactions',
            ],
            framework: {
              name: '@storybook/react-vite',
              options: {},
            },
            docs: {
              autodocs: 'tag',
            },
            core: {
              disableTelemetry: true
            },
            staticDirs: ['../public'],
          };
          
          export default config;
          EOF
          
          # Create preview.js
          cat > .storybook/preview.js << 'EOF'
          import React from 'react';
          import { BrowserRouter } from 'react-router-dom';

          /** @type {import('@storybook/react').Preview} */
          const preview = {
            parameters: {
              actions: { argTypesRegex: "^on[A-Z].*" },
              controls: {
                matchers: {
                  color: /(background|color)$/i,
                  date: /Date$/,
                },
              },
            },
            decorators: [
              (Story) => React.createElement(
                BrowserRouter,
                null,
                React.createElement(Story, null)
              ),
            ],
          };
          
          export default preview;
          EOF

      - name: Generate Component Stories with Improved Detection
        run: |
          cd bulak-smart-connect-js
          
          # Create an improved story generator script
          cat > generate-stories.mjs << 'EOF'
          import fs from 'fs/promises';
          import path from 'path';
          import { fileURLToPath } from 'url';
          import { dirname } from 'path';
          import * as globModule from 'glob';
          import { promisify } from 'util';
          
          const glob = globModule.default || globModule.glob || globModule;
          const globAsync = promisify(glob);
          const __filename = fileURLToPath(import.meta.url);
          const __dirname = dirname(__filename);
          
          // Configuration
          const SRC_DIR = './src';
          
          async function generateStories() {
            try {
              console.log(`Looking for components in ${path.resolve(SRC_DIR)}`);
              
              // Debug directory structure
              const dirs = await fs.readdir(SRC_DIR);
              console.log(`Found directories in src: ${dirs.join(', ')}`);
              
              // Get all JSX files - they're almost certainly components
              const jsxFiles = await globAsync(`${SRC_DIR}/**/*.jsx`, {
                ignore: ['**/node_modules/**', '**/*.stories.*', '**/*.test.*', '**/*.spec.*']
              });
              
              console.log(`Found ${jsxFiles.length} JSX files that could be components`);
              
              // Also check JS files that might be components
              const jsFiles = await globAsync(`${SRC_DIR}/**/[A-Z]*.js`, {
                ignore: ['**/node_modules/**', '**/*.stories.*', '**/*.test.*', '**/*.spec.*', '**/context/*', '**/services/*', '**/utils/*']
              });
              
              console.log(`Found ${jsFiles.length} potential component JS files`);
              
              const allPotentialComponentFiles = [...jsxFiles, ...jsFiles];
              
              // Create mocks directory for auth context and other dependencies
              const mocksDir = path.join(SRC_DIR, '__mocks__');
              await fs.mkdir(mocksDir, { recursive: true });
              
              // Create AuthContext mock
              const authContextMockPath = path.join(mocksDir, 'authContext.js');
              const authContextMock = `
          export const useAuth = () => ({
            isAuthenticated: true,
            user: { name: 'John Doe', email: 'john@example.com', roles: ['admin'] },
            login: () => Promise.resolve({ success: true }),
            logout: () => {},
            hasRole: () => true,
            isAdmin: true
          });
          `;
              await fs.writeFile(authContextMockPath, authContextMock);
              
              // Track progress
              let storiesGenerated = 0;
              
              // Generate stories for all potential component files
              for (const filePath of allPotentialComponentFiles) {
                try {
                  const content = await fs.readFile(filePath, 'utf8');
                  const fileName = path.basename(filePath, path.extname(filePath));
                  const relativePath = path.relative(SRC_DIR, path.dirname(filePath));
                  
                  // Skip files that are clearly not components
                  if (
                    fileName.toLowerCase().includes('context') || 
                    fileName.toLowerCase().includes('provider') ||
                    fileName.toLowerCase().includes('service') ||
                    fileName.toLowerCase().includes('utils') ||
                    fileName.toLowerCase().includes('helper') ||
                    fileName.toLowerCase().includes('constant')
                  ) {
                    continue;
                  }
                  
                  // Check for component-like structure - be very lenient!
                  const isProbablyComponent = content.includes('import React') || 
                                         content.includes('from "react"') || 
                                         (content.includes('export') && 
                                          (content.includes('<') || content.includes('/>')));
                  
                  if (!isProbablyComponent) {
                    continue;
                  }
                  
                  console.log(`Processing component: ${fileName} in ${relativePath}`);
                  
                  // Create story path
                  const storyFilePath = path.join(
                    path.dirname(filePath),
                    `${fileName}.stories.jsx`
                  );
                  
                  // Skip if story already exists
                  try {
                    await fs.access(storyFilePath);
                    console.log(`Story already exists for ${fileName}, skipping`);
                    continue;
                  } catch (error) {
                    // File doesn't exist, continue
                  }
                  
                  // Determine if default or named export (best effort)
                  const hasDefaultExport = content.includes(`export default ${fileName}`) || 
                                     content.includes('export default function') ||
                                     content.includes('export default class') ||
                                     content.includes('export default (') ||
                                     content.includes('export default');
                  
                  const importStatement = hasDefaultExport
                    ? `import ${fileName} from './${fileName}';`
                    : `import { ${fileName} } from './${fileName}';`;
                  
                  // Create a category based on directory structure
                  const category = relativePath.split(path.sep)[0] || 'General';
                  
                  // Generate story file
                  const storyTemplate = `import React from 'react';
          ${importStatement}
          
          export default {
            title: '${category}/${fileName}',
            component: ${fileName},
            parameters: {
              componentSubtitle: 'Component from ${relativePath}'
            }
          };
          
          export const Default = {
            args: {}
          };`;
                  
                  await fs.writeFile(storyFilePath, storyTemplate);
                  console.log(`âœ“ Created story for ${fileName}`);
                  storiesGenerated++;
                } catch (error) {
                  console.log(`Error processing ${filePath}: ${error.message}`);
                }
              }
              
              // Create a dummy story if no stories were generated
              if (storiesGenerated === 0) {
                console.log("No components found that match criteria. Creating minimal sample component...");
                
                // Create a sample component and story to ensure Storybook works
                const sampleComponentDir = path.join(SRC_DIR, 'stories');
                await fs.mkdir(sampleComponentDir, { recursive: true });
                
                const sampleComponentPath = path.join(sampleComponentDir, 'SampleButton.jsx');
                const sampleComponent = `import React from 'react';
          
          const SampleButton = ({ label, onClick }) => (
            <button 
              onClick={onClick}
              style={{
                backgroundColor: '#184a5b',
                color: 'white',
                padding: '10px 20px',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer'
              }}
            >
              {label || 'Click Me'}
            </button>
          );
          
          export default SampleButton;
          `;
                await fs.writeFile(sampleComponentPath, sampleComponent);
                
                const sampleStoryPath = path.join(sampleComponentDir, 'SampleButton.stories.jsx');
                const sampleStory = `import React from 'react';
          import SampleButton from './SampleButton';
          
          export default {
            title: 'Example/SampleButton',
            component: SampleButton,
            tags: ['autodocs'],
          };
          
          export const Primary = {
            args: {
              label: 'Sample Button',
              onClick: () => alert('Button clicked!')
            }
          };
          `;
                await fs.writeFile(sampleStoryPath, sampleStory);
                console.log("Created sample component and story");
                storiesGenerated = 1;
              }
              
              console.log(`âœ… Story generation complete!`);
              console.log(`Generated ${storiesGenerated} stories`);
              
            } catch (error) {
              console.error(`Error in story generation: ${error.message}`);
              console.error(error.stack);
              process.exit(1);
            }
          }
          
          generateStories();
          EOF
          
          # Run the improved generator
          node generate-stories.mjs

      - name: Validate stories
        run: |
          cd bulak-smart-connect-js
          echo "=== Story files in project ==="
          find src -name "*.stories.*" | sort
          echo "=== Number of story files: $(find src -name "*.stories.*" | wc -l) ==="
          
          # Show sample story content
          SAMPLE=$(find src -name "*.stories.*" | head -n 1)
          if [ -n "$SAMPLE" ]; then
            echo "=== Sample story file content ==="
            cat "$SAMPLE"
          else
            echo "No story files found!"
            # Create fallback story if none exists
            cat > src/fallback.stories.jsx << 'EOF'
          import React from 'react';
          
          const Fallback = () => (
            <div style={{ padding: '20px', textAlign: 'center' }}>
              <h2>No component stories were generated</h2>
              <p>This is a fallback component to ensure Storybook can build properly.</p>
            </div>
          );
          
          export default {
            title: 'Fallback/NoStories',
            component: Fallback
          };
          
          export const Default = {};
          EOF
            echo "Created fallback story"
          fi

      - name: Build Storybook
        run: |
          cd bulak-smart-connect-js
          npx storybook build --output-dir storybook-static
        continue-on-error: false
      
      - name: Add .nojekyll file
        run: |
          cd bulak-smart-connect-js
          touch storybook-static/.nojekyll
      
      - name: Deploy Storybook
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: bulak-smart-connect-js/storybook-static
          target-folder: frontend-docs
          branch: gh-pages
          clean: true
          clean-exclude: |
            .nojekyll
            api-docs/**

      - name: Update documentation hub
        run: |
          mkdir -p doc_hub
          touch doc_hub/.nojekyll
          
          cat > doc_hub/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="utf-8">
              <title>Bulak Smart Connect Documentation Hub</title>
              <style>
                body { 
                  font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
                  max-width: 800px;
                  margin: 0 auto;
                  padding: 20px;
                  line-height: 1.6;
                }
                .header {
                  text-align: center;
                  padding: 20px 0;
                  margin-bottom: 40px;
                  border-bottom: 1px solid #eaeaea;
                }
                .header h1 {
                  color: #184a5b;
                  margin-bottom: 10px;
                }
                .card {
                  border: 1px solid #e0e0e0;
                  border-radius: 8px;
                  padding: 24px;
                  margin-bottom: 24px;
                  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                  transition: transform 0.2s, box-shadow 0.2s;
                }
                .card:hover {
                  transform: translateY(-2px);
                  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                }
                .card h2 {
                  margin-top: 0;
                  color: #184a5b;
                }
                .button {
                  display: inline-block;
                  background-color: #184a5b;
                  color: white;
                  padding: 10px 20px;
                  text-decoration: none;
                  border-radius: 4px;
                  margin-top: 10px;
                  font-weight: 500;
                  transition: background-color 0.2s;
                }
                .button:hover {
                  background-color: #0d3446;
                }
                .footer {
                  text-align: center;
                  color: #666;
                  margin-top: 40px;
                  padding-top: 20px;
                  border-top: 1px solid #eaeaea;
                  font-size: 0.9em;
                }
              </style>
            </head>
            <body>
              <div class="header">
                <h1>Bulak Smart Connect</h1>
                <p>Comprehensive Documentation Hub</p>
              </div>
              
              <div class="card">
                <h2>API Documentation</h2>
                <p>Backend API documentation generated with Compodoc, providing detailed information about endpoints, services, and models.</p>
                <a href="api-docs/" class="button">View API Docs</a>
              </div>
              
              <div class="card">
                <h2>Component Documentation</h2>
                <p>Frontend component documentation built with Storybook, including live examples, props documentation, and usage guides.</p>
                <a href="frontend-docs/" class="button">View Components</a>
              </div>
              
              <div class="footer">
                <p>Â© $(date +%Y) Bulak Smart Connect</p>
              </div>
            </body>
          </html>
          EOF
          
      - name: Deploy documentation hub
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: doc_hub
          branch: gh-pages
          clean: false

      - name: Fix Storybook configuration and build
        run: |
          cd bulak-smart-connect-js
          
          # 1. Fix preview.js by replacing JSX with React.createElement
          cat > .storybook/preview.js << 'EOF'
          import React from 'react';
          import { BrowserRouter } from 'react-router-dom';

          /** @type {import('@storybook/react').Preview} */
          const preview = {
            parameters: {
              actions: { argTypesRegex: "^on[A-Z].*" },
              controls: {
                matchers: {
                  color: /(background|color)$/i,
                  date: /Date$/,
                },
              },
            },
            decorators: [
              (Story) => React.createElement(
                BrowserRouter,
                null,
                React.createElement(Story, null)
              ),
            ],
          };
          
          export default preview;
          EOF
          
          # 2. Create a simple test story to ensure something works
          mkdir -p src/stories
          cat > src/stories/Button.jsx << 'EOF'
          import React from 'react';
          import PropTypes from 'prop-types';

          /**
           * Basic button component for user interactions
           */
          const Button = ({ primary, backgroundColor, size, label, onClick }) => {
            const mode = primary ? 'primary-button' : 'secondary-button';
            return (
              <button
                type="button"
                className={['button', `button--${size}`, mode].join(' ')}
                style={backgroundColor && { backgroundColor }}
                onClick={onClick}
              >
                {label}
              </button>
            );
          };

          Button.propTypes = {
            /**
             * Is this the principal call to action on the page?
             */
            primary: PropTypes.bool,
            /**
             * What background color to use
             */
            backgroundColor: PropTypes.string,
            /**
             * How large should the button be?
             */
            size: PropTypes.oneOf(['small', 'medium', 'large']),
            /**
             * Button contents
             */
            label: PropTypes.string.isRequired,
            /**
             * Optional click handler
             */
            onClick: PropTypes.func,
          };

          Button.defaultProps = {
            primary: false,
            size: 'medium',
            onClick: undefined,
          };

          export default Button;
          EOF

          cat > src/stories/Button.stories.jsx << 'EOF'
          import React from 'react';
          import Button from './Button';

          export default {
            title: 'Example/Button',
            component: Button,
            tags: ['autodocs'],
            argTypes: {
              backgroundColor: { control: 'color' },
              onClick: { action: 'clicked' },
            },
          };

          export const Primary = {
            args: {
              primary: true,
              label: 'Button',
            },
          };

          export const Secondary = {
            args: {
              label: 'Button',
            },
          };

          export const Large = {
            args: {
              size: 'large',
              label: 'Button',
            },
          };

          export const Small = {
            args: {
              size: 'small',
              label: 'Button',
            },
          };
          EOF
          
          # 3. Add missing prop-types dependency
          npm install --save prop-types
          
          # 4. Run storybook build again
          npx storybook build --output-dir storybook-static