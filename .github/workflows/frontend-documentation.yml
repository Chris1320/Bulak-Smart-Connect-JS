name: Frontend Documentation

on:
  push:
    branches: [ '*']
    paths:
      - 'bulak-smart-connect-js/src/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-frontend-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'bulak-smart-connect-js/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd bulak-smart-connect-js
          npm ci
          
          # Install only required dependencies for documentation
          npm install --no-save react-styleguidist babel-loader @babel/preset-env @babel/preset-react style-loader css-loader file-loader
          
          # Fix vulnerabilities that don't break functionality
          npm audit fix --production || true
      
      - name: Fix CSS image references before build
        run: |
          cd bulak-smart-connect-js
          
          # Find all CSS files with background-image URLs that might cause issues
          find src -name "*.css" -exec grep -l "background-image: url" {} \; | while read file; do
            echo "Fixing image paths in $file"
            # Replace image paths with CSS gradients
            sed -i 's|background-image: url([^)]*);|background-image: linear-gradient(to bottom, #f8f9fa, #e9ecef);|g' "$file"
          done

      - name: Generate frontend documentation
        run: |
          cd bulak-smart-connect-js
          
          # Create a more robust styleguide configuration with proper webpack config
          cat > styleguide.config.cjs << 'EOF'
          const path = require('path');
          
          module.exports = {
            title: 'Bulak Smart Connect React Components',
            components: 'src/**/[A-Z]*.jsx',  // Target components with uppercase names
            sections: [
              {
                name: 'User Interface',
                components: 'src/UserBulakSmartConnect/**/*.jsx',
                description: 'Components for the user-facing interface'
              },
              {
                name: 'Admin Interface',
                components: 'src/AdminBulakSmartConnect/**/*.jsx',
                description: 'Components for the admin interface'
              },
              {
                name: 'Shared Components',
                components: 'src/components/**/*.jsx',
                description: 'Reusable components across the application'
              }
            ],
            ignore: [
              '**/__tests__/**',
              '**/*.test.jsx',
              '**/*.spec.jsx',
              '**/node_modules/**',
              '**/index.jsx'
            ],
            skipComponentsWithoutExample: false,
            exampleMode: 'expand',
            usageMode: 'expand',
            webpackConfig: {
              module: {
                rules: [
                  {
                    test: /\.(js|jsx)$/,
                    exclude: /node_modules/,
                    use: { loader: 'babel-loader', options: { presets: ['@babel/preset-env', '@babel/preset-react'] } }
                  },
                  {
                    test: /\.css$/,
                    use: ['style-loader', 'css-loader']
                  },
                  {
                    test: /\.(png|jpg|gif|svg)$/,
                    use: ['file-loader']
                  }
                ]
              },
              resolve: {
                extensions: ['.js', '.jsx']
              }
            },
            // For debugging - log all detected components
            dangerouslyUpdateWebpackConfig: (webpackConfig) => {
              console.log('Detected components:', require('fs').readdirSync('src')
                .filter(file => file.endsWith('.jsx'))
                .map(file => 'src/' + file));
              return webpackConfig;
            }
          };
          EOF
          
          # Create a simple component file to debug Styleguidist
          mkdir -p src/debug
          cat > src/debug/TestComponent.jsx << 'EOF'
          import React from 'react';
          
          /**
           * Test component to verify Styleguidist is working
           * @component
           * @example
           * return <TestComponent message="Hello" />
           */
          const TestComponent = ({ message }) => <div>{message}</div>;
          
          export default TestComponent;
          EOF
          
          # Create fallback components manifest
          mkdir -p docs/frontend
          
          echo "Running component detection..."
          COMPONENTS=$(find src -name "*.jsx" | sort)
          echo "Found components: $COMPONENTS"
          
          # Generate comprehensive component listing HTML
          cat > component-list.html << 'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <title>Bulak Smart Connect Components</title>
              <style>
                body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
                .component-section { margin-bottom: 30px; }
                .component-item { margin-bottom: 10px; padding: 10px; border: 1px solid #eee; }
                h3 { margin-top: 5px; }
                pre { background: #f4f4f4; padding: 10px; overflow: auto; }
              </style>
            </head>
            <body>
              <h1>Bulak Smart Connect Component Listing</h1>
              <p>This is a static listing of components in the codebase. Full documentation with Styleguidist failed to generate.</p>
              <div id="component-list">Loading component list...</div>
              
              <script>
                document.addEventListener('DOMContentLoaded', function() {
                  const componentList = document.getElementById('component-list');
                  componentList.innerHTML = '';
                  
                  // Components are inserted here by the shell script
                  const components = COMPONENT_LIST_PLACEHOLDER;
                  
                  // Group by directory
                  const groupedComponents = {};
                  components.forEach(comp => {
                    const parts = comp.split('/');
                    const group = parts.length > 2 ? parts[1] : 'Other';
                    if (!groupedComponents[group]) {
                      groupedComponents[group] = [];
                    }
                    groupedComponents[group].push(comp);
                  });
                  
                  // Generate HTML
                  Object.keys(groupedComponents).sort().forEach(group => {
                    const section = document.createElement('div');
                    section.className = 'component-section';
                    section.innerHTML = `<h2>${group}</h2>`;
                    
                    groupedComponents[group].forEach(comp => {
                      const item = document.createElement('div');
                      item.className = 'component-item';
                      item.innerHTML = `
                        <h3>${comp.split('/').pop().replace('.jsx', '')}</h3>
                        <pre>${comp}</pre>
                      `;
                      section.appendChild(item);
                    });
                    
                    componentList.appendChild(section);
                  });
                });
              </script>
            </body>
          </html>
          EOF
          
          # Insert component list into the HTML
          COMPONENT_JSON=$(find src -name "*.jsx" | sort | jq -R . | jq -s .)
          sed "s/COMPONENT_LIST_PLACEHOLDER/$COMPONENT_JSON/g" component-list.html > docs/frontend/index.html
          
          # Try to build with Styleguidist
          echo "Building with Styleguidist..."
          npx styleguidist build --config styleguide.config.cjs || echo "Styleguidist build failed, using fallback"
          
          # If Styleguidist build succeeded, copy its output
          if [ -d "styleguide" ] && [ -f "styleguide/index.html" ]; then
            echo "Styleguidist build succeeded, using its output"
            cp -r styleguide/* docs/frontend/
          fi
      
      - name: Create documentation hub
        run: |
          mkdir -p doc_hub
          touch doc_hub/.nojekyll
          
          echo '<!DOCTYPE html>
          <html>
            <head>
              <meta charset="utf-8">
              <title>Bulak Smart Connect Documentation Hub</title>
              <style>
                body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
                .card { border: 1px solid #ddd; border-radius: 8px; padding: 16px; margin: 16px 0; }
                .button { display: inline-block; background-color: #4CAF50; color: white; padding: 10px 20px; 
                          text-decoration: none; border-radius: 4px; }
              </style>
            </head>
            <body>
              <h1>Bulak Smart Connect Documentation</h1>
              
              <div class="card">
                <h2>API Documentation</h2>
                <p>Backend API documentation generated with Compodoc.</p>
                <a href="api-docs/" class="button">View API Docs</a>
              </div>
              
              <div class="card">
                <h2>Frontend Documentation</h2>
                <p>Frontend component and service documentation.</p>
                <a href="frontend-docs/" class="button">View Frontend Docs</a>
              </div>
            </body>
          </html>' > doc_hub/index.html
      
      - name: Deploy frontend docs
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: bulak-smart-connect-js/docs/frontend
          target-folder: frontend-docs
          branch: gh-pages
          clean: true
          clean-exclude: |
            .nojekyll
            api-docs/**

      - name: Deploy documentation hub
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: doc_hub
          branch: gh-pages
          clean: false