name: Frontend Documentation

on:
  push:
    branches: [ '*']
    paths:
      - 'bulak-smart-connect-js/src/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-frontend-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'bulak-smart-connect-js/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd bulak-smart-connect-js
          npm ci
          
          # Install Storybook and all required dependencies directly
          npm install --no-save storybook@latest @storybook/react@latest @storybook/addon-links@latest @storybook/addon-essentials@latest @storybook/addon-docs@latest @storybook/builder-webpack5@latest @storybook/manager-webpack5@latest webpack style-loader css-loader babel-loader @babel/preset-env @babel/preset-react
          
          # Create a .babelrc file for Storybook
          echo '{
            "presets": ["@babel/preset-env", "@babel/preset-react"]
          }' > .babelrc
          
      - name: Fix CSS image references before build
        run: |
          cd bulak-smart-connect-js
          
          # Find all CSS files with background-image URLs that might cause issues
          find src -name "*.css" -exec grep -l "background-image: url" {} \; | while read file; do
            echo "Fixing image paths in $file"
            # Replace image paths with CSS gradients
            sed -i 's|background-image: url([^)]*);|background-image: linear-gradient(to bottom, #f8f9fa, #e9ecef);|g' "$file"
          done

      - name: Generate frontend documentation
        run: |
          cd bulak-smart-connect-js
          
          # Create Storybook configuration files
          mkdir -p .storybook
          
          # Main configuration file
          cat > .storybook/main.js << 'EOF'
          module.exports = {
            stories: [
              '../src/**/*.stories.mdx',
              '../src/**/*.stories.@(js|jsx|ts|tsx)',
              '../src/**/!(*.stories).jsx' // Include all JSX files as stories
            ],
            addons: [
              '@storybook/addon-links',
              '@storybook/addon-essentials',
              '@storybook/addon-docs'
            ],
            framework: '@storybook/react',
            core: {
              builder: '@storybook/builder-webpack5',
            },
            features: {
              storyStoreV7: false, // For better compatibility
            },
            webpackFinal: async (config) => {
              // Handle CSS files
              config.module.rules.push({
                test: /\.css$/,
                use: ['style-loader', 'css-loader'],
              });
              
              // Handle image files
              config.module.rules.push({
                test: /\.(png|jpg|gif|svg)$/i,
                type: 'asset/resource'
              });
              
              return config;
            },
          };
          EOF
          
          # Preview configuration
          cat > .storybook/preview.js << 'EOF'
          import { BrowserRouter } from 'react-router-dom';
          
          export const parameters = {
            actions: { argTypesRegex: "^on[A-Z].*" },
            controls: {
              matchers: {
                color: /(background|color)$/i,
                date: /Date$/,
              },
            },
          };
          
          export const decorators = [
            (Story) => (
              <BrowserRouter>
                <div style={{ margin: '2rem' }}>
                  <Story />
                </div>
              </BrowserRouter>
            ),
          ];
          EOF
          
          # Create automatic stories generator
          cat > .storybook/automaticStories.js << 'EOF'
          import React from 'react';
          import { glob } from 'glob';
          import path from 'path';
          
          // Automatically generate stories for components
          const generateStories = async () => {
            const componentFiles = await glob('src/**/*.jsx');
            
            for (const file of componentFiles) {
              if (file.includes('.stories.') || file.includes('App.jsx')) continue;
              
              // Import component dynamically
              const componentPath = path.resolve(file);
              const component = await import(componentPath);
              
              if (component.default) {
                const name = path.basename(file, '.jsx');
                const dirName = path.dirname(file).split('/').pop();
                
                export default {
                  title: `${dirName}/${name}`,
                  component: component.default,
                };
                
                export const Default = () => <component.default />;
              }
            }
          };
          
          generateStories();
          EOF
          
          # Create README.md for Storybook
          cat > .storybook/README.stories.mdx << 'EOF'
          import { Meta } from '@storybook/addon-docs';
          
          <Meta title="Introduction" />
          
          # Bulak Smart Connect Frontend Documentation
          
          This documentation covers the React components used in the Bulak Smart Connect frontend application.
          
          ## Component Organization
          
          - **User Interface**: Components for regular citizens
          - **Admin Interface**: Components for administrators
          - **Navigation**: Shared navigation elements
          - **Login Components**: Authentication-related UI
          
          ## Technology Stack
          
          - React
          - Vite with SWC
          - React Router
          - Material UI
          EOF
          
          # Generate sample stories for key components
          mkdir -p src/stories
          
          # Create a story for NavBar
          cat > src/stories/NavBar.stories.jsx << 'EOF'
          import React from 'react';
          import NavBar from '../NavigationComponents/NavBar';
          
          export default {
            title: 'Navigation/NavBar',
            component: NavBar,
            parameters: {
              docs: {
                description: {
                  component: 'Navigation bar component used throughout the application',
                },
              },
            },
          };
          
          export const Default = () => <NavBar />;
          EOF
          
          # Create a story for NavSide
          cat > src/stories/NavSide.stories.jsx << 'EOF'
          import React, { useState } from 'react';
          import NavBar from '../NavigationComponents/NavSide';
          
          export default {
            title: 'Navigation/NavSide',
            component: NavBar,
            parameters: {
              docs: {
                description: {
                  component: 'Sidebar navigation component used throughout the application',
                },
              },
            },
          };
          
          export const Default = () => {
            const [isSidebarOpen, setIsSidebarOpen] = useState(false);
            return <NavBar isSidebarOpen={isSidebarOpen} setIsSidebarOpen={setIsSidebarOpen} />;
          };
          EOF
          
          # Build Storybook
          echo "Building with Storybook..."
          npx storybook build -o docs/frontend --quiet || echo "Storybook build failed, using fallback"
          
          # Ensure output directory exists
          mkdir -p docs/frontend
          
          # Create component list file for fallback
          echo "Creating component list..."
          COMPONENT_LIST=$(find src -name "*.jsx" | sort | jq -R . | jq -s . || echo "[]")
          cat > docs/frontend/component-list.js << EOF
          const componentFiles = ${COMPONENT_LIST};
          EOF
          
          # Generate component tree with external script reference
          cat > docs/frontend/component-tree.html << 'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="utf-8">
              <title>Bulak Smart Connect Component Tree</title>
              <style>
                body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px; }
                h1, h2 { color: #1976d2; }
                .folder { margin-left: 20px; }
                .file { margin-left: 40px; color: #333; }
                .component { font-weight: bold; color: #2e7d32; }
                .non-component { color: #757575; }
                .tree-container { border: 1px solid #e0e0e0; border-radius: 4px; padding: 20px; background: #fafafa; }
              </style>
            </head>
            <body>
              <h1>Bulak Smart Connect Component Structure</h1>
              <p>This page shows the structure of React components in the application.</p>
              
              <div class="tree-container">
                <h2>Component Tree</h2>
                <div id="component-tree">Loading component tree...</div>
              </div>
              
              <script src="component-list.js"></script>
              <script>
                document.addEventListener('DOMContentLoaded', function() {
                  const treeContainer = document.getElementById('component-tree');
                  
                  // Organize files by directory
                  const tree = {};
                  componentFiles.forEach(file => {
                    const parts = file.split('/');
                    let current = tree;
                    
                    // Build the tree structure
                    for (let i = 0; i < parts.length - 1; i++) {
                      if (!current[parts[i]]) {
                        current[parts[i]] = {};
                      }
                      current = current[parts[i]];
                    }
                    
                    // Add the file as a leaf node
                    const fileName = parts[parts.length - 1];
                    current[fileName] = true;
                  });
                  
                  // Function to render the tree
                  function renderTree(node, element, path = '') {
                    const entries = Object.entries(node);
                    entries.sort((a, b) => {
                      // Sort directories first, then files
                      const aIsDir = typeof a[1] === 'object';
                      const bIsDir = typeof b[1] === 'object';
                      if (aIsDir && !bIsDir) return -1;
                      if (!aIsDir && bIsDir) return 1;
                      return a[0].localeCompare(b[0]);
                    });
                    
                    entries.forEach(([key, value]) => {
                      if (typeof value === 'object') {
                        // Directory
                        const folderDiv = document.createElement('div');
                        folderDiv.className = 'folder';
                        folderDiv.textContent = `📁 ${key}/`;
                        element.appendChild(folderDiv);
                        
                        const childrenDiv = document.createElement('div');
                        renderTree(value, childrenDiv, path + key + '/');
                        element.appendChild(childrenDiv);
                      } else {
                        // File
                        const fileDiv = document.createElement('div');
                        const isComponent = /^[A-Z].*\.jsx$/.test(key);
                        fileDiv.className = isComponent ? 'file component' : 'file non-component';
                        fileDiv.textContent = isComponent ? `🔹 ${key}` : `📄 ${key}`;
                        element.appendChild(fileDiv);
                      }
                    });
                  }
                  
                  treeContainer.innerHTML = '';
                  renderTree(tree, treeContainer);
                });
              </script>
            </body>
          </html>
          EOF
          
          # If Storybook build failed, use fallback
          if [ ! -f "docs/frontend/index.html" ]; then
            echo "Creating fallback documentation page"
            cp docs/frontend/component-tree.html docs/frontend/index.html
          fi

      - name: Create documentation hub
        run: |
          mkdir -p doc_hub
          touch doc_hub/.nojekyll
          
          echo '<!DOCTYPE html>
          <html>
            <head>
              <meta charset="utf-8">
              <title>Bulak Smart Connect Documentation Hub</title>
              <style>
                body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
                .card { border: 1px solid #ddd; border-radius: 8px; padding: 16px; margin: 16px 0; }
                .button { display: inline-block; background-color: #4CAF50; color: white; padding: 10px 20px; 
                          text-decoration: none; border-radius: 4px; }
              </style>
            </head>
            <body>
              <h1>Bulak Smart Connect Documentation</h1>
              
              <div class="card">
                <h2>API Documentation</h2>
                <p>Backend API documentation generated with Compodoc.</p>
                <a href="api-docs/" class="button">View API Docs</a>
              </div>
              
              <div class="card">
                <h2>Frontend Documentation</h2>
                <p>Frontend component and service documentation.</p>
                <a href="frontend-docs/" class="button">View Frontend Docs</a>
              </div>
            </body>
          </html>' > doc_hub/index.html
      
      - name: Deploy frontend docs
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: bulak-smart-connect-js/docs/frontend
          target-folder: frontend-docs
          branch: gh-pages
          clean: true
          clean-exclude: |
            .nojekyll
            api-docs/**

      - name: Deploy documentation hub
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: doc_hub
          branch: gh-pages
          clean: false