name: Frontend Documentation

on:
  push:
    branches: [ '*']
    paths:
      - 'bulak-smart-connect-js/src/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-frontend-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'bulak-smart-connect-js/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd bulak-smart-connect-js
          npm ci
          
          # Install Docusaurus and supporting packages
          npm install --no-save @docusaurus/core @docusaurus/preset-classic react-docgen jsdoc-to-markdown glob fs-extra
      
      - name: Generate frontend documentation
        run: |
          cd bulak-smart-connect-js
          
          # Check if Docusaurus needs to be initialized
          if [ -d "docusaurus" ]; then
            echo "Docusaurus directory already exists, skipping initialization"
          else
            # Initialize Docusaurus
            npx @docusaurus/init@latest init docusaurus classic
          fi
          
          # Make sure the components docs directory exists
          mkdir -p docusaurus/docs/components
          
          # Create component documentation extractor script
          cat > extract-components.js << 'EOF'
          const reactDocgen = require('react-docgen');
          const fs = require('fs-extra');
          const path = require('path');
          const glob = require('glob');
          
          // Configuration
          const SRC_DIR = './src';
          const DOCS_DIR = './docusaurus/docs/components';
          const COMPONENT_EXTENSIONS = ['.jsx', '.tsx'];
          
          // Ensure docs directory exists
          fs.ensureDirSync(DOCS_DIR);
          
          // Create component categories from folder structure
          const categories = {};
          
          // Find all component files
          const componentFiles = glob.sync(`${SRC_DIR}/**/*{${COMPONENT_EXTENSIONS.join(',')}}`, {
            ignore: ['**/node_modules/**', '**/stories/**']
          });
          
          console.log(`Found ${componentFiles.length} potential component files`);
          
          // Process each component file
          componentFiles.forEach(filePath => {
            try {
              const content = fs.readFileSync(filePath, 'utf8');
              
              // Basic check if this is likely a React component
              if (!content.includes('export') || 
                  (!content.includes('React') && !content.includes('react'))) {
                return;
              }
              
              try {
                // Try to parse the component
                const componentInfo = reactDocgen.parse(content, null, null, {
                  filename: filePath
                });
                
                // Get component name and path
                const fileName = path.basename(filePath, path.extname(filePath));
                const relativePath = path.relative(SRC_DIR, path.dirname(filePath));
                const category = relativePath.split(path.sep)[0] || 'General';
                
                if (!categories[category]) {
                  categories[category] = [];
                }
                
                // Add to category
                categories[category].push({
                  name: fileName,
                  path: filePath,
                  description: componentInfo.description || 'No description available',
                  props: componentInfo.props || {}
                });
                
                // Create markdown without indentation in template string
                let frontMatter = [
                  '---',
                  `id: ${fileName.toLowerCase()}`,
                  `title: ${fileName}`,
                  '---',
                  ''
                ].join('\n');
                
                let content = [
                  `# ${fileName}`,
                  '',
                  `${componentInfo.description || 'No description available'}`,
                  '',
                  '```jsx',
                  `import { ${fileName} } from '${relativePath}/${fileName}';`,
                  '```',
                  '',
                  '## Component Location',
                  '',
                  `\`${relativePath}/${fileName}.jsx\``,
                  ''
                ].join('\n');
                
                let propsContent = '';
                if (componentInfo.props && Object.keys(componentInfo.props).length > 0) {
                  propsContent = [
                    '',
                    '## Props',
                    '',
                    '| Name | Type | Default | Description |',
                    '|------|------|---------|-------------|'
                  ].join('\n');
                  
                  Object.entries(componentInfo.props).forEach(([propName, propInfo]) => {
                    const type = propInfo.type ? propInfo.type.name : 'unknown';
                    const defaultValue = propInfo.defaultValue ? propInfo.defaultValue.value : '-';
                    const description = propInfo.description || 'No description';
                    
                    propsContent += `\n| ${propName} | \`${type}\` | ${defaultValue} | ${description} |`;
                  });
                }
                
                // Combine all parts
                let markdown = frontMatter + content + propsContent;
                
                // Write component documentation
                fs.writeFileSync(
                  path.join(DOCS_DIR, `${fileName.toLowerCase()}.md`),
                  markdown
                );
                
                console.log(`✓ Generated docs for ${fileName}`);
              } catch (parseError) {
                // This might not be a component or might use syntax react-docgen can't handle
                console.log(`Could not parse component in ${filePath}: ${parseError.message}`);
              }
            } catch (readError) {
              console.error(`Error reading ${filePath}: ${readError}`);
            }
          });
          
          // Generate category index files
          Object.entries(categories).forEach(([category, components]) => {
            if (components.length > 0) {
              const categoryDir = path.join(DOCS_DIR, category.toLowerCase());
              fs.ensureDirSync(categoryDir);
              
              // Create category index without template string indentation issues
              const categoryFrontMatter = [
                '---',
                `id: ${category.toLowerCase()}-index`,
                `title: ${category} Components`,
                '---',
                '',
                `# ${category} Components`,
                '',
                `This section contains components from the \`${category}\` module.`,
                ''
              ].join('\n');
              
              let categoryLinks = '';
              components.forEach(component => {
                categoryLinks += `- [${component.name}](${component.name.toLowerCase()})\n`;
                
                // Move component doc to category folder
                try {
                  fs.moveSync(
                    path.join(DOCS_DIR, `${component.name.toLowerCase()}.md`),
                    path.join(categoryDir, `${component.name.toLowerCase()}.md`),
                    { overwrite: true }
                  );
                } catch (err) {
                  console.error(`Error moving ${component.name} docs: ${err}`);
                }
              });
              
              fs.writeFileSync(
                path.join(categoryDir, 'index.md'),
                categoryFrontMatter + categoryLinks
              );
            }
          });
          
          // Create main components index without template string indentation issues
          const indexFrontMatter = [
            '---',
            'id: components-overview',
            'title: Components Overview',
            'slug: /components',
            '---',
            '',
            '# Components Overview',
            '',
            'Bulak Smart Connect is built with a modular component architecture, organized by functional area.',
            ''
          ].join('\n');
          
          let categoryLinks = '';
          Object.keys(categories).sort().forEach(category => {
            categoryLinks += `## ${category} Components\n\n`;
            categoryLinks += `[Browse ${category} components](${category.toLowerCase()}/index)\n\n`;
          });
          
          fs.writeFileSync(
            path.join(DOCS_DIR, 'components-overview.md'),
            indexFrontMatter + categoryLinks
          );
          
          console.log('✅ Component documentation generation complete!');
          EOF
          
          # Update Docusaurus configuration
          cat > docusaurus/docusaurus.config.js << 'EOF'
          /** @type {import('@docusaurus/types').DocusaurusConfig} */
          module.exports = {
            title: 'Bulak Smart Connect',
            tagline: 'Frontend Component Documentation',
            url: 'https://yukarlo15.github.io',
            baseUrl: '/Bulak-Smart-Connect-JS/frontend-docs/',
            onBrokenLinks: 'warn',
            onBrokenMarkdownLinks: 'warn',
            favicon: 'img/favicon.ico',
            organizationName: 'yukarlo15',
            projectName: 'Bulak-Smart-Connect-JS',
            themeConfig: {
              colorMode: {
                defaultMode: 'light',
                disableSwitch: false,
                respectPrefersColorScheme: true,
              },
              navbar: {
                title: 'Bulak Smart Connect',
                items: [
                  {
                    type: 'doc',
                    docId: 'intro',
                    position: 'left',
                    label: 'Documentation',
                  },
                  {
                    type: 'doc',
                    docId: 'components/components-overview',
                    position: 'left',
                    label: 'Components',
                  },
                  {
                    href: 'https://github.com/YuKARLO15/Bulak-Smart-Connect-JS',
                    label: 'GitHub',
                    position: 'right',
                  },
                ],
              },
              footer: {
                style: 'dark',
                links: [
                  {
                    title: 'Docs',
                    items: [
                      {
                        label: 'Documentation',
                        to: '/docs/intro',
                      },
                      {
                        label: 'Components',
                        to: '/docs/components',
                      },
                    ],
                  },
                  {
                    title: 'More',
                    items: [
                      {
                        label: 'GitHub',
                        href: 'https://github.com/YuKARLO15/Bulak-Smart-Connect-JS',
                      },
                    ],
                  },
                ],
                copyright: `Copyright © ${new Date().getFullYear()} Bulak Smart Connect. Built with Docusaurus.`,
              },
            },
            presets: [
              [
                '@docusaurus/preset-classic',
                {
                  docs: {
                    sidebarPath: require.resolve('./sidebars.js'),
                    editUrl:
                      'https://github.com/YuKARLO15/Bulak-Smart-Connect-JS/edit/main/',
                  },
                  theme: {
                    customCss: require.resolve('./src/css/custom.css'),
                  },
                },
              ],
            ],
          };
          EOF
          
          # Create a custom intro document
          cat > docusaurus/docs/intro.md << 'EOF'
          ---
          sidebar_position: 1
          slug: /
          ---
          
          # Bulak Smart Connect Documentation
          
          Welcome to the Bulak Smart Connect Frontend Documentation.
          
          ## Project Overview
          
          Bulak Smart Connect is a modern web application that streamlines document processing for citizens. It provides an intuitive interface for citizens to submit applications, schedule appointments, and track the status of their requests.
          
          ## Key Features
          
          - User dashboard for citizens
          - Application submission for various certificate types
          - Appointment scheduling system
          - Admin interface for document processing
          - Realtime notification system
          - Mobile-responsive design
          
          ## Technology Stack
          
          - **Frontend**: React with Vite + SWC
          - **UI Library**: Material UI
          - **Routing**: React Router
          - **State Management**: Context API
          
          ## Component Structure
          
          The application is organized into logical modules:
          
          1. **User Interface** - Components for regular citizens to access services
          2. **Admin Interface** - Components for administrators to manage the system
          3. **Navigation** - Shared navigation components across the application
          4. **Authentication** - Login and user management components
          
          Browse the [Components section](./components) for detailed documentation.
          EOF
          
          # Run the component documentation extraction script
          node extract-components.js
          
          # Build the Docusaurus site
          cd docusaurus
          npm install
          npm run build
      
      - name: Deploy documentation
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: bulak-smart-connect-js/docusaurus/build
          target-folder: frontend-docs
          branch: gh-pages
          clean: true
          clean-exclude: |
            .nojekyll
            api-docs/**

      - name: Create and deploy documentation hub
        run: |
          mkdir -p doc_hub
          touch doc_hub/.nojekyll
          
          cat > doc_hub/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="utf-8">
              <title>Bulak Smart Connect Documentation Hub</title>
              <style>
                body { 
                  font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
                  max-width: 800px;
                  margin: 0 auto;
                  padding: 20px;
                  line-height: 1.6;
                }
                .header {
                  text-align: center;
                  padding: 20px 0;
                  margin-bottom: 40px;
                  border-bottom: 1px solid #eaeaea;
                }
                .header h1 {
                  color: #184a5b;
                  margin-bottom: 10px;
                }
                .card {
                  border: 1px solid #e0e0e0;
                  border-radius: 8px;
                  padding: 24px;
                  margin-bottom: 24px;
                  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                  transition: transform 0.2s, box-shadow 0.2s;
                }
                .card:hover {
                  transform: translateY(-2px);
                  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                }
                .card h2 {
                  margin-top: 0;
                  color: #184a5b;
                }
                .button {
                  display: inline-block;
                  background-color: #184a5b;
                  color: white;
                  padding: 10px 20px;
                  text-decoration: none;
                  border-radius: 4px;
                  margin-top: 10px;
                  font-weight: 500;
                  transition: background-color 0.2s;
                }
                .button:hover {
                  background-color: #0d3446;
                }
                .footer {
                  text-align: center;
                  color: #666;
                  margin-top: 40px;
                  padding-top: 20px;
                  border-top: 1px solid #eaeaea;
                  font-size: 0.9em;
                }
              </style>
            </head>
            <body>
              <div class="header">
                <h1>Bulak Smart Connect</h1>
                <p>Comprehensive Documentation Hub</p>
              </div>
              
              <div class="card">
                <h2>API Documentation</h2>
                <p>Backend API documentation generated with Compodoc, providing detailed information about endpoints, services, and models.</p>
                <a href="api-docs/" class="button">View API Docs</a>
              </div>
              
              <div class="card">
                <h2>Frontend Documentation</h2>
                <p>Frontend component and service documentation built with Docusaurus, including component properties, usage examples, and architecture overview.</p>
                <a href="frontend-docs/" class="button">View Frontend Docs</a>
              </div>
              
              <div class="footer">
                <p>© $(date +%Y) Bulak Smart Connect</p>
              </div>
            </body>
          </html>
          EOF
          
      - name: Deploy documentation hub
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: doc_hub
          branch: gh-pages
          clean: false