name: Frontend Documentation

on:
  push:
    branches: [ '*']
    paths:
      - 'bulak-smart-connect-js/src/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-frontend-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'bulak-smart-connect-js/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd bulak-smart-connect-js
          npm ci
          
          # Install only required dependencies for documentation
          npm install --no-save react-styleguidist babel-loader @babel/preset-env @babel/preset-react style-loader css-loader file-loader
          
          # Fix vulnerabilities that don't break functionality
          npm audit fix --production || true
      
      - name: Fix CSS image references before build
        run: |
          cd bulak-smart-connect-js
          
          # Find all CSS files with background-image URLs that might cause issues
          find src -name "*.css" -exec grep -l "background-image: url" {} \; | while read file; do
            echo "Fixing image paths in $file"
            # Replace image paths with CSS gradients
            sed -i 's|background-image: url([^)]*);|background-image: linear-gradient(to bottom, #f8f9fa, #e9ecef);|g' "$file"
          done

      - name: Generate frontend documentation
        run: |
          cd bulak-smart-connect-js
          
          # Create a more robust styleguide configuration
          cat > styleguide.config.cjs << 'EOF'
          const path = require('path');
          
          module.exports = {
            title: 'Bulak Smart Connect React Components',
            // More specific component matching to avoid files that aren't components
            components: [
              'src/**/UserBulakSmartConnect/**/*([A-Z]*)*.jsx',
              'src/**/AdminBulakSmartConnect/**/*([A-Z]*)*.jsx',
              'src/**/LandingPageComponents/**/*([A-Z]*)*.jsx',
              'src/**/LogInComponents/**/*([A-Z]*)*.jsx',
              'src/**/NavigationComponents/**/*([A-Z]*)*.jsx',
              'src/**/components/**/*([A-Z]*)*.jsx',
            ],
            ignore: [
              '**/__tests__/**',
              '**/*.test.jsx',
              '**/*.spec.jsx',
              '**/node_modules/**',
              '**/*.js',
              '**/index.jsx',
              '**/*([a-z]*)*.jsx', // Likely not a component if it starts lowercase
              '**/RegularBirth.jsx', // Explicitly ignore the problematic file
            ],
            skipComponentsWithoutExample: true, // Skip components that have no examples
            template: {
              head: {
                links: [
                  {
                    rel: 'stylesheet',
                    href: 'https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap'
                  }
                ]
              }
            },
            webpackConfig: {
              module: {
                rules: [
                  {
                    test: /\.(js|jsx)$/,
                    exclude: /node_modules/,
                    use: {
                      loader: 'babel-loader',
                      options: {
                        presets: ['@babel/preset-env', '@babel/preset-react']
                      }
                    }
                  },
                  {
                    test: /\.css$/,
                    use: ['style-loader', 'css-loader']
                  },
                  {
                    test: /\.(png|jpg|gif|svg)$/,
                    use: [
                      {
                        loader: 'file-loader',
                        options: {
                          name: '[name].[ext]',
                          outputPath: 'images/',
                          emitFile: true
                        }
                      }
                    ]
                  }
                ]
              },
              resolve: {
                // Provide fallbacks for missing assets
                fallback: {
                  path: false,
                  fs: false
                }
              }
            },
            // Handle errors more gracefully
            dangerouslyUpdateWebpackConfig: (webpackConfig) => {
              webpackConfig.plugins = webpackConfig.plugins || [];
              webpackConfig.plugins.push(
                new (require('webpack').DefinePlugin)({
                  'process.env': {
                    NODE_ENV: JSON.stringify('production')
                  }
                })
              );
              return webpackConfig;
            }
          };
          EOF
          
          # Create empty placeholder files for any missing files that might be referenced
          mkdir -p src/assets/images
          touch src/assets/images/placeholder.jpg
          
          # Run with error handling
          npx styleguidist build --config styleguide.config.cjs || (echo "Build failed but continuing with available files" && mkdir -p styleguide && touch styleguide/index.html)
          
          # Ensure output directory exists and copy files
          mkdir -p docs/frontend
          cp -r styleguide/* docs/frontend/ 2>/dev/null || echo "Warning: No styleguide files generated"
          
          # Create a fallback page if build failed completely
          if [ ! -f "docs/frontend/index.html" ]; then
            echo "Creating fallback documentation page"
            echo '<!DOCTYPE html>
            <html>
              <head><title>Frontend Documentation</title></head>
              <body>
                <h1>Documentation Generation Failed</h1>
                <p>Please check the GitHub Actions logs for details on why the documentation build failed.</p>
                <p>You can manually explore the component structure in the repository.</p>
              </body>
            </html>' > docs/frontend/index.html
          fi
      
      - name: Create documentation hub
        run: |
          mkdir -p doc_hub
          touch doc_hub/.nojekyll
          
          echo '<!DOCTYPE html>
          <html>
            <head>
              <meta charset="utf-8">
              <title>Bulak Smart Connect Documentation Hub</title>
              <style>
                body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
                .card { border: 1px solid #ddd; border-radius: 8px; padding: 16px; margin: 16px 0; }
                .button { display: inline-block; background-color: #4CAF50; color: white; padding: 10px 20px; 
                          text-decoration: none; border-radius: 4px; }
              </style>
            </head>
            <body>
              <h1>Bulak Smart Connect Documentation</h1>
              
              <div class="card">
                <h2>API Documentation</h2>
                <p>Backend API documentation generated with Compodoc.</p>
                <a href="api-docs/" class="button">View API Docs</a>
              </div>
              
              <div class="card">
                <h2>Frontend Documentation</h2>
                <p>Frontend component and service documentation.</p>
                <a href="frontend-docs/" class="button">View Frontend Docs</a>
              </div>
            </body>
          </html>' > doc_hub/index.html
      
      - name: Deploy frontend docs
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: bulak-smart-connect-js/docs/frontend
          target-folder: frontend-docs
          branch: gh-pages
          clean: true
          clean-exclude: |
            .nojekyll
            api-docs/**

      - name: Deploy documentation hub
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: doc_hub
          branch: gh-pages
          clean: false