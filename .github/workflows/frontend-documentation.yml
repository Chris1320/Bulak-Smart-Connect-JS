name: Frontend Documentation

on:
  push:
    branches: [ '*']
    paths:
      - 'bulak-smart-connect-js/src/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-storybook:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'bulak-smart-connect-js/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd bulak-smart-connect-js
          npm ci
          npm install --save-dev @storybook/react @storybook/react-vite @storybook/addon-essentials @storybook/addon-links @storybook/addon-interactions @storybook/blocks @vitejs/plugin-react-swc glob prop-types
      
      - name: Configure Storybook
        run: |
          cd bulak-smart-connect-js
          
          # Create .storybook directory
          mkdir -p .storybook
          
          # Create main.js configuration
          cat > .storybook/main.js << 'EOF'
          /** @type {import('@storybook/react-vite').StorybookConfig} */
          const config = {
            stories: ['../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
            addons: [
              '@storybook/addon-links',
              '@storybook/addon-essentials',
              '@storybook/addon-interactions',
            ],
            framework: {
              name: '@storybook/react-vite',
              options: {},
            },
            docs: {
              autodocs: true,
            },
            core: {
              disableTelemetry: true
            },
            staticDirs: ['../public'],
          };
          
          export default config;
          EOF
          
          # Create preview.js
          cat > .storybook/preview.js << 'EOF'
          import React from 'react';
          import { BrowserRouter } from 'react-router-dom';

          const preview = {
            parameters: {
              actions: { argTypesRegex: "^on[A-Z].*" },
              controls: {
                matchers: {
                  color: /(background|color)$/i,
                  date: /Date$/,
                },
              },
            },
            decorators: [
              (Story) => React.createElement(
                BrowserRouter,
                null,
                React.createElement(Story, null)
              ),
            ],
          };
          
          export default preview;
          EOF

      - name: Create guaranteed stories
        run: |
          cd bulak-smart-connect-js
          
          # Create directory for custom stories
          mkdir -p src/stories
          
          # Create Button component (guaranteed to work)
          cat > src/stories/Button.jsx << 'EOF'
          import React from 'react';
          import PropTypes from 'prop-types';

          /**
           * Basic button component for user interactions
           */
          const Button = ({ primary, backgroundColor, size, label, onClick }) => {
            const mode = primary ? 'primary-button' : 'secondary-button';
            return (
              <button
                type="button"
                className={['button', `button--${size}`, mode].join(' ')}
                style={backgroundColor && { backgroundColor }}
                onClick={onClick}
              >
                {label}
              </button>
            );
          };

          Button.propTypes = {
            primary: PropTypes.bool,
            backgroundColor: PropTypes.string,
            size: PropTypes.oneOf(['small', 'medium', 'large']),
            label: PropTypes.string.isRequired,
            onClick: PropTypes.func,
          };

          Button.defaultProps = {
            primary: false,
            size: 'medium',
            onClick: undefined,
          };

          export default Button;
          EOF

          # Create Button story
          cat > src/stories/Button.stories.jsx << 'EOF'
          import React from 'react';
          import Button from './Button';

          export default {
            title: 'Example/Button',
            component: Button,
            tags: ['autodocs'],
            argTypes: {
              backgroundColor: { control: 'color' },
              onClick: { action: 'clicked' },
            },
          };

          export const Primary = {
            args: {
              primary: true,
              label: 'Button',
            },
          };

          export const Secondary = {
            args: {
              label: 'Button',
            },
          };

          export const Large = {
            args: {
              size: 'large',
              label: 'Button',
            },
          };

          export const Small = {
            args: {
              size: 'small',
              label: 'Button',
            },
          };
          EOF

          # Create a direct story for NavBar component (which exists in the codebase)
          cat > src/NavigationComponents/NavBar.stories.jsx << 'EOF'
          import React from 'react';
          import NavBar from './NavBar';

          export default {
            title: 'Navigation/NavBar',
            component: NavBar,
            parameters: {
              layout: 'fullscreen',
            }
          };

          export const Default = {
            args: {
              isSidebarOpen: false,
              setIsSidebarOpen: () => {},
            }
          };

          export const WithOpenSidebar = {
            args: {
              isSidebarOpen: true,
              setIsSidebarOpen: () => {},
            }
          };
          EOF

          # Create another direct story for LandingPage component
          cat > src/LandingPageComponents/LandingPage.stories.jsx << 'EOF'
          import React from 'react';
          import LandingPage from './LandingPage';

          export default {
            title: 'Pages/LandingPage',
            component: LandingPage,
            parameters: {
              layout: 'fullscreen',
            }
          };

          export const Default = {};
          EOF

          # Create a mock for authentication
          mkdir -p src/__mocks__
          cat > src/__mocks__/authContext.js << 'EOF'
          export const useAuth = () => ({
            isAuthenticated: true,
            user: { 
              name: 'John Doe', 
              email: 'john@example.com', 
              roles: ['admin']
            },
            login: () => Promise.resolve({ success: true }),
            logout: () => {},
            hasRole: () => true,
            isAdmin: true
          });
          EOF

      - name: Validate stories
        run: |
          cd bulak-smart-connect-js
          echo "=== Story files in project ==="
          find src -name "*.stories.*" | sort
          echo "=== Number of story files: $(find src -name "*.stories.*" | wc -l) ==="
          
          # Show sample story content
          SAMPLE=$(find src -name "*.stories.*" | head -n 1)
          if [ -n "$SAMPLE" ]; then
            echo "=== Sample story file content ==="
            cat "$SAMPLE"
          fi

      - name: Build Storybook
        run: |
          cd bulak-smart-connect-js
          npx storybook build --output-dir storybook-static
      
      - name: Add .nojekyll file
        run: |
          cd bulak-smart-connect-js
          touch storybook-static/.nojekyll
      
      - name: Deploy Storybook
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: bulak-smart-connect-js/storybook-static
          target-folder: frontend-docs
          branch: gh-pages
          clean: true
          clean-exclude: |
            .nojekyll
            api-docs/**

      - name: Update documentation hub
        run: |
          mkdir -p doc_hub
          touch doc_hub/.nojekyll
          
          cat > doc_hub/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="utf-8">
              <title>Bulak Smart Connect Documentation Hub</title>
              <style>
                body { 
                  font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
                  max-width: 800px;
                  margin: 0 auto;
                  padding: 20px;
                  line-height: 1.6;
                }
                .header {
                  text-align: center;
                  padding: 20px 0;
                  margin-bottom: 40px;
                  border-bottom: 1px solid #eaeaea;
                }
                .header h1 {
                  color: #184a5b;
                  margin-bottom: 10px;
                }
                .card {
                  border: 1px solid #e0e0e0;
                  border-radius: 8px;
                  padding: 24px;
                  margin-bottom: 24px;
                  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                  transition: transform 0.2s, box-shadow 0.2s;
                }
                .card:hover {
                  transform: translateY(-2px);
                  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                }
                .card h2 {
                  margin-top: 0;
                  color: #184a5b;
                }
                .button {
                  display: inline-block;
                  background-color: #184a5b;
                  color: white;
                  padding: 10px 20px;
                  text-decoration: none;
                  border-radius: 4px;
                  margin-top: 10px;
                  font-weight: 500;
                  transition: background-color 0.2s;
                }
                .button:hover {
                  background-color: #0d3446;
                }
                .footer {
                  text-align: center;
                  color: #666;
                  margin-top: 40px;
                  padding-top: 20px;
                  border-top: 1px solid #eaeaea;
                  font-size: 0.9em;
                }
              </style>
            </head>
            <body>
              <div class="header">
                <h1>Bulak Smart Connect</h1>
                <p>Comprehensive Documentation Hub</p>
              </div>
              
              <div class="card">
                <h2>API Documentation</h2>
                <p>Backend API documentation generated with Compodoc, providing detailed information about endpoints, services, and models.</p>
                <a href="api-docs/" class="button">View API Docs</a>
              </div>
              
              <div class="card">
                <h2>Component Documentation</h2>
                <p>Frontend component documentation built with Storybook, including live examples, props documentation, and usage guides.</p>
                <a href="frontend-docs/" class="button">View Components</a>
              </div>
              
              <div class="footer">
                <p>© $(date +%Y) Bulak Smart Connect</p>
              </div>
            </body>
          </html>
          EOF
          
      - name: Deploy documentation hub
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: doc_hub
          branch: gh-pages
          clean: false