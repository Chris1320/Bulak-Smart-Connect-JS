var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.377,1,2.149]],["body/controllers/AppController.html",[0,2.274,1,3.549,2,1.857,3,0.427,4,0.376,5,0.376,6,3.719,7,0.537,8,1.948,9,5.127,10,1.475,11,0.029,12,0.785,13,4.431,14,1.591,15,1.231,16,0.657,17,0.928,18,3.158,19,3.719,20,0.427,21,0.1,22,2.387,23,2.899,24,1.475,25,4.431,26,0.024,27,0.024]],["title/modules/AppModule.html",[28,1.179,29,2.149]],["body/modules/AppModule.html",[1,3.055,2,1.679,3,0.27,4,0.238,5,0.238,11,0.03,16,0.737,17,0.588,18,3.016,19,2.355,20,0.27,21,0.064,26,0.018,27,0.018,28,1.677,29,4.134,30,1.274,31,1.385,32,1.659,33,1.659,34,1.385,35,2.761,36,1.511,37,2.355,38,2.355,39,2.355,40,3.31,41,3.31,42,3.016,43,3.31,44,2.367,45,1.659,46,1.511,47,2.806,48,2.761,49,4.005,50,3.735,51,1.836,52,1.659,53,1.176,54,2.058,55,2.806,56,2.806,57,2.806,58,2.806,59,2.355,60,2.806,61,2.806,62,2.806,63,2.121,64,2.806,65,1.836,66,2.355,67,0.415,68,2.355,69,2.355,70,2.806,71,2.355,72,2.806,73,2.355,74,2.806,75,1.511,76,2.806,77,2.355,78,2.806,79,1.274,80,2.355,81,2.355,82,3.361,83,4.005,84,3.332,85,1.836,86,2.806,87,4.274,88,2.355,89,2.806,90,1.836,91,2.806,92,2.806,93,2.806,94,2.806,95,2.937,96,2.806,97,2.806,98,2.806,99,1.977,100,4.005,101,3.361,102,4.005,103,2.806,104,2.806,105,2.806]],["title/injectables/AppService.html",[18,1.769,106,0.94]],["body/injectables/AppService.html",[3,0.444,4,0.39,5,0.39,7,0.557,8,1.993,9,5.194,11,0.029,12,0.815,14,1.653,15,1.26,16,0.557,17,0.964,18,2.99,20,0.444,21,0.104,24,1.532,26,0.024,27,0.024,106,1.588,107,2.272,108,3.863,109,4.602,110,4.602,111,4.602]],["title/controllers/AuthController.html",[0,1.377,112,2.149]],["body/controllers/AuthController.html",[0,1.327,2,1.327,3,0.305,4,0.268,5,0.268,7,0.383,8,1.565,10,1.659,11,0.03,12,0.883,14,1.79,16,0.682,17,0.663,20,0.305,21,0.072,22,1.705,24,1.659,26,0.019,27,0.019,67,0.645,90,2.071,99,2.872,112,2.852,113,2.657,114,2.322,115,3.166,116,3.658,117,3.658,118,3.658,119,3.166,120,3.166,121,3.166,122,1.932,123,1.223,124,1.659,125,4.358,126,2.657,127,3.525,128,4.358,129,3.166,130,2.576,131,2.657,132,3.525,133,4.358,134,3.166,135,2.657,136,2.657,137,2.657,138,4.358,139,2.322,140,2.684,141,2.657,142,2.657,143,2.657,144,1.871,145,3.166,146,2.657,147,3.166,148,3.166,149,2.657,150,3.166,151,2.657,152,1.563,153,3.196,154,1.871,155,3.166,156,2.657,157,2.657,158,1.871,159,1.563,160,3.166,161,3.166,162,3.166,163,3.166,164,3.166,165,3.166,166,3.166,167,3.166,168,3.166,169,3.166,170,2.657,171,3.166,172,3.166,173,3.166]],["title/modules/AuthModule.html",[28,1.179,40,1.941]],["body/modules/AuthModule.html",[2,1.848,3,0.31,4,0.273,5,0.273,11,0.03,16,0.758,17,0.675,20,0.31,21,0.073,24,1.072,26,0.019,27,0.019,28,1.806,30,1.463,31,1.589,32,1.904,33,1.904,34,1.589,35,2.973,36,2.708,40,3.766,42,3.151,44,2.607,45,1.904,46,1.734,48,2.607,50,3.688,51,2.107,52,1.904,53,1.35,59,2.703,65,2.107,66,2.703,112,3.29,140,3.431,141,2.703,174,2.703,175,3.22,176,2.703,177,2.703,178,3.766,179,3.22,180,3.22,181,2.362,182,4.41,183,2.107,184,1.072,185,1.734,186,3.22,187,3.22,188,3.22,189,3.22,190,2.362,191,3.22,192,3.22,193,3.22,194,3.22,195,3.22,196,3.22,197,3.22,198,2.703]],["title/injectables/AuthService.html",[106,0.94,140,1.769]],["body/injectables/AuthService.html",[3,0.187,4,0.164,5,0.164,7,0.235,8,1.089,11,0.03,12,0.863,14,1.65,15,0.689,16,0.656,17,0.406,20,0.187,21,0.044,24,1.409,26,0.013,27,0.013,53,0.812,67,0.721,75,2.987,99,2.789,106,0.868,107,0.956,116,2.546,117,2.546,118,2.546,122,1.889,123,1.25,124,1.622,126,2.546,127,3.278,130,2.211,131,2.546,132,2.881,139,1.421,140,1.634,142,1.626,143,1.626,149,1.626,151,1.626,152,2.835,153,3.104,154,2.881,156,1.626,157,3.552,158,2.716,159,2.089,181,1.421,184,1.912,185,1.044,199,1.626,200,3.006,201,3.034,202,3.034,203,1.634,204,1.937,205,2.769,206,5.093,207,2.514,208,1.937,209,2.546,210,1.937,211,1.176,212,1.937,213,0.956,214,1.937,215,1.937,216,3.278,217,1.421,218,1.937,219,1.937,220,3.034,221,1.937,222,2.546,223,1.937,224,1.937,225,1.421,226,0.812,227,2.546,228,1.937,229,1.626,230,3.139,231,3.034,232,1.937,233,3.74,234,1.268,235,1.937,236,1.421,237,3.139,238,1.937,239,1.421,240,1.937,241,3.034,242,1.937,243,2.546,244,1.937,245,1.937,246,1.937,247,3.034,248,3.74,249,1.937,250,1.937,251,1.937,252,2.268,253,1.937,254,4.232,255,1.937,256,3.034,257,1.626,258,1.937,259,1.937,260,1.937,261,4.232,262,1.937,263,1.937,264,1.626,265,1.937,266,1.937,267,1.937,268,1.937,269,3.034,270,1.937,271,3.034,272,3.034,273,1.937,274,2.546,275,2.546,276,1.937,277,1.937,278,2.546,279,3.034,280,1.937,281,1.937,282,1.937,283,1.937]],["title/entities/Counter.html",[284,1.179,285,1.621]],["body/entities/Counter.html",[3,0.311,4,0.274,5,0.274,7,0.391,10,1.887,11,0.03,12,1.005,15,1.003,16,0.535,20,0.426,21,0.073,26,0.019,27,0.019,63,2.287,67,0.866,79,1.466,123,1.392,211,2.099,226,1.353,234,3.542,284,1.159,285,2.18,286,2.368,287,1.47,288,4.226,289,5.035,290,2.111,291,2.977,292,2.454,293,2.709,294,4.417,295,3.201,296,2.368,297,5.414,298,3.707,299,4.417,300,3.228,301,2.112,302,3.228,303,2.977,304,3.228,305,3.352,306,3.228,307,4.158,308,2.709,309,4.758,310,2.89,311,2.368,312,3.228,313,3.707,314,3.239,315,3.228,316,3.707,317,3.707,318,3.228,319,3.228]],["title/classes/CreateQueueDto.html",[21,0.074,320,1.941]],["body/classes/CreateQueueDto.html",[3,0.316,4,0.278,5,0.278,7,0.397,10,2.038,11,0.029,12,1.085,15,1.468,16,0.397,20,0.316,21,0.101,26,0.02,27,0.02,67,0.906,124,2.038,211,1.73,213,2.504,287,1.485,320,2.638,321,1.765,322,5.211,323,2.403,324,3.721,325,3.721,326,3.721,327,3.721,328,3.721,329,3.721,330,3.721,331,4.259,332,3.277,333,5.448,334,3.277,335,3.277,336,3.277,337,3.277,338,3.277,339,3.277,340,4.935,341,3.277,342,5.14,343,5.699,344,2.403]],["title/injectables/JwtAuthGuard.html",[106,0.94,144,1.941]],["body/injectables/JwtAuthGuard.html",[3,0.458,4,0.403,5,0.403,11,0.029,16,0.685,17,0.996,20,0.458,21,0.108,26,0.025,27,0.025,106,1.619,107,2.346,144,3.345,183,3.11,345,3.989,346,3.989,347,4.749,348,5.659,349,4.753]],["title/injectables/JwtStrategy.html",[106,0.94,178,1.941]],["body/injectables/JwtStrategy.html",[3,0.35,4,0.308,5,0.308,7,0.44,8,1.716,11,0.03,12,0.947,14,1.304,16,0.688,17,0.761,20,0.35,21,0.082,22,1.956,24,1.209,26,0.021,27,0.021,50,4.443,51,2.376,67,0.707,95,2.663,99,2.637,106,1.368,107,1.792,122,1.853,123,1.173,124,1.591,130,2.147,139,2.663,152,1.792,158,2.147,159,1.792,178,2.826,183,2.376,190,2.663,203,1.956,213,1.792,216,2.147,252,1.792,257,3.048,274,4.012,347,4.012,350,3.048,351,4.78,352,3.632,353,3.632,354,4.78,355,3.632,356,3.632,357,3.632,358,3.632,359,3.048,360,5.344,361,3.632,362,3.632,363,3.632,364,2.663,365,3.632,366,3.632,367,3.632,368,3.632,369,3.632,370,3.632,371,3.632,372,3.632]],["title/classes/LoginDto.html",[21,0.074,127,1.941]],["body/classes/LoginDto.html",[3,0.448,4,0.394,5,0.394,7,0.563,11,0.028,12,0.99,15,1.41,20,0.448,21,0.105,26,0.025,27,0.025,67,0.826,75,3.225,127,3.303,216,3.54,287,1.859,321,2.505,373,3.904,374,4.652,375,4.652]],["title/entities/Queue.html",[284,1.179,292,1.377]],["body/entities/Queue.html",[3,0.258,4,0.227,5,0.227,7,0.324,10,1.973,11,0.03,12,1.05,15,1.131,16,0.55,20,0.373,21,0.061,26,0.017,27,0.017,63,2.734,67,0.89,79,1.215,123,1.297,211,1.931,226,1.121,284,0.96,285,2.926,287,1.288,290,1.905,291,2.687,292,1.905,293,2.244,295,3.439,301,3.259,303,2.687,305,3.257,308,2.244,309,4.435,310,2.531,311,1.961,313,3.247,376,1.961,377,3.815,378,3.815,379,3.333,380,4.435,381,3.815,382,3.333,383,3.653,384,3.868,385,2.674,386,3.247,387,2.674,388,3.868,389,2.674,390,2.244,391,3.247,392,2.674,393,2.683,394,2.674,395,3.868,396,2.674,397,3.868,398,2.674,399,2.674,400,3.868,401,2.837,402,2.674,403,3.124,404,2.674,405,3.868,406,3.247,407,1.961,408,1.961,409,2.837,410,2.837,411,2.837,412,2.837,413,2.674,414,2.244]],["title/controllers/QueueController.html",[0,1.377,415,2.149]],["body/controllers/QueueController.html",[0,0.849,2,0.849,3,0.195,4,0.172,5,0.172,7,0.245,8,1.127,10,2,11,0.03,12,1.065,14,2.158,15,1.405,16,0.568,17,0.424,20,0.195,21,0.046,22,1.09,23,1.325,24,2,26,0.014,27,0.014,67,0.845,90,2.054,114,1.485,122,2.13,123,1.378,124,1.829,135,3.228,136,2.635,290,2.243,291,1.856,292,0.849,320,2.934,382,2.303,403,2.562,415,2.054,416,1.699,417,2.635,418,2.635,419,2.635,420,2.835,421,2.635,422,2.635,423,4.333,424,2.054,425,4.333,426,4.333,427,3.637,428,2.635,429,2.635,430,3.637,431,2.303,432,2.024,433,3.14,434,3.14,435,2.024,436,1.699,437,3.14,438,2.635,439,2.024,440,2.303,441,1.699,442,2.024,443,2.024,444,1.699,445,3.14,446,2.024,447,1.699,448,3.14,449,2.024,450,3.14,451,2.024,452,1.325,453,2.635,454,2.024,455,3.14,456,2.024,457,3.14,458,2.024,459,3.14,460,2.024,461,2.024,462,3.14,463,2.024,464,2.024,465,3.14,466,2.024,467,3.14,468,2.024,469,1.699,470,3.163,471,3.14,472,2.024,473,2.024,474,1.699,475,2.024,476,1.898,477,1.485,478,1.699,479,2.635,480,1.699,481,1.325,482,2.024,483,2.024,484,2.024,485,2.024,486,2.024,487,2.024,488,2.024,489,2.024,490,2.024,491,2.024,492,1.699,493,2.024,494,2.024,495,2.024,496,2.024,497,2.024,498,2.024,499,2.024,500,2.024,501,2.024,502,2.024,503,2.024,504,2.024,505,2.024,506,2.024]],["title/entities/QueueDetails.html",[284,1.179,393,1.769]],["body/entities/QueueDetails.html",[3,0.231,4,0.203,5,0.203,7,0.29,10,2.006,11,0.03,12,1.068,15,1.396,16,0.516,20,0.231,21,0.054,26,0.016,27,0.016,63,2.617,67,0.891,79,1.088,85,2.334,123,1.44,184,1.826,185,1.29,211,2.054,213,2.105,226,1.004,234,2.334,284,0.86,287,1.188,290,1.787,292,2.416,295,3.407,296,1.756,298,3.965,301,3.69,303,2.521,305,3.468,314,3.127,324,3.127,325,3.127,326,3.127,327,3.127,328,3.127,329,3.127,330,3.127,393,1.922,507,5.113,508,2.01,509,3.127,510,2.01,511,2.395,512,3.568,513,2.395,514,3.568,515,2.395,516,2.395,517,3.568,518,2.395,519,3.568,520,2.395,521,3.568,522,2.395,523,2.994,524,3.568,525,4.725,526,2.395,527,4.725,528,3.568,529,2.395,530,2.395,531,3.568,532,2.395,533,3.965,534,3.568,535,2.395,536,2.395,537,3.578,538,2.395,539,2.395,540,2.395]],["title/classes/QueueGateway.html",[21,0.074,541,1.769]],["body/classes/QueueGateway.html",[3,0.211,4,0.185,5,0.185,7,0.265,8,1.196,10,1.502,11,0.03,12,1.016,14,1.911,16,0.546,17,0.458,20,0.211,21,0.05,23,2.953,24,1.343,26,0.015,27,0.015,63,0.993,65,1.431,67,0.831,84,1.431,85,1.431,90,3.589,99,2.526,122,2.127,123,1.347,124,1.826,130,1.97,152,1.644,154,1.97,159,1.644,200,2.953,203,1.794,211,2.364,217,1.604,264,2.796,285,1.079,287,1.109,292,0.917,310,1.431,321,1.178,431,2.443,440,3.31,476,2.627,477,1.604,509,3.903,541,1.794,542,1.835,543,2.796,544,4.036,545,4.036,546,4.513,547,4.295,548,3.332,549,3.332,550,3.332,551,3.332,552,3.332,553,3.332,554,3.332,555,2.187,556,3.332,557,1.604,558,3.332,559,2.187,560,4.036,561,3.332,562,6.147,563,2.187,564,4.857,565,4.513,566,3.332,567,2.187,568,3.332,569,3.332,570,2.187,571,3.332,572,3.332,573,2.187,574,3.332,575,3.332,576,2.187,577,3.332,578,2.187,579,3.332,580,2.187,581,3.332,582,2.187,583,1.835,584,1.835,585,1.604,586,2.187,587,2.187,588,2.187,589,2.187,590,1.835,591,3.332,592,2.187,593,3.332,594,2.187,595,2.187,596,3.332,597,2.187,598,2.796,599,2.187,600,2.187,601,2.187,602,1.835,603,1.835,604,1.835,605,2.187,606,2.187,607,2.187,608,3.332,609,2.187,610,2.187]],["title/modules/QueueModule.html",[28,1.179,41,1.941]],["body/modules/QueueModule.html",[2,2.011,3,0.352,4,0.309,5,0.309,11,0.03,16,0.76,17,0.765,20,0.352,21,0.083,26,0.021,27,0.021,28,1.924,30,1.659,31,1.802,32,2.159,33,2.159,34,1.802,35,3.168,36,2.886,41,3.709,44,2.836,45,2.159,46,1.967,48,2.159,52,2.159,53,1.531,285,2.368,292,1.531,393,2.584,407,2.678,408,2.678,415,3.506,476,3.207,477,2.678,481,2.389,541,3.379,585,2.678,611,3.065,612,3.065,613,3.065,614,3.652,615,3.652,616,3.065,617,3.065,618,3.652]],["title/injectables/QueueService.html",[106,0.94,476,1.621]],["body/injectables/QueueService.html",[3,0.101,4,0.089,5,0.089,7,0.127,8,0.655,11,0.03,12,0.863,14,1.706,15,0.817,16,0.52,17,0.22,20,0.101,21,0.024,24,1.69,26,0.008,27,0.008,53,0.44,65,0.687,67,0.66,85,0.687,99,2.982,106,0.522,107,0.518,122,1.731,123,1.166,124,1.486,130,2.809,152,2.853,153,2.405,154,3.394,158,1.711,159,2.119,184,0.349,200,1.894,203,0.983,205,2.921,211,2.089,213,0.518,225,0.77,226,0.44,234,1.194,236,1.776,239,2.123,275,0.881,278,0.881,285,2.119,288,1.532,290,1.621,291,2.639,292,2.478,307,0.77,320,1.939,324,0.77,325,0.77,326,0.77,327,0.77,328,0.77,329,0.77,330,0.77,377,1.532,379,2.638,380,3.436,381,0.881,382,2.405,383,2.405,386,2.033,393,1.304,403,1.711,407,0.77,408,0.77,409,2.123,410,0.77,411,1.776,412,0.77,414,2.752,417,1.532,418,1.532,419,2.43,420,1.894,421,1.532,422,1.532,424,1.194,427,2.43,428,1.532,429,1.532,430,2.43,431,2.405,436,1.532,438,2.033,440,2.123,441,1.532,444,1.532,447,1.532,452,1.194,469,1.532,470,2.285,476,0.901,478,0.881,479,1.532,480,0.881,481,0.687,509,2.835,541,2.205,585,0.77,590,0.881,598,3.244,603,2.033,604,0.881,616,0.881,617,0.881,619,0.881,620,1.05,621,2.422,622,2.422,623,1.05,624,1.825,625,1.825,626,1.05,627,1.05,628,1.05,629,1.05,630,1.05,631,1.05,632,1.05,633,1.05,634,1.825,635,1.05,636,1.825,637,1.05,638,1.05,639,1.05,640,0.881,641,1.05,642,1.05,643,1.05,644,1.05,645,1.05,646,0.881,647,2.422,648,1.825,649,1.825,650,1.05,651,1.05,652,1.05,653,3.602,654,1.825,655,2.422,656,2.422,657,1.05,658,1.05,659,1.05,660,1.05,661,1.825,662,3.866,663,1.05,664,1.05,665,1.825,666,1.05,667,1.05,668,1.05,669,1.05,670,1.825,671,0.881,672,0.881,673,1.05,674,1.825,675,1.05,676,1.05,677,2.422,678,1.825,679,1.05,680,1.825,681,1.05,682,1.05,683,1.05,684,1.05,685,1.05,686,1.05,687,1.05,688,1.05,689,1.05,690,1.05,691,2.895,692,1.05,693,2.895,694,2.422,695,2.422,696,2.422,697,2.422,698,1.825,699,1.825,700,1.825,701,1.05,702,1.05,703,1.05,704,2.422,705,1.825,706,1.05,707,1.532,708,2.895,709,1.05,710,1.825,711,1.05,712,2.422,713,1.05,714,1.05,715,1.825,716,1.05,717,1.05,718,1.05,719,1.05,720,1.05,721,1.05,722,1.05,723,1.05,724,0.881,725,1.05,726,1.05,727,1.05,728,1.05,729,1.05,730,1.05,731,1.05,732,0.881,733,3.279,734,1.825,735,2.422,736,1.825,737,0.881,738,1.05,739,1.05,740,1.825,741,1.05,742,1.825,743,1.05,744,1.825,745,1.05,746,1.825,747,1.05,748,1.05,749,1.05,750,1.05,751,1.05,752,1.05,753,1.05,754,1.05,755,1.825,756,1.825,757,1.825,758,1.825,759,1.825,760,1.05,761,1.05,762,1.05,763,1.05,764,1.05,765,1.05,766,1.05,767,1.05,768,2.422,769,1.825,770,1.05,771,1.05,772,1.825,773,1.05,774,1.05,775,1.05,776,1.05,777,1.05,778,1.05,779,1.05,780,1.05,781,1.05]],["title/classes/RegisterDto.html",[21,0.074,132,1.941]],["body/classes/RegisterDto.html",[3,0.435,4,0.382,5,0.382,7,0.546,11,0.029,12,1.047,15,1.453,20,0.435,21,0.102,26,0.024,27,0.024,67,0.874,75,3.181,123,1.45,132,3.24,216,3.492,287,1.824,321,2.428,782,3.783,783,4.507,784,4.507,785,4.507]],["title/entities/Role.html",[284,1.179,786,1.769]],["body/entities/Role.html",[3,0.361,4,0.317,5,0.317,7,0.454,10,1.913,11,0.03,12,1.018,15,1.304,16,0.591,20,0.361,21,0.085,26,0.021,27,0.021,63,2.61,67,0.85,79,1.701,95,3.578,123,1.332,184,2.033,185,2.018,211,1.891,226,1.57,284,1.345,287,1.624,290,2.274,295,3.207,303,3.207,305,3.207,401,2.747,510,3.144,786,2.627,787,3.144,788,3.979,789,5.425,790,3.746,791,3.746,792,3.144,793,3.746,794,3.746,795,4.094,796,3.746,797,4.094,798,3.746]],["title/controllers/RolesController.html",[0,1.377,799,2.149]],["body/controllers/RolesController.html",[0,1.454,2,1.454,3,0.334,4,0.294,5,0.294,7,0.42,8,1.665,10,1.738,11,0.03,12,0.925,14,1.875,15,1.357,16,0.704,17,0.726,20,0.334,21,0.079,22,1.868,23,2.269,24,1.738,26,0.02,27,0.02,67,0.686,114,2.543,122,1.797,123,1.138,124,1.543,137,2.91,144,2.05,146,2.91,170,2.91,207,2.578,213,2.288,252,2.288,290,1.943,420,3.648,424,3.034,452,2.269,453,2.91,474,2.91,492,2.91,799,3.034,800,2.91,801,3.891,802,3.468,803,5.979,804,3.468,805,3.468,806,3.468,807,2.91,808,3.468,809,3.468,810,2.91,811,3.468,812,3.034,813,3.468,814,3.468,815,3.468,816,5.223,817,3.468,818,3.468,819,3.468,820,3.468,821,3.468]],["title/guards/RolesGuard.html",[812,2.149,822,2.409]],["body/guards/RolesGuard.html",[3,0.367,4,0.323,5,0.323,7,0.462,8,1.771,11,0.03,12,0.874,14,1.369,16,0.662,17,0.798,20,0.367,21,0.086,22,2.053,24,1.642,26,0.022,27,0.022,63,1.731,67,0.73,106,1.412,122,1.913,123,1.211,124,1.642,152,2.435,184,1.269,203,2.053,217,3.618,543,3.199,812,3.228,823,3.811,824,3.199,825,5.785,826,3.811,827,6.138,828,3.811,829,4.933,830,5.785,831,3.811,832,3.811,833,3.199,834,3.618,835,3.811,836,4.933,837,3.811,838,3.811,839,3.811,840,3.811,841,3.811,842,3.811]],["title/modules/RolesModule.html",[28,1.179,42,1.769]],["body/modules/RolesModule.html",[2,2.104,3,0.377,4,0.332,5,0.332,11,0.029,16,0.749,17,0.82,20,0.377,21,0.089,26,0.022,27,0.022,28,1.989,30,1.778,31,1.932,32,2.314,33,2.314,34,1.932,35,3.275,36,2.984,42,3.385,44,2.967,45,2.314,46,2.108,48,2.314,52,2.314,53,1.641,184,1.67,185,2.108,207,3.239,786,2.108,799,3.625,810,3.285,843,3.285,844,3.285,845,3.285,846,3.914,847,3.285,848,3.914,849,3.914]],["title/injectables/RolesService.html",[106,0.94,207,1.621]],["body/injectables/RolesService.html",[3,0.237,4,0.208,5,0.208,7,0.297,8,1.304,11,0.03,12,0.947,14,1.833,15,0.982,16,0.618,17,0.514,20,0.237,21,0.056,24,1.591,26,0.016,27,0.016,53,1.028,67,0.755,99,3.072,106,1.039,107,1.211,122,1.979,123,1.424,124,1.699,152,2.519,154,3.159,158,2.557,159,2.135,184,1.841,185,1.321,200,2.377,203,1.956,205,3.619,207,1.793,209,3.63,211,2.349,213,2.36,222,4.952,225,1.799,226,1.028,229,2.059,230,3.048,236,2.664,239,3.172,252,2.638,290,2.24,420,3.128,424,2.377,452,2.377,640,2.059,732,3.048,786,2.979,795,3.048,801,3.048,807,3.048,847,2.059,850,2.059,851,3.632,852,3.632,853,2.453,854,2.453,855,3.632,856,3.632,857,4.325,858,2.453,859,2.453,860,3.632,861,2.453,862,2.453,863,2.453,864,2.453,865,2.453,866,3.632,867,3.632,868,2.453,869,2.453,870,2.453,871,2.453]],["title/classes/UpdateQueueDto.html",[21,0.074,470,1.941]],["body/classes/UpdateQueueDto.html",[3,0.405,4,0.356,5,0.356,7,0.509,10,1.747,11,0.029,12,0.93,15,1.192,16,0.636,20,0.405,21,0.119,26,0.023,27,0.023,67,0.776,124,1.996,287,1.747,291,3.385,321,2.264,323,3.083,331,3.528,340,4.805,342,4.406,344,3.083,378,4.805,403,3.385,470,3.104,481,2.75,872,4.805,873,4.203,874,4.203,875,4.203,876,4.203,877,4.203]],["title/entities/User.html",[184,1.093,284,1.179]],["body/entities/User.html",[3,0.287,4,0.252,5,0.252,7,0.361,10,1.992,11,0.03,12,1.06,15,1.296,16,0.506,20,0.287,21,0.067,26,0.018,27,0.018,63,2.501,67,0.885,75,2.599,79,1.353,123,1.493,184,1.39,211,2.028,216,2.852,226,1.249,237,4.049,252,2.381,284,1.069,287,1.39,290,2.309,295,3.092,296,2.184,301,1.949,303,2.852,305,3.466,311,3.064,314,3.836,379,3.538,383,3.064,390,2.5,391,3.506,401,2.184,406,3.506,523,2.5,533,2.5,537,3.506,786,3.158,792,2.5,797,3.506,878,2.5,879,4.825,880,2.978,881,5.23,882,2.978,883,2.978,884,2.978,885,2.978,886,2.978,887,2.978,888,2.978,889,4.177,890,4.177,891,2.978,892,4.177,893,2.978,894,2.978,895,4.177,896,2.978]],["title/modules/UsersModule.html",[28,1.179,43,1.941]],["body/modules/UsersModule.html",[3,0.45,4,0.396,5,0.396,11,0.029,16,0.726,17,0.978,20,0.45,21,0.106,26,0.025,27,0.025,28,2.01,30,2.12,36,2.514,43,3.31,48,2.76,52,3.31,53,1.957,184,1.554,198,3.918,897,4.668,898,4.668]],["title/coverage.html",[899,3.278]],["body/coverage.html",[0,2.239,1,2.047,5,0.265,6,2.625,11,0.029,18,1.685,21,0.127,26,0.019,27,0.019,34,1.544,54,2.294,67,0.463,106,1.659,108,2.625,112,2.047,113,2.625,127,1.849,132,1.849,140,1.685,144,1.849,159,1.544,178,1.849,184,1.041,199,2.625,207,1.544,252,1.544,284,2.013,285,1.544,286,2.294,292,1.311,320,1.849,322,2.625,323,3.17,345,2.625,346,2.625,350,2.625,373,2.625,376,2.294,393,1.685,415,2.047,416,2.625,470,1.849,476,1.544,507,2.625,508,2.625,541,1.685,542,2.625,619,2.625,653,5.602,782,2.625,786,1.685,787,2.625,799,2.047,800,2.625,812,2.047,822,2.294,824,2.625,834,2.294,850,2.625,872,2.625,878,2.625,899,2.294,900,2.625,901,3.128,902,3.128,903,4.322,904,4.952,905,4.322,906,3.627,907,4.952,908,6.286,909,5.342,910,2.625,911,3.627,912,4.322,913,2.625,914,3.128,915,3.128,916,3.128,917,3.128,918,3.128,919,3.128]],["title/dependencies.html",[31,1.948,920,2.307]],["body/dependencies.html",[11,0.03,17,0.878,21,0.095,26,0.023,27,0.023,31,2.068,51,2.741,53,1.756,181,3.073,183,2.741,190,3.073,226,1.756,227,3.516,344,3.073,359,4.397,583,3.516,584,4.397,833,3.516,921,6.167,922,4.19,923,5.24,924,4.19,925,5.24,926,4.19,927,4.19,928,4.19,929,4.19,930,4.19,931,4.19,932,4.19,933,4.19,934,4.19,935,4.19,936,4.19,937,4.19,938,4.19,939,4.19,940,4.19,941,4.19]],["title/miscellaneous/enumerations.html",[942,1.481,943,3.312]],["body/miscellaneous/enumerations.html",[7,0.557,11,0.029,26,0.024,27,0.024,286,3.375,307,4.071,316,4.659,317,4.659,376,3.375,403,3.282,409,4.071,410,4.071,411,4.071,412,4.071,557,4.719,942,2.479,943,3.863,944,4.602,945,4.602]],["title/miscellaneous/functions.html",[942,1.481,946,3.312]],["body/miscellaneous/functions.html",[7,0.588,11,0.027,26,0.025,27,0.025,34,3.01,67,0.719,122,1.884,123,1.193,124,1.617,911,4.078,913,4.812,942,2.617,946,4.078,947,5.733,948,4.859,949,6.099]],["title/index.html",[7,0.333,950,2.749,951,2.749]],["body/index.html",[4,0.227,11,0.028,26,0.017,27,0.017,46,2.967,84,2.531,87,2.244,205,1.75,243,4.624,547,2.244,602,2.244,646,2.244,672,2.244,707,3.815,724,2.244,737,4.18,788,1.961,899,1.961,900,3.247,952,2.674,953,2.674,954,4.545,955,3.868,956,2.674,957,2.674,958,2.674,959,3.868,960,4.545,961,2.674,962,2.674,963,4.981,964,2.674,965,4.981,966,5.818,967,2.674,968,5.681,969,2.674,970,2.674,971,3.868,972,2.674,973,2.674,974,4.545,975,2.674,976,3.868,977,2.674,978,2.674,979,2.674,980,2.674,981,2.674,982,4.981,983,5.818,984,5.509,985,2.674,986,3.868,987,2.674,988,2.674,989,2.674,990,2.674,991,2.674,992,3.868,993,2.674,994,3.868,995,2.674,996,3.868,997,5.509,998,4.981,999,2.674,1000,3.868,1001,2.674,1002,2.674,1003,2.674,1004,2.674,1005,4.981,1006,2.674,1007,2.674,1008,2.674,1009,3.868,1010,2.674,1011,2.674,1012,2.674,1013,2.674,1014,2.674,1015,3.868,1016,2.674,1017,2.674,1018,2.674,1019,3.868,1020,2.674,1021,2.674,1022,4.18,1023,3.868,1024,2.674,1025,2.674,1026,2.674,1027,2.674,1028,2.674,1029,2.674,1030,2.674,1031,2.674,1032,3.868,1033,2.674,1034,2.244,1035,2.674,1036,2.674,1037,2.674,1038,2.674,1039,2.674,1040,2.674,1041,2.674,1042,3.868,1043,2.674,1044,2.674,1045,2.674,1046,2.674,1047,3.868,1048,2.674,1049,2.674,1050,2.674,1051,3.868,1052,3.868,1053,2.674,1054,2.674,1055,2.674,1056,2.674,1057,2.674,1058,2.674,1059,2.674,1060,2.674,1061,2.674,1062,2.674,1063,2.674,1064,2.244,1065,2.674,1066,2.674,1067,2.674,1068,2.674,1069,2.674,1070,2.674,1071,2.244]],["title/modules.html",[30,2.03]],["body/modules.html",[11,0.025,26,0.025,27,0.025,29,3.121,30,2.167,40,2.82,41,2.82,42,2.569,43,2.82,1022,5.256,1034,4.004,1072,6.263,1073,6.263,1074,6.396,1075,4.77]],["title/overview.html",[1076,3.751]],["body/overview.html",[2,1.461,11,0.029,18,2.82,26,0.02,27,0.02,28,1.252,29,4.221,30,1.583,31,1.721,32,2.061,33,2.061,34,1.721,35,2.061,36,1.878,37,2.926,38,2.926,39,2.926,40,3.787,41,3.614,42,3.293,43,3.096,44,2.751,45,2.061,46,1.878,79,1.583,107,1.721,140,3.293,174,2.926,176,2.926,177,2.926,178,3.614,207,3.018,321,1.878,476,3.018,541,3.009,611,2.926,612,2.926,613,2.926,671,2.926,822,2.557,843,2.926,844,2.926,845,2.926,1076,2.926,1077,5.237,1078,3.486,1079,3.486]],["title/properties.html",[287,1.313,920,2.307]],["body/properties.html",[11,0.029,26,0.026,27,0.026,287,1.673,788,3.687,1064,4.219,1071,4.219,1080,5.027,1081,5.027,1082,5.027]],["title/miscellaneous/variables.html",[364,2.894,942,1.481]],["body/miscellaneous/variables.html",[7,0.495,11,0.03,15,1.17,26,0.023,27,0.023,54,3.782,67,0.836,68,3.428,69,3.428,71,3.428,73,3.428,75,2.2,77,3.428,79,1.855,80,3.428,81,3.428,82,3.428,84,3.374,88,3.428,101,4.328,252,3.021,310,3.698,364,2.996,557,4.145,834,3.782,906,3.428,910,3.428,942,2.2,1083,4.085,1084,5.157,1085,4.085,1086,4.085,1087,4.085,1088,4.085,1089,4.085,1090,4.085,1091,4.085,1092,4.085,1093,4.085,1094,4.085,1095,4.085]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":653,"title":{},"body":{"injectables/QueueService.html":{},"coverage.html":{}}}],["0')}${string(today.getdate()).padstart(2",{"_index":652,"title":{},"body":{"injectables/QueueService.html":{}}}],["0.0.1",{"_index":1081,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":928,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":937,"title":{},"body":{"dependencies.html":{}}}],["0.3.22",{"_index":941,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":908,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":916,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":917,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":915,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":903,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":909,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":904,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":905,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":914,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":671,"title":{},"body":{"injectables/QueueService.html":{},"overview.html":{}}}],["1).padstart(2",{"_index":651,"title":{},"body":{"injectables/QueueService.html":{}}}],["1).padstart(4",{"_index":667,"title":{},"body":{"injectables/QueueService.html":{}}}],["11.0.0",{"_index":923,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":924,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":921,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":670,"title":{},"body":{"injectables/QueueService.html":{}}}],["16.5.0",{"_index":930,"title":{},"body":{"dependencies.html":{}}}],["1d",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{}}}],["3.14.1",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["3306",{"_index":1089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":1078,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":922,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":940,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1077,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":927,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":1079,"title":{},"body":{"overview.html":{}}}],["60000",{"_index":776,"title":{},"body":{"injectables/QueueService.html":{}}}],["7.8.2",{"_index":939,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["__dirname",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["access_token",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":693,"title":{},"body":{"injectables/QueueService.html":{}}}],["active",{"_index":316,"title":{},"body":{"entities/Counter.html":{},"miscellaneous/enumerations.html":{}}}],["add",{"_index":778,"title":{},"body":{"injectables/QueueService.html":{}}}],["addcounter",{"_index":417,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["addcounter(@body",{"_index":504,"title":{},"body":{"controllers/QueueController.html":{}}}],["addcounter(data",{"_index":432,"title":{},"body":{"controllers/QueueController.html":{}}}],["addcounter(name",{"_index":625,"title":{},"body":{"injectables/QueueService.html":{}}}],["address",{"_index":324,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["afterconnect",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["ahead",{"_index":718,"title":{},"body":{"injectables/QueueService.html":{}}}],["allowing",{"_index":1010,"title":{},"body":{"index.html":{}}}],["already",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":1057,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":984,"title":{},"body":{"index.html":{}}}],["applications",{"_index":959,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appointment_type",{"_index":512,"title":{},"body":{"entities/QueueDetails.html":{}}}],["appointmenttype",{"_index":325,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["asc",{"_index":696,"title":{},"body":{"injectables/QueueService.html":{}}}],["assign",{"_index":870,"title":{},"body":{"injectables/RolesService.html":{}}}],["assignrolestouser",{"_index":851,"title":{},"body":{"injectables/RolesService.html":{}}}],["assignrolestouser(userid",{"_index":856,"title":{},"body":{"injectables/RolesService.html":{}}}],["associated",{"_index":745,"title":{},"body":{"injectables/QueueService.html":{}}}],["async",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["attempt",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RolesController.html":{}}}],["auth.guard.ts",{"_index":346,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/roles.decorator",{"_index":814,"title":{},"body":{"controllers/RolesController.html":{}}}],["auth/guards/jwt",{"_index":811,"title":{},"body":{"controllers/RolesController.html":{}}}],["auth/guards/roles.guard",{"_index":813,"title":{},"body":{"controllers/RolesController.html":{}}}],["authcontroller",{"_index":112,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":349,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":348,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1064,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":140,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":1075,"title":{},"body":{"modules.html":{}}}],["average",{"_index":763,"title":{},"body":{"injectables/QueueService.html":{}}}],["averagewaittime",{"_index":768,"title":{},"body":{"injectables/QueueService.html":{}}}],["await",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["aws",{"_index":1000,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1058,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('invalid",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["based",{"_index":646,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["bcrypt",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(logindto.password",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["beforeconnect",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["below",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["board",{"_index":1050,"title":{},"body":{"index.html":{}}}],["body",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{}}}],["boolean",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":722,"title":{},"body":{"injectables/QueueService.html":{}}}],["browse",{"_index":1074,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1072,"title":{},"body":{"modules.html":{}}}],["building",{"_index":955,"title":{},"body":{"index.html":{}}}],["bulak_smart_connect",{"_index":1094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calculate",{"_index":762,"title":{},"body":{"injectables/QueueService.html":{}}}],["called",{"_index":746,"title":{},"body":{"injectables/QueueService.html":{}}}],["callnext",{"_index":418,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["callnext(@param('counterid",{"_index":502,"title":{},"body":{"controllers/QueueController.html":{}}}],["callnext(counterid",{"_index":436,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["canactivate",{"_index":825,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":829,"title":{},"body":{"guards/RolesGuard.html":{}}}],["cancelled",{"_index":412,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["cancelledcount",{"_index":758,"title":{},"body":{"injectables/QueueService.html":{}}}],["cascade",{"_index":540,"title":{},"body":{"entities/QueueDetails.html":{}}}],["cascade'})@joincolumn({name",{"_index":526,"title":{},"body":{"entities/QueueDetails.html":{}}}],["catch",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["channel",{"_index":1025,"title":{},"body":{"index.html":{}}}],["check",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["citizen",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":21,"title":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":321,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{},"overview.html":{}}}],["clicks",{"_index":1009,"title":{},"body":{"index.html":{}}}],["client",{"_index":564,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.id",{"_index":593,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`counter_${counterid",{"_index":600,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`queue_${queueid",{"_index":595,"title":{},"body":{"classes/QueueGateway.html":{}}}],["clients",{"_index":603,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["cloud",{"_index":995,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_queuemodule",{"_index":611,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_exports",{"_index":612,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_providers",{"_index":613,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":843,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":844,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":845,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["code",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":305,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["column({name",{"_index":301,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["column({nullable",{"_index":510,"title":{},"body":{"entities/QueueDetails.html":{},"entities/Role.html":{}}}],["column({type",{"_index":308,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["column({unique",{"_index":792,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["come",{"_index":1016,"title":{},"body":{"index.html":{}}}],["completed",{"_index":411,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["completed_at",{"_index":384,"title":{},"body":{"entities/Queue.html":{}}}],["completedat",{"_index":377,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["completedcount",{"_index":757,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues",{"_index":765,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.length",{"_index":769,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.reduce((total",{"_index":771,"title":{},"body":{"injectables/QueueService.html":{}}}],["completion",{"_index":706,"title":{},"body":{"injectables/QueueService.html":{}}}],["config",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.get('jwt_secret",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{}}}],["config/database.config",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('db_host",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_name",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_secret",{"_index":361,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('node_env",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('email",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["connected",{"_index":592,"title":{},"body":{"classes/QueueGateway.html":{}}}],["connection",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["connection.query('set",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error('login",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('comparing",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('generated",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('login",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["console.log('password",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('register",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('stored",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('user",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["constructor",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["constructor(configservice",{"_index":352,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{}}}],["constructor(queuerepository",{"_index":620,"title":{},"body":{"injectables/QueueService.html":{}}}],["constructor(queueservice",{"_index":555,"title":{},"body":{"classes/QueueGateway.html":{}}}],["constructor(reflector",{"_index":826,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(rolesrepository",{"_index":853,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(usersrepository",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":832,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":839,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":838,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":840,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/RolesController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/RolesController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('queue",{"_index":482,"title":{},"body":{"controllers/QueueController.html":{}}}],["controller('roles",{"_index":815,"title":{},"body":{"controllers/RolesController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/QueueController.html":{},"modules/QueueModule.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["convert",{"_index":777,"title":{},"body":{"injectables/QueueService.html":{}}}],["cors",{"_index":586,"title":{},"body":{"classes/QueueGateway.html":{}}}],["count",{"_index":654,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter",{"_index":285,"title":{"entities/Counter.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["counter.currentqueue",{"_index":386,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["counter.currentqueue.completedat",{"_index":730,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueue.status",{"_index":729,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueueid",{"_index":734,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.id",{"_index":752,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.name",{"_index":742,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter/entities/counter.entity",{"_index":408,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["counter_number",{"_index":388,"title":{},"body":{"entities/Queue.html":{}}}],["counterid",{"_index":440,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["countername",{"_index":751,"title":{},"body":{"injectables/QueueService.html":{}}}],["counternumber",{"_index":378,"title":{},"body":{"entities/Queue.html":{},"classes/UpdateQueueDto.html":{}}}],["counterrepository",{"_index":622,"title":{},"body":{"injectables/QueueService.html":{}}}],["counters",{"_index":780,"title":{},"body":{"injectables/QueueService.html":{}}}],["counterstatus",{"_index":307,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["counterstatus.active",{"_index":319,"title":{},"body":{"entities/Counter.html":{}}}],["courses",{"_index":1031,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":899,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":419,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["create(@body",{"_index":483,"title":{},"body":{"controllers/QueueController.html":{}}}],["create(createqueuedto",{"_index":441,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["created",{"_index":656,"title":{},"body":{"injectables/QueueService.html":{}}}],["created_at",{"_index":391,"title":{},"body":{"entities/Queue.html":{},"entities/User.html":{}}}],["createdat",{"_index":379,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"entities/User.html":{}}}],["createdatecolumn",{"_index":406,"title":{},"body":{"entities/Queue.html":{},"entities/User.html":{}}}],["createdatecolumn({name",{"_index":390,"title":{},"body":{"entities/Queue.html":{},"entities/User.html":{}}}],["createqueuedto",{"_index":320,"title":{"classes/CreateQueueDto.html":{}},"body":{"classes/CreateQueueDto.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["createqueuedto.address",{"_index":685,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.appointmenttype",{"_index":688,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.firstname",{"_index":682,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.lastname",{"_index":683,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.middleinitial",{"_index":684,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.phonenumber",{"_index":686,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.reasonofvisit",{"_index":687,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.userid",{"_index":681,"title":{},"body":{"injectables/QueueService.html":{}}}],["credentials",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["current",{"_index":728,"title":{},"body":{"injectables/QueueService.html":{}}}],["current_queue_id",{"_index":297,"title":{},"body":{"entities/Counter.html":{}}}],["currentqueue",{"_index":288,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{}}}],["currentqueueid",{"_index":289,"title":{},"body":{"entities/Counter.html":{}}}],["data",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{}}}],["database",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":949,"title":{},"body":{"miscellaneous/functions.html":{}}}],["date",{"_index":383,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"entities/User.html":{}}}],["date(today",{"_index":659,"title":{},"body":{"injectables/QueueService.html":{}}}],["datestr",{"_index":649,"title":{},"body":{"injectables/QueueService.html":{}}}],["debug",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["debugging",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{}}}],["decorators/roles.decorator",{"_index":835,"title":{},"body":{"guards/RolesGuard.html":{}}}],["deeper",{"_index":1027,"title":{},"body":{"index.html":{}}}],["default",{"_index":310,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"classes/QueueGateway.html":{},"miscellaneous/variables.html":{}}}],["default_role_id",{"_index":881,"title":{},"body":{"entities/User.html":{}}}],["defaultrole",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["defaultroleid",{"_index":879,"title":{},"body":{"entities/User.html":{}}}],["defaultstrategy",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{}}}],["delete",{"_index":475,"title":{},"body":{"controllers/QueueController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":982,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":999,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":992,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1008,"title":{},"body":{"index.html":{}}}],["description",{"_index":788,"title":{},"body":{"entities/Role.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":380,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["details.entity",{"_index":407,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["details.entity.ts",{"_index":508,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["details.entity.ts:11",{"_index":530,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:15",{"_index":529,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:18",{"_index":536,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:22",{"_index":535,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:25",{"_index":515,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:28",{"_index":518,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:31",{"_index":520,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:34",{"_index":511,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:37",{"_index":522,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:40",{"_index":532,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:43",{"_index":513,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:8",{"_index":516,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.queue",{"_index":395,"title":{},"body":{"entities/Queue.html":{}}}],["determine",{"_index":657,"title":{},"body":{"injectables/QueueService.html":{}}}],["development",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["devtools",{"_index":1037,"title":{},"body":{"index.html":{}}}],["disconnected",{"_index":594,"title":{},"body":{"classes/QueueGateway.html":{}}}],["discord",{"_index":1024,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1026,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":900,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dotenv",{"_index":929,"title":{},"body":{"dependencies.html":{}}}],["dropschema",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["dto/create",{"_index":478,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["dto/login.dto",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/register.dto",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":480,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["e2e",{"_index":977,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":956,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":990,"title":{},"body":{"index.html":{}}}],["email",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["endpoint",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["ensure",{"_index":988,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1041,"title":{},"body":{"index.html":{}}}],["entities",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/queue",{"_index":617,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["entities/queue.entity",{"_index":481,"title":{},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{}}}],["entities/role.entity",{"_index":847,"title":{},"body":{"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["entities/user.entity",{"_index":898,"title":{},"body":{"modules/UsersModule.html":{}}}],["entity",{"_index":284,"title":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('counters",{"_index":318,"title":{},"body":{"entities/Counter.html":{}}}],["entity('queue_details",{"_index":539,"title":{},"body":{"entities/QueueDetails.html":{}}}],["entity('queues",{"_index":413,"title":{},"body":{"entities/Queue.html":{}}}],["entity('roles",{"_index":798,"title":{},"body":{"entities/Role.html":{}}}],["entity('users",{"_index":894,"title":{},"body":{"entities/User.html":{}}}],["entity{.ts,.js",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":309,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["enumerations",{"_index":943,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":363,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["environments",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["error('jwt_secret",{"_index":362,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["error('user",{"_index":868,"title":{},"body":{"injectables/RolesService.html":{}}}],["estimated_wait_time",{"_index":397,"title":{},"body":{"entities/Queue.html":{}}}],["estimatedwaittime",{"_index":381,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["estimation",{"_index":673,"title":{},"body":{"injectables/QueueService.html":{}}}],["example",{"_index":965,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":830,"title":{},"body":{"guards/RolesGuard.html":{}}}],["existinguser",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["experience",{"_index":1029,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":926,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":347,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":357,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":367,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failed",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["false",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"entities/Role.html":{}}}],["fast",{"_index":1003,"title":{},"body":{"index.html":{}}}],["features",{"_index":1012,"title":{},"body":{"index.html":{}}}],["few",{"_index":1005,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["find",{"_index":732,"title":{},"body":{"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["findall",{"_index":420,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findbyname",{"_index":852,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname(name",{"_index":860,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyqueuenumber",{"_index":421,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbyqueuenumber(@param('queuenumber",{"_index":494,"title":{},"body":{"controllers/QueueController.html":{}}}],["findbyqueuenumber(queuenumber",{"_index":444,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatus",{"_index":422,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatus(@param('status",{"_index":486,"title":{},"body":{"controllers/QueueController.html":{}}}],["findbystatus(status",{"_index":447,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findcompleted",{"_index":423,"title":{},"body":{"controllers/QueueController.html":{}}}],["findone",{"_index":424,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findone(@param('id",{"_index":492,"title":{},"body":{"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["findone(id",{"_index":452,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findpending",{"_index":425,"title":{},"body":{"controllers/QueueController.html":{}}}],["findserving",{"_index":426,"title":{},"body":{"controllers/QueueController.html":{}}}],["first_name",{"_index":514,"title":{},"body":{"entities/QueueDetails.html":{}}}],["firstname",{"_index":326,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["fk_current_queue",{"_index":299,"title":{},"body":{"entities/Counter.html":{}}}],["fk_queue_id",{"_index":528,"title":{},"body":{"entities/QueueDetails.html":{}}}],["fk_user_id",{"_index":534,"title":{},"body":{"entities/QueueDetails.html":{}}}],["focus",{"_index":1011,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1044,"title":{},"body":{"index.html":{}}}],["foreign_key_checks=0",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=1",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["foreignkeyconstraintname",{"_index":298,"title":{},"body":{"entities/Counter.html":{},"entities/QueueDetails.html":{}}}],["format",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["forwardref",{"_index":585,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["found",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["framework",{"_index":954,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":588,"title":{},"body":{"classes/QueueGateway.html":{}}}],["full",{"_index":1040,"title":{},"body":{"index.html":{}}}],["function",{"_index":912,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":946,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1007,"title":{},"body":{"index.html":{}}}],["generate",{"_index":645,"title":{},"body":{"injectables/QueueService.html":{}}}],["get(':id",{"_index":453,"title":{},"body":{"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["get(':id')@roles('admin",{"_index":805,"title":{},"body":{"controllers/RolesController.html":{}}}],["get(':id/details",{"_index":462,"title":{},"body":{"controllers/QueueController.html":{}}}],["get(':id/position",{"_index":465,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('completed",{"_index":450,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('counters",{"_index":459,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('number/:queuenumber",{"_index":445,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('pending",{"_index":455,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('profile",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('serving",{"_index":457,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('stats",{"_index":467,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('status/:status",{"_index":448,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('user/:userid",{"_index":819,"title":{},"body":{"controllers/RolesController.html":{}}}],["get('user/:userid')@roles('admin",{"_index":808,"title":{},"body":{"controllers/RolesController.html":{}}}],["get()@roles('admin",{"_index":802,"title":{},"body":{"controllers/RolesController.html":{}}}],["getcounters",{"_index":427,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getprofile",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getprofile(@request",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(req",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(userid",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["getqueuedetails",{"_index":428,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getqueuedetails(@param('id",{"_index":496,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueuedetails(id",{"_index":461,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueuedetails(queueid",{"_index":634,"title":{},"body":{"injectables/QueueService.html":{}}}],["getqueueposition",{"_index":429,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getqueueposition(@param('id",{"_index":498,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueueposition(id",{"_index":464,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueueposition(queueid",{"_index":636,"title":{},"body":{"injectables/QueueService.html":{}}}],["getstats",{"_index":430,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getting",{"_index":950,"title":{"index.html":{}},"body":{}}],["getuserroles",{"_index":801,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getuserroles(@param('userid",{"_index":820,"title":{},"body":{"controllers/RolesController.html":{}}}],["getuserroles(userid",{"_index":807,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["global",{"_index":608,"title":{},"body":{"classes/QueueGateway.html":{}}}],["graph",{"_index":1034,"title":{},"body":{"index.html":{},"modules.html":{}}}],["grow",{"_index":1054,"title":{},"body":{"index.html":{}}}],["guard",{"_index":822,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":823,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["handleconnection",{"_index":548,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handleconnection(client",{"_index":561,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledisconnect",{"_index":549,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledisconnect(client",{"_index":566,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition",{"_index":550,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition(client",{"_index":568,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter",{"_index":551,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter(client",{"_index":571,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue",{"_index":552,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue(client",{"_index":574,"title":{},"body":{"classes/QueueGateway.html":{}}}],["hands",{"_index":1028,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1017,"title":{},"body":{"index.html":{}}}],["hash",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["hello",{"_index":110,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1032,"title":{},"body":{"index.html":{}}}],["here",{"_index":1062,"title":{},"body":{"index.html":{}}}],["hit",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["host",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":1068,"title":{},"body":{"index.html":{}}}],["id",{"_index":290,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"entities/User.html":{}}}],["identifier",{"_index":901,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":368,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":543,"title":{},"body":{"classes/QueueGateway.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["inactive",{"_index":317,"title":{},"body":{"entities/Counter.html":{},"miscellaneous/enumerations.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["information",{"_index":993,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1014,"title":{},"body":{"index.html":{}}}],["inject",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["inject(forwardref",{"_index":590,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["injectable",{"_index":106,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["injectables",{"_index":107,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"overview.html":{}}}],["injectrepository",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["injectrepository(counter",{"_index":644,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(queue",{"_index":642,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(queuedetails",{"_index":643,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(role",{"_index":864,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectrepository(user",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["install",{"_index":1006,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":967,"title":{},"body":{"index.html":{}}}],["interact",{"_index":1035,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["inversejoincolumn",{"_index":890,"title":{},"body":{"entities/User.html":{}}}],["isenum",{"_index":876,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isenum(queuestatus",{"_index":877,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isenum(queuestatus)@isoptional",{"_index":874,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isglobal",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":343,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["isoptional",{"_index":340,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{}}}],["ispasswordvalid",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":342,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isstring()@isnotempty",{"_index":333,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["isstring()@isoptional",{"_index":331,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isvalidemail",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["isvalidemail(email",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["it's",{"_index":715,"title":{},"body":{"injectables/QueueService.html":{}}}],["job",{"_index":1047,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1049,"title":{},"body":{"index.html":{}}}],["join",{"_index":1060,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":314,"title":{},"body":{"entities/Counter.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["jointable",{"_index":892,"title":{},"body":{"entities/User.html":{}}}],["jwt",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":144,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/RolesController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":366,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":178,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1065,"title":{},"body":{"index.html":{}}}],["key",{"_index":985,"title":{},"body":{"index.html":{}}}],["last_name",{"_index":517,"title":{},"body":{"entities/QueueDetails.html":{}}}],["lastname",{"_index":327,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["learn",{"_index":1020,"title":{},"body":{"index.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["lessthanorequal",{"_index":641,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(new",{"_index":766,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(queue.createdat",{"_index":720,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(queueid",{"_index":721,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(today",{"_index":663,"title":{},"body":{"injectables/QueueService.html":{}}}],["license",{"_index":1071,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1052,"title":{},"body":{"index.html":{}}}],["line",{"_index":716,"title":{},"body":{"injectables/QueueService.html":{}}}],["linkedin",{"_index":1046,"title":{},"body":{"index.html":{}}}],["literal",{"_index":433,"title":{},"body":{"controllers/QueueController.html":{}}}],["localhost",{"_index":1087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger",{"_index":546,"title":{},"body":{"classes/QueueGateway.html":{}}}],["logger(queuegateway.name",{"_index":558,"title":{},"body":{"classes/QueueGateway.html":{}}}],["logging",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":127,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.email",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.password",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":994,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1043,"title":{},"body":{"index.html":{}}}],["loss",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["makes",{"_index":1001,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1013,"title":{},"body":{"index.html":{}}}],["many",{"_index":717,"title":{},"body":{"injectables/QueueService.html":{}}}],["manytomany",{"_index":797,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":794,"title":{},"body":{"entities/Role.html":{}}}],["manytomany(undefined)@jointable({name",{"_index":888,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":537,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["manytoone(undefined",{"_index":523,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["mark",{"_index":727,"title":{},"body":{"injectables/QueueService.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.floor(totalwaittimems",{"_index":775,"title":{},"body":{"injectables/QueueService.html":{}}}],["mau",{"_index":997,"title":{},"body":{"index.html":{}}}],["message",{"_index":736,"title":{},"body":{"injectables/QueueService.html":{}}}],["metadata",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["middle_initial",{"_index":519,"title":{},"body":{"entities/QueueDetails.html":{}}}],["middleinitial",{"_index":328,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["migrationsrun",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["minutes",{"_index":674,"title":{},"body":{"injectables/QueueService.html":{}}}],["miscellaneous",{"_index":942,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1051,"title":{},"body":{"index.html":{}}}],["mode",{"_index":971,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/queue/queue.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":737,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["mysql",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["mysql2",{"_index":931,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":1066,"title":{},"body":{"index.html":{}}}],["name",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":1038,"title":{},"body":{"index.html":{}}}],["nest",{"_index":960,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1070,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":983,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":833,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":925,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":583,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["new",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["next",{"_index":438,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["nextcalled",{"_index":754,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue",{"_index":733,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.counternumber",{"_index":741,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.id",{"_index":744,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.status",{"_index":739,"title":{},"body":{"injectables/QueueService.html":{}}}],["node.js",{"_index":953,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":640,"title":{},"body":{"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["notfoundexception(`counter",{"_index":726,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`details",{"_index":701,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`queue",{"_index":698,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`role",{"_index":867,"title":{},"body":{"injectables/RolesService.html":{}}}],["notify",{"_index":691,"title":{},"body":{"injectables/QueueService.html":{}}}],["notifycounterupdate",{"_index":553,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifycounterupdate(counterid",{"_index":577,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate",{"_index":554,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate(queueid",{"_index":579,"title":{},"body":{"classes/QueueGateway.html":{}}}],["npm",{"_index":966,"title":{},"body":{"index.html":{}}}],["null",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"entities/Counter.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["nullable",{"_index":295,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["number",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{}}}],["offer",{"_index":1048,"title":{},"body":{"index.html":{}}}],["official",{"_index":998,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":525,"title":{},"body":{"entities/QueueDetails.html":{}}}],["one",{"_index":719,"title":{},"body":{"injectables/QueueService.html":{}}}],["onetomany",{"_index":405,"title":{},"body":{"entities/Queue.html":{}}}],["onetomany(undefined",{"_index":394,"title":{},"body":{"entities/Queue.html":{}}}],["onetoone",{"_index":313,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["onetoone(undefined",{"_index":293,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["ongatewayconnection",{"_index":544,"title":{},"body":{"classes/QueueGateway.html":{}}}],["ongatewaydisconnect",{"_index":545,"title":{},"body":{"classes/QueueGateway.html":{}}}],["open",{"_index":1053,"title":{},"body":{"index.html":{}}}],["optional",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":695,"title":{},"body":{"injectables/QueueService.html":{}}}],["origin",{"_index":587,"title":{},"body":{"classes/QueueGateway.html":{}}}],["out",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1076,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":920,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":474,"title":{},"body":{"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["parameters",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"miscellaneous/functions.html":{}}}],["parseint(process.env.db_port",{"_index":1088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["part",{"_index":1039,"title":{},"body":{"index.html":{}}}],["passport",{"_index":359,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":356,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":351,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["password.length",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":473,"title":{},"body":{"controllers/QueueController.html":{}}}],["patch(':id",{"_index":471,"title":{},"body":{"controllers/QueueController.html":{}}}],["payload",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":371,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.roles",{"_index":372,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":370,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pending",{"_index":409,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["pendingcount",{"_index":755,"title":{},"body":{"injectables/QueueService.html":{}}}],["per",{"_index":675,"title":{},"body":{"injectables/QueueService.html":{}}}],["person",{"_index":676,"title":{},"body":{"injectables/QueueService.html":{}}}],["phone_number",{"_index":521,"title":{},"body":{"entities/QueueDetails.html":{}}}],["phonenumber",{"_index":329,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["platform",{"_index":996,"title":{},"body":{"index.html":{}}}],["please",{"_index":1023,"title":{},"body":{"index.html":{}}}],["port",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["position",{"_index":598,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["possible",{"_index":991,"title":{},"body":{"index.html":{}}}],["post",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{}}}],["post('counter",{"_index":434,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('counter/:counterid/call",{"_index":437,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('login",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["prevent",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["primarygeneratedcolumn",{"_index":303,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["private",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["process.env.db_host",{"_index":1086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":1093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":1092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_username",{"_index":1090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"classes/QueueGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":952,"title":{},"body":{"index.html":{}}}],["project",{"_index":963,"title":{},"body":{"index.html":{}}}],["promise",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["promise.all",{"_index":760,"title":{},"body":{"injectables/QueueService.html":{}}}],["properties",{"_index":287,"title":{"properties.html":{}},"body":{"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"properties.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["questions",{"_index":1021,"title":{},"body":{"index.html":{}}}],["queue",{"_index":292,"title":{"entities/Queue.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["queue.completedat",{"_index":709,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.completedat.gettime",{"_index":773,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.controller",{"_index":615,"title":{},"body":{"modules/QueueModule.html":{}}}],["queue.counter",{"_index":294,"title":{},"body":{"entities/Counter.html":{}}}],["queue.counternumber",{"_index":711,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.createdat.gettime",{"_index":774,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.details",{"_index":524,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue.dto",{"_index":479,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["queue.dto.ts",{"_index":323,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["queue.dto.ts:10",{"_index":336,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:11",{"_index":873,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:14",{"_index":337,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:18",{"_index":332,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:22",{"_index":338,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:26",{"_index":339,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:30",{"_index":334,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:33",{"_index":341,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:6",{"_index":335,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:7",{"_index":875,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.entity",{"_index":538,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue.gateway",{"_index":616,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["queue.service",{"_index":477,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{}}}],["queue.status",{"_index":705,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue/entities/queue.entity",{"_index":315,"title":{},"body":{"entities/Counter.html":{}}}],["queue_id",{"_index":527,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue_number",{"_index":400,"title":{},"body":{"entities/Queue.html":{}}}],["queuecontroller",{"_index":415,"title":{"controllers/QueueController.html":{}},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"coverage.html":{}}}],["queuedata",{"_index":596,"title":{},"body":{"classes/QueueGateway.html":{}}}],["queuedetails",{"_index":393,"title":{"entities/QueueDetails.html":{}},"body":{"entities/Queue.html":{},"entities/QueueDetails.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["queuedetailsrepository",{"_index":621,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuegateway",{"_index":541,"title":{"classes/QueueGateway.html":{}},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{},"overview.html":{}}}],["queueid",{"_index":509,"title":{},"body":{"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["queuemodule",{"_index":41,"title":{"modules/QueueModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"modules.html":{},"overview.html":{}}}],["queuenumber",{"_index":382,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["queuerepository",{"_index":624,"title":{},"body":{"injectables/QueueService.html":{}}}],["queues",{"_index":655,"title":{},"body":{"injectables/QueueService.html":{}}}],["queueservice",{"_index":476,"title":{"injectables/QueueService.html":{}},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{},"overview.html":{}}}],["queuestatus",{"_index":403,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{},"miscellaneous/enumerations.html":{}}}],["queuestatus.cancelled",{"_index":761,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuestatus.completed",{"_index":708,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuestatus.pending",{"_index":414,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["queuestatus.serving",{"_index":740,"title":{},"body":{"injectables/QueueService.html":{}}}],["read",{"_index":1061,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"controllers/RolesController.html":{}}}],["ready",{"_index":981,"title":{},"body":{"index.html":{}}}],["real",{"_index":1036,"title":{},"body":{"index.html":{}}}],["reason_of_visit",{"_index":531,"title":{},"body":{"entities/QueueDetails.html":{}}}],["reasonofvisit",{"_index":330,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["received",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["referencedcolumnname",{"_index":895,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":935,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":827,"title":{},"body":{"guards/RolesGuard.html":{}}}],["register",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registerdto",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registerdto",{"_index":132,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["relations",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["remove",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["repository",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"index.html":{}}}],["req",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["requiredroles",{"_index":836,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":841,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiring",{"_index":1004,"title":{},"body":{"index.html":{}}}],["reset",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["resources",{"_index":1015,"title":{},"body":{"index.html":{}}}],["response",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["result",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["role",{"_index":786,"title":{"entities/Role.html":{}},"body":{"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"coverage.html":{}}}],["role.name",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["role_id",{"_index":896,"title":{},"body":{"entities/User.html":{}}}],["roleids",{"_index":857,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolenames",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":816,"title":{},"body":{"controllers/RolesController.html":{}}}],["roles.controller",{"_index":848,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.map((role",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles.service",{"_index":810,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/entities/role.entity",{"_index":893,"title":{},"body":{"entities/User.html":{}}}],["roles/roles.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["roles/roles.service",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles_key",{"_index":834,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolescontroller",{"_index":799,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesguard",{"_index":812,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesmodule",{"_index":42,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesrepository",{"_index":855,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolesservice",{"_index":207,"title":{"injectables/RolesService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"coverage.html":{},"overview.html":{}}}],["room",{"_index":748,"title":{},"body":{"injectables/QueueService.html":{}}}],["rooms",{"_index":605,"title":{},"body":{"classes/QueueGateway.html":{}}}],["root",{"_index":1091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":968,"title":{},"body":{"index.html":{}}}],["runs",{"_index":989,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":938,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":668,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue",{"_index":677,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue.id",{"_index":680,"title":{},"body":{"injectables/QueueService.html":{}}}],["scalable",{"_index":957,"title":{},"body":{"index.html":{}}}],["secret",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretkey",{"_index":360,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretorkey",{"_index":369,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["seeddatabaseifneeded",{"_index":913,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seeddatabaseifneeded(datasource",{"_index":948,"title":{},"body":{"miscellaneous/functions.html":{}}}],["select",{"_index":767,"title":{},"body":{"injectables/QueueService.html":{}}}],["send",{"_index":601,"title":{},"body":{"classes/QueueGateway.html":{}}}],["sequence",{"_index":647,"title":{},"body":{"injectables/QueueService.html":{}}}],["server",{"_index":547,"title":{},"body":{"classes/QueueGateway.html":{},"index.html":{}}}],["serving",{"_index":410,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["servingcount",{"_index":756,"title":{},"body":{"injectables/QueueService.html":{}}}],["set",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["setmetadata(roles_key",{"_index":1095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":964,"title":{},"body":{"index.html":{}}}],["sheesh",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["side",{"_index":958,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":672,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["socket",{"_index":562,"title":{},"body":{"classes/QueueGateway.html":{}}}],["socket.io",{"_index":584,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["specific",{"_index":604,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["sponsors",{"_index":1056,"title":{},"body":{"index.html":{}}}],["src/.../counter.entity.ts",{"_index":944,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../database.config.ts",{"_index":1083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":947,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../queue.entity.ts",{"_index":945,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":1084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":108,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":109,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:20",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:31",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:38",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:167",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:17",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:172",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:36",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:95",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":906,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":373,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:2",{"_index":374,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:3",{"_index":375,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":782,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts:2",{"_index":783,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:3",{"_index":785,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:4",{"_index":784,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/guards/jwt",{"_index":345,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":824,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:6",{"_index":828,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:9",{"_index":831,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":350,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:22",{"_index":355,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":353,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/config/database.config.ts",{"_index":910,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":911,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/counter/entities/counter.entity.ts",{"_index":286,"title":{},"body":{"entities/Counter.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/counter/entities/counter.entity.ts:12",{"_index":304,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:15",{"_index":306,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:22",{"_index":312,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:25",{"_index":302,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:29",{"_index":300,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/queue/dto/create",{"_index":322,"title":{},"body":{"classes/CreateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/dto/update",{"_index":872,"title":{},"body":{"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue",{"_index":507,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue.entity.ts",{"_index":376,"title":{},"body":{"entities/Queue.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/queue/entities/queue.entity.ts:15",{"_index":399,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:18",{"_index":402,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:25",{"_index":404,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:28",{"_index":389,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:31",{"_index":392,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:34",{"_index":385,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:37",{"_index":398,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:40",{"_index":396,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:43",{"_index":387,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/queue.controller.ts",{"_index":416,"title":{},"body":{"controllers/QueueController.html":{},"coverage.html":{}}}],["src/modules/queue/queue.controller.ts:12",{"_index":442,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:17",{"_index":443,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:22",{"_index":449,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:27",{"_index":456,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:32",{"_index":458,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:37",{"_index":451,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:42",{"_index":468,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:47",{"_index":454,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:52",{"_index":446,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:57",{"_index":463,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:62",{"_index":466,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:67",{"_index":472,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:72",{"_index":439,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:77",{"_index":435,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:82",{"_index":460,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.gateway.ts",{"_index":542,"title":{},"body":{"classes/QueueGateway.html":{},"coverage.html":{}}}],["src/modules/queue/queue.gateway.ts:18",{"_index":559,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:21",{"_index":556,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:28",{"_index":563,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:32",{"_index":567,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:37",{"_index":576,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:44",{"_index":570,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:50",{"_index":573,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:56",{"_index":580,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:61",{"_index":578,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.module.ts",{"_index":614,"title":{},"body":{"modules/QueueModule.html":{}}}],["src/modules/queue/queue.service.ts",{"_index":619,"title":{},"body":{"injectables/QueueService.html":{},"coverage.html":{}}}],["src/modules/queue/queue.service.ts:106",{"_index":630,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:118",{"_index":635,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:12",{"_index":623,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:135",{"_index":639,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:162",{"_index":637,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:182",{"_index":627,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:24",{"_index":628,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:252",{"_index":638,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:286",{"_index":626,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:292",{"_index":633,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:81",{"_index":629,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:87",{"_index":631,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:94",{"_index":632,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/roles/entities/role.entity.ts",{"_index":787,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["src/roles/entities/role.entity.ts:10",{"_index":793,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:13",{"_index":790,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:16",{"_index":796,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:7",{"_index":791,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/roles.controller.ts",{"_index":800,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts:14",{"_index":804,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:20",{"_index":806,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:26",{"_index":809,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.module.ts",{"_index":846,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service.ts",{"_index":850,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:17",{"_index":859,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:21",{"_index":862,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:29",{"_index":861,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:37",{"_index":863,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:45",{"_index":858,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:8",{"_index":854,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/users/entities/user.entity.ts",{"_index":878,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:16",{"_index":885,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:19",{"_index":884,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":887,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:25",{"_index":886,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:28",{"_index":880,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:32",{"_index":882,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:35",{"_index":883,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:49",{"_index":891,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.module.ts",{"_index":897,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":969,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":972,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":973,"title":{},"body":{"index.html":{}}}],["started",{"_index":951,"title":{"index.html":{}},"body":{}}],["starter",{"_index":962,"title":{},"body":{"index.html":{}}}],["statement",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["statements",{"_index":902,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":291,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{}}}],["stay",{"_index":1042,"title":{},"body":{"index.html":{}}}],["steps",{"_index":986,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":1002,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":358,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strength",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["string(todaycount",{"_index":666,"title":{},"body":{"injectables/QueueService.html":{}}}],["sub",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["subscribemessage",{"_index":582,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('getqueueposition",{"_index":569,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joincounter",{"_index":572,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joinqueue",{"_index":575,"title":{},"body":{"classes/QueueGateway.html":{}}}],["success",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{}}}],["successfully",{"_index":747,"title":{},"body":{"injectables/QueueService.html":{}}}],["super",{"_index":365,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super_admin",{"_index":803,"title":{},"body":{"controllers/RolesController.html":{}}}],["support",{"_index":1022,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1073,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":919,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":918,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":987,"title":{},"body":{"index.html":{}}}],["test",{"_index":976,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":979,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":978,"title":{},"body":{"index.html":{}}}],["tests",{"_index":974,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1055,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.getprofile(req.user.userid",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(logindto",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registerdto",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.counterrepository.create",{"_index":779,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.find",{"_index":781,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.findone",{"_index":725,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.save(counter",{"_index":735,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.findone(id",{"_index":703,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.findone(queueid",{"_index":699,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getqueueposition(queueid",{"_index":702,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getqueueposition(savedqueue.id",{"_index":690,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.isvalidemail(email",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.log(`client",{"_index":591,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queuedetailsrepository.create",{"_index":679,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.findone",{"_index":700,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.save(queuedetails",{"_index":689,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifycounterupdate(counterid",{"_index":753,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(id",{"_index":713,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(nextqueue.id",{"_index":750,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.server.emit('queuelistupdate",{"_index":692,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.count",{"_index":662,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.create",{"_index":669,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.find",{"_index":694,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.findone",{"_index":697,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(counter.currentqueue",{"_index":731,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(nextqueue",{"_index":743,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(queue",{"_index":678,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queueservice.addcounter(data.name",{"_index":505,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.callnext(+counterid",{"_index":503,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.create(createqueuedto",{"_index":484,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findall",{"_index":485,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbyqueuenumber(queuenumber",{"_index":495,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.completed",{"_index":490,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.pending",{"_index":488,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.serving",{"_index":489,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(status",{"_index":487,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findone(+id",{"_index":493,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getcounters",{"_index":506,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueuedetails(+id",{"_index":497,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueuedetails(queueid",{"_index":597,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getqueueposition(+id",{"_index":499,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueueposition(queueid",{"_index":599,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getstats",{"_index":491,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.update(+id",{"_index":501,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.reflector.getallandoverride",{"_index":837,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.rolesrepository.find",{"_index":865,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findbyids(roleids",{"_index":869,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findone",{"_index":866,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.findall",{"_index":817,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(+id",{"_index":818,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserroles(+userid",{"_index":821,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserroles(user.id",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.server.emit('counterlistupdate",{"_index":610,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.emit('queuelistupdate",{"_index":607,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`counter_${counterid}`).emit('counterupdate",{"_index":609,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`queue_${queueid}`).emit('queueupdate",{"_index":606,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.usersrepository.findone",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["this.usersrepository.save(user",{"_index":871,"title":{},"body":{"injectables/RolesService.html":{}}}],["throw",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["ties",{"_index":723,"title":{},"body":{"injectables/QueueService.html":{}}}],["time",{"_index":707,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["today",{"_index":648,"title":{},"body":{"injectables/QueueService.html":{}}}],["today.getfullyear()}${string(today.getmonth",{"_index":650,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaycount",{"_index":661,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart",{"_index":658,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart.sethours(0",{"_index":660,"title":{},"body":{"injectables/QueueService.html":{}}}],["token",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["total",{"_index":772,"title":{},"body":{"injectables/QueueService.html":{}}}],["totalcount",{"_index":759,"title":{},"body":{"injectables/QueueService.html":{}}}],["totalwaittimems",{"_index":770,"title":{},"body":{"injectables/QueueService.html":{}}}],["touch",{"_index":1063,"title":{},"body":{"index.html":{}}}],["true",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"entities/User.html":{}}}],["true})@joincolumn({name",{"_index":296,"title":{},"body":{"entities/Counter.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["try",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["turn",{"_index":749,"title":{},"body":{"injectables/QueueService.html":{}}}],["twitter",{"_index":1069,"title":{},"body":{"index.html":{}}}],["type",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([queue",{"_index":618,"title":{},"body":{"modules/QueueModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":849,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":1085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":961,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(error.message",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined",{"_index":311,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["unique",{"_index":401,"title":{},"body":{"entities/Queue.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["unit",{"_index":975,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["unlicensed",{"_index":1082,"title":{},"body":{"properties.html":{}}}],["update",{"_index":431,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["update(@param('id",{"_index":500,"title":{},"body":{"controllers/QueueController.html":{}}}],["update(id",{"_index":469,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["updated",{"_index":714,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatedqueue",{"_index":712,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatequeuedto",{"_index":470,"title":{"classes/UpdateQueueDto.html":{}},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["updatequeuedto.counternumber",{"_index":710,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatequeuedto.status",{"_index":704,"title":{},"body":{"injectables/QueueService.html":{}}}],["updates",{"_index":602,"title":{},"body":{"classes/QueueGateway.html":{},"index.html":{}}}],["url",{"_index":589,"title":{},"body":{"classes/QueueGateway.html":{}}}],["usefactory",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RolesController.html":{}}}],["useguards(jwtauthguard",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RolesController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":184,"title":{"entities/User.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["user.defaultrole?.name",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.email",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles",{"_index":795,"title":{},"body":{"entities/Role.html":{},"injectables/RolesService.html":{}}}],["user.roles?.includes(role",{"_index":842,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user_id",{"_index":533,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["user_roles",{"_index":889,"title":{},"body":{"entities/User.html":{}}}],["userid",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtStrategy.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["username",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":789,"title":{},"body":{"entities/Role.html":{}}}],["users/entities/user.entity",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["users/users.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["usersmodule",{"_index":43,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["userwithoutpassword",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["using",{"_index":724,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["valid",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":354,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(logindto",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":344,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{},"dependencies.html":{}}}],["value",{"_index":557,"title":{},"body":{"classes/QueueGateway.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":907,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":364,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":1080,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1030,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1019,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1033,"title":{},"body":{"index.html":{}}}],["void",{"_index":565,"title":{},"body":{"classes/QueueGateway.html":{}}}],["wait",{"_index":764,"title":{},"body":{"injectables/QueueService.html":{}}}],["waiting",{"_index":738,"title":{},"body":{"injectables/QueueService.html":{}}}],["watch",{"_index":970,"title":{},"body":{"index.html":{}}}],["website",{"_index":1067,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":581,"title":{},"body":{"classes/QueueGateway.html":{}}}],["websocketserver",{"_index":560,"title":{},"body":{"classes/QueueGateway.html":{}}}],["working",{"_index":1018,"title":{},"body":{"index.html":{}}}],["world",{"_index":111,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1045,"title":{},"body":{"index.html":{}}}],["xxxx",{"_index":665,"title":{},"body":{"injectables/QueueService.html":{}}}],["yes",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["you'd",{"_index":1059,"title":{},"body":{"index.html":{}}}],["you're",{"_index":980,"title":{},"body":{"index.html":{}}}],["yyyymmdd",{"_index":664,"title":{},"body":{"injectables/QueueService.html":{}}}],["zoom",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            QueueModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { databaseConfig } from './config/database.config';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { RolesModule } from './roles/roles.module';\nimport { QueueModule } from './modules/queue/queue.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'mysql',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: [__dirname + '/**/*.entity{.ts,.js}'],\n        synchronize: configService.get('NODE_ENV') !== 'production', //set this sheesh to true in development only\n        logging: configService.get('NODE_ENV') !== 'production',\n        // Prevent data loss in development (below code is for development only)\n        // synchronize: true,\n        migrationsRun: false,\n        dropSchema: false,\n\n        // Only for development environments!\n        beforeConnect: async (connection) => {\n          if (process.env.NODE_ENV !== 'production') {\n            connection.query('SET FOREIGN_KEY_CHECKS=0;');\n          }\n        },\n        afterConnect: async (connection) => {\n          if (process.env.NODE_ENV !== 'production') {\n            connection.query('SET FOREIGN_KEY_CHECKS=1;');\n          }\n        },\n      }),\n    }),\n    UsersModule,\n    AuthModule,\n    RolesModule,\n    QueueModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    console.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(error.message || 'Invalid credentials');\n    }\n  }\n\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    console.log('Register endpoint hit with data:', registerDto); //Debugging Statement\n    return this.authService.register(registerDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return this.authService.getProfile(req.user.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../users/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtStrategy } from './jwt.strategy';\nimport { ConfigService } from '@nestjs/config';\nimport { RolesModule } from '../roles/roles.module';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => {\n        return {\n          secret: config.get('JWT_SECRET'),\n          signOptions: { expiresIn: '1d' },\n        };\n      },\n    }),\n    TypeOrmModule.forFeature([User]),\n    RolesModule,\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService, JwtStrategy, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Private\n                                isValidEmail\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, jwtService: JwtService, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:172\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isValidEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValidEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:167\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  ConflictException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../users/entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { RolesService } from '../roles/roles.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private jwtService: JwtService,\n    private rolesService: RolesService,\n  ) {}\n\n  async validateUser(loginDto: LoginDto): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { email: loginDto.email },\n    });\n    if (user && (await bcrypt.compare(loginDto.password, user.password))) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(loginDto: LoginDto) {\n    console.log('Login attempt with:', loginDto);\n\n    try {\n      const user = await this.usersRepository.findOne({\n        where: { email: loginDto.email },\n        relations: ['defaultRole'],\n      });\n\n      console.log('User found:', user ? 'Yes' : 'No');\n\n      if (!user) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Debug password check\n      console.log('Stored password hash:', user.password);\n      console.log('Comparing with:', loginDto.password);\n\n      const isPasswordValid = await bcrypt.compare(\n        loginDto.password,\n        user.password,\n      );\n      console.log('Password valid:', isPasswordValid);\n\n      if (!isPasswordValid) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Get user roles\n      const roles = await this.rolesService.getUserRoles(user.id);\n      const roleNames = roles.map((role) => role.name);\n\n      const payload = {\n        sub: user.id,\n        email: user.email,\n        roles: roleNames,\n      };\n\n      const token = this.jwtService.sign(payload);\n      console.log('Generated token:', token ? 'Success' : 'Failed');\n\n      // Remove password from response\n      const { password: _, ...userWithoutPassword } = user;\n\n      return {\n        access_token: token,\n        user: {\n          ...userWithoutPassword,\n          roles: roleNames,\n          defaultRole: user.defaultRole?.name || 'citizen',\n        },\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  async register(registerDto: RegisterDto) {\n    const { email, password, name } = registerDto;\n\n    // Validate email format\n    if (!this.isValidEmail(email)) {\n      throw new BadRequestException('Invalid email format');\n    }\n\n    // Check if user exists\n    const existingUser = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUser) {\n      throw new ConflictException('Email already exists');\n    }\n\n    // Validate password strength\n    if (password.length  role.name);\n\n    const { password, ...result } = user;\n    return {\n      ...result,\n      roles: roleNames,\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Counter.html":{"url":"entities/Counter.html","title":"entity - Counter","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Counter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/counter/entities/counter.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                currentQueue\n                            \n                            \n                                    \n                                currentQueueId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        currentQueue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, queue => queue.counter, {nullable: true})@JoinColumn({name: 'current_queue_id', foreignKeyConstraintName: 'fk_current_queue'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        currentQueueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'current_queue_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CounterStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: CounterStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, OneToOne, JoinColumn } from 'typeorm';\nimport { Queue } from '../../queue/entities/queue.entity';\n\nexport enum CounterStatus {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n}\n\n@Entity('counters')\nexport class Counter {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column({\n    type: 'enum',\n    enum: CounterStatus,\n    default: CounterStatus.ACTIVE\n  })\n  status: CounterStatus;\n\n  @Column({ name: 'current_queue_id', nullable: true })\n  currentQueueId: number | null;\n\n  @OneToOne(() => Queue, queue => queue.counter, { nullable: true })\n  @JoinColumn({ name: 'current_queue_id', foreignKeyConstraintName: 'fk_current_queue' })\n  currentQueue: Queue | null;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQueueDto.html":{"url":"classes/CreateQueueDto.html","title":"class - CreateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/create-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsNotEmpty } from 'class-validator';\n\nexport class CreateQueueDto {\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsString()\n  @IsOptional()\n  middleInitial?: string;\n\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @IsString()\n  @IsOptional()\n  phoneNumber?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  reasonOfVisit: string;\n\n  @IsString()\n  @IsNotEmpty()\n  appointmentType: string;\n\n  @IsOptional()\n  userId?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  async validate(payload: any) {\n    return {\n      userId: payload.sub,\n      email: payload.email,\n      roles: payload.roles || [],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LoginDto {\n  email: string;\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Queue.html":{"url":"entities/Queue.html","title":"entity - Queue","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Queue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                completedAt\n                            \n                            \n                                    \n                                counter\n                            \n                            \n                                    \n                                counterNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                details\n                            \n                            \n                                    \n                                estimatedWaitTime\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                queueNumber\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        completedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'completed_at', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Counter\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, counter => counter.currentQueue, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'counter_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :     QueueDetails[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, details => details.queue)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        estimatedWaitTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'estimated_wait_time', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_number', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: QueueStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, OneToMany, CreateDateColumn, OneToOne } from 'typeorm';\nimport { QueueDetails } from './queue-details.entity';\nimport { Counter } from '../../counter/entities/counter.entity';\n\nexport enum QueueStatus {\n  PENDING = 'pending',\n  SERVING = 'serving',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n@Entity('queues')\nexport class Queue {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_number', unique: true })\n  queueNumber: string;\n\n  @Column({\n    type: 'enum',\n    enum: QueueStatus,\n    default: QueueStatus.PENDING\n  })\n  status: QueueStatus;\n\n  @Column({ name: 'counter_number', nullable: true })\n  counterNumber: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @Column({ name: 'completed_at', nullable: true })\n  completedAt: Date;\n\n  @Column({ name: 'estimated_wait_time', nullable: true })\n  estimatedWaitTime: number;\n\n  @OneToMany(() => QueueDetails, details => details.queue)\n  details: QueueDetails[];\n\n  @OneToOne(() => Counter, counter => counter.currentQueue, { nullable: true })\n  counter: Counter;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QueueController.html":{"url":"controllers/QueueController.html","title":"controller - QueueController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QueueController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                queue\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addCounter\n                            \n                            \n                                    \n                                callNext\n                            \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findByQueueNumber\n                            \n                            \n                                    \n                                findByStatus\n                            \n                            \n                                    \n                                findCompleted\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                findPending\n                            \n                            \n                                    \n                                findServing\n                            \n                            \n                                    \n                                getCounters\n                            \n                            \n                                    \n                                getQueueDetails\n                            \n                            \n                                    \n                                getQueuePosition\n                            \n                            \n                                    \n                                getStats\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    addCounter(data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('counter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        callNext\n                        \n                    \n                \n            \n            \n                \n                        \n                    callNext(counterId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('counter/:counterId/call-next')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createQueueDto: CreateQueueDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findByQueueNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByQueueNumber(queueNumber: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('number/:queueNumber')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatus(status: QueueStatus)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status/:status')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findCompleted\n                        \n                    \n                \n            \n            \n                \n                        \n                    findCompleted()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('completed')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findPending\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPending()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('pending')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findServing\n                        \n                    \n                \n            \n            \n                \n                        \n                    findServing()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('serving')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getCounters\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCounters()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('counters')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getQueueDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueDetails(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/details')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueuePosition(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/position')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateQueueDto: UpdateQueueDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQueueDto\n                                            \n                                                            UpdateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { QueueService } from './queue.service';\nimport { CreateQueueDto } from './dto/create-queue.dto';\nimport { UpdateQueueDto } from './dto/update-queue.dto';\nimport { QueueStatus } from './entities/queue.entity';\n\n@Controller('queue')\nexport class QueueController {\n  constructor(private readonly queueService: QueueService) {}\n\n  @Post()\n  create(@Body() createQueueDto: CreateQueueDto) {\n    return this.queueService.create(createQueueDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.queueService.findAll();\n  }\n\n  @Get('status/:status')\n  findByStatus(@Param('status') status: QueueStatus) {\n    return this.queueService.findByStatus(status);\n  }\n\n  @Get('pending')\n  findPending() {\n    return this.queueService.findByStatus(QueueStatus.PENDING);\n  }\n\n  @Get('serving')\n  findServing() {\n    return this.queueService.findByStatus(QueueStatus.SERVING);\n  }\n\n  @Get('completed')\n  findCompleted() {\n    return this.queueService.findByStatus(QueueStatus.COMPLETED);\n  }\n\n  @Get('stats')\n  getStats() {\n    return this.queueService.getStats();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.queueService.findOne(+id);\n  }\n\n  @Get('number/:queueNumber')\n  findByQueueNumber(@Param('queueNumber') queueNumber: string) {\n    return this.queueService.findByQueueNumber(queueNumber);\n  }\n\n  @Get(':id/details')\n  getQueueDetails(@Param('id') id: string) {\n    return this.queueService.getQueueDetails(+id);\n  }\n\n  @Get(':id/position')\n  getQueuePosition(@Param('id') id: string) {\n    return this.queueService.getQueuePosition(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateQueueDto: UpdateQueueDto) {\n    return this.queueService.update(+id, updateQueueDto);\n  }\n\n  @Post('counter/:counterId/call-next')\n  callNext(@Param('counterId') counterId: string) {\n    return this.queueService.callNext(+counterId);\n  }\n\n  @Post('counter')\n  addCounter(@Body() data: { name: string }) {\n    return this.queueService.addCounter(data.name);\n  }\n\n  @Get('counters')\n  getCounters() {\n    return this.queueService.getCounters();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/QueueDetails.html":{"url":"entities/QueueDetails.html","title":"entity - QueueDetails","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  QueueDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue-details.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                queue\n                            \n                            \n                                    \n                                queueId\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'appointment_type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_initial', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'phone_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        queue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, queue => queue.details, {onDelete: 'CASCADE'})@JoinColumn({name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'reason_of_visit'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'SET NULL', nullable: true})@JoinColumn({name: 'user_id', foreignKeyConstraintName: 'fk_user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'user_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, JoinColumn } from 'typeorm';\nimport { Queue } from './queue.entity';\nimport { User } from '../../../users/entities/user.entity';\n\n@Entity('queue_details')\nexport class QueueDetails {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_id' })\n  queueId: number;\n\n  @ManyToOne(() => Queue, queue => queue.details, { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id' })\n  queue: Queue;\n\n  @Column({ name: 'user_id', nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { onDelete: 'SET NULL', nullable: true })\n  @JoinColumn({ name: 'user_id', foreignKeyConstraintName: 'fk_user_id' })\n  user: User;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column({ name: 'middle_initial', nullable: true })\n  middleInitial: string;\n\n  @Column({ nullable: true })\n  address: string;\n\n  @Column({ name: 'phone_number', nullable: true })\n  phoneNumber: string;\n\n  @Column({ name: 'reason_of_visit' })\n  reasonOfVisit: string;\n\n  @Column({ name: 'appointment_type' })\n  appointmentType: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueueGateway.html":{"url":"classes/QueueGateway.html","title":"class - QueueGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueueGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                    Async\n                                handleGetQueuePosition\n                            \n                            \n                                    \n                                handleJoinCounter\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueue\n                            \n                            \n                                notifyCounterUpdate\n                            \n                            \n                                notifyQueueUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueService: QueueService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.gateway.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueService\n                                                  \n                                                        \n                                                                        QueueService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueGateway.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:21\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleConnection\n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleGetQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetQueuePosition(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('getQueuePosition')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleJoinCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinCounter(client: Socket, counterId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinCounter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { success: boolean; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueue(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinQueue')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyCounterUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyCounterUpdate(counterId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyQueueUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyQueueUpdate(queueId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { QueueService } from './queue.service';\nimport { Logger, Inject, forwardRef } from '@nestjs/common';\n\n@WebSocketGateway({\n  cors: {\n    origin: '*', // In production, set to your frontend URL\n  },\n})\nexport class QueueGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  private readonly logger = new Logger(QueueGateway.name);\n  \n  @WebSocketServer()\n  server: Server;\n\n  constructor(\n    @Inject(forwardRef(() => QueueService))\n    private readonly queueService: QueueService\n  ) {}\n\n  handleConnection(client: Socket) {\n    this.logger.log(`Client connected: ${client.id}`);\n  }\n\n  handleDisconnect(client: Socket) {\n    this.logger.log(`Client disconnected: ${client.id}`);\n  }\n\n  @SubscribeMessage('joinQueue')\n  async handleJoinQueue(client: Socket, queueId: number) {\n    client.join(`queue_${queueId}`);\n    const queueData = await this.queueService.getQueueDetails(queueId);\n    return queueData;\n  }\n\n  @SubscribeMessage('getQueuePosition')\n  async handleGetQueuePosition(client: Socket, queueId: number) {\n    const position = await this.queueService.getQueuePosition(queueId);\n    return { position };\n  }\n\n  @SubscribeMessage('joinCounter')\n  handleJoinCounter(client: Socket, counterId: number) {\n    client.join(`counter_${counterId}`);\n    return { success: true };\n  }\n\n  // Send updates to all clients or specific rooms\n  notifyQueueUpdate(queueId: number, data: any) {\n    this.server.to(`queue_${queueId}`).emit('queueUpdate', data);\n    this.server.emit('queueListUpdate'); // Global queue update\n  }\n\n  notifyCounterUpdate(counterId: number, data: any) {\n    this.server.to(`counter_${counterId}`).emit('counterUpdate', data);\n    this.server.emit('counterListUpdate'); // Global counter update\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QueueModule.html":{"url":"modules/QueueModule.html","title":"module - QueueModule","body":"\n                   \n\n\n\n\n    Modules\n    QueueModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\n\nQueueGateway \n\nQueueGateway \n\n\n\nQueueService \n\nQueueService \n\n\n\nQueueModule\n\nQueueModule\n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/queue/queue.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QueueService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QueueController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QueueGateway\n                        \n                        \n                            QueueService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { QueueService } from './queue.service';\nimport { QueueController } from './queue.controller';\nimport { QueueGateway } from './queue.gateway';\nimport { Queue } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport { Counter } from '../counter/entities/counter.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Queue, QueueDetails, Counter]),\n  ],\n  controllers: [QueueController],\n  providers: [QueueService, QueueGateway],\n  exports: [QueueService, QueueGateway],\n})\nexport class QueueModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueueService.html":{"url":"injectables/QueueService.html","title":"injectable - QueueService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueueService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCounter\n                            \n                            \n                                    Async\n                                callNext\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByQueueNumber\n                            \n                            \n                                    Async\n                                findByStatus\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getCounters\n                            \n                            \n                                    Async\n                                getQueueDetails\n                            \n                            \n                                    Async\n                                getQueuePosition\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueRepository: Repository, queueDetailsRepository: Repository, counterRepository: Repository, queueGateway: QueueGateway)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueDetailsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        counterRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueGateway\n                                                  \n                                                        \n                                                                        QueueGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    addCounter(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:286\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        callNext\n                        \n                    \n                \n            \n            \n                \n                        \n                    callNext(counterId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:182\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createQueueDto: CreateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByQueueNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByQueueNumber(queueNumber: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:106\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatus(status: QueueStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCounters\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCounters()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:292\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueueDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueDetails(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueuePosition(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:162\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:252\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateQueueDto: UpdateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQueueDto\n                                            \n                                                            UpdateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, Inject, forwardRef } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, LessThanOrEqual } from 'typeorm';\nimport { Queue, QueueStatus } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport { Counter, CounterStatus } from '../counter/entities/counter.entity';\nimport { CreateQueueDto } from './dto/create-queue.dto';\nimport { UpdateQueueDto } from './dto/update-queue.dto';\nimport { QueueGateway } from './queue.gateway';\n\n@Injectable()\nexport class QueueService {\n  constructor(\n    @InjectRepository(Queue)\n    private queueRepository: Repository,\n    @InjectRepository(QueueDetails)\n    private queueDetailsRepository: Repository,\n    @InjectRepository(Counter)\n    private counterRepository: Repository,\n    @Inject(forwardRef(() => QueueGateway))\n    private queueGateway: QueueGateway,\n  ) {}\n\n  async create(createQueueDto: CreateQueueDto) {\n    // Generate a queue number based on date and sequence\n    const today = new Date();\n    const dateStr = `${today.getFullYear()}${String(today.getMonth() + 1).padStart(2, '0')}${String(today.getDate()).padStart(2, '0')}`;\n    \n    // Get the count of queues created today to determine the sequence number\n    const todayStart = new Date(today);\n    todayStart.setHours(0, 0, 0, 0);\n    \n    const todayCount = await this.queueRepository.count({\n      where: {\n        createdAt: LessThanOrEqual(today),\n      },\n    });\n    \n    // Format the queue number: YYYYMMDD-XXXX where XXXX is the sequence number\n    const queueNumber = `${dateStr}-${String(todayCount + 1).padStart(4, '0')}`;\n    \n    // Create and save the queue\n    const queue = this.queueRepository.create({\n      queueNumber,\n      status: QueueStatus.PENDING,\n      estimatedWaitTime: 15 * (todayCount + 1), // Simple estimation: 15 minutes per person\n    });\n    \n    const savedQueue = await this.queueRepository.save(queue);\n    \n    // Create queue details\n    const queueDetails = this.queueDetailsRepository.create({\n      queue: savedQueue,\n      queueId: savedQueue.id,\n      userId: createQueueDto.userId,\n      firstName: createQueueDto.firstName,\n      lastName: createQueueDto.lastName,\n      middleInitial: createQueueDto.middleInitial,\n      address: createQueueDto.address,\n      phoneNumber: createQueueDto.phoneNumber,\n      reasonOfVisit: createQueueDto.reasonOfVisit,\n      appointmentType: createQueueDto.appointmentType,\n    });\n    \n    await this.queueDetailsRepository.save(queueDetails);\n    \n    // Get queue position\n    const position = await this.getQueuePosition(savedQueue.id);\n    \n    const result = { queue: savedQueue, details: queueDetails, position };\n    \n    // Notify all clients that a new queue has been created\n    this.queueGateway.server.emit('queueListUpdate', {\n      action: 'created',\n      queueId: savedQueue.id\n    });\n    \n    return result;\n  }\n\n  async findAll() {\n    return await this.queueRepository.find({\n      order: { createdAt: 'ASC' }\n    });\n  }\n\n  async findByStatus(status: QueueStatus) {\n    return await this.queueRepository.find({\n      where: { status },\n      order: { createdAt: 'ASC' }\n    });\n  }\n\n  async findOne(id: number) {\n    const queue = await this.queueRepository.findOne({\n      where: { id }\n    });\n    \n    if (!queue) {\n      throw new NotFoundException(`Queue #${id} not found`);\n    }\n    \n    return queue;\n  }\n\n  async findByQueueNumber(queueNumber: string) {\n    const queue = await this.queueRepository.findOne({\n      where: { queueNumber }\n    });\n    \n    if (!queue) {\n      throw new NotFoundException(`Queue #${queueNumber} not found`);\n    }\n    \n    return queue;\n  }\n\n  async getQueueDetails(queueId: number) {\n    const queue = await this.findOne(queueId);\n    \n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId },\n      relations: ['user']\n    });\n    \n    if (!details) {\n      throw new NotFoundException(`Details for queue #${queueId} not found`);\n    }\n    \n    const position = await this.getQueuePosition(queueId);\n    \n    return { queue, details, position };\n  }\n\n  async update(id: number, updateQueueDto: UpdateQueueDto) {\n    const queue = await this.findOne(id);\n    \n    if (updateQueueDto.status) {\n      queue.status = updateQueueDto.status;\n      \n      // If completed, set completion time\n      if (updateQueueDto.status === QueueStatus.COMPLETED) {\n        queue.completedAt = new Date();\n      }\n    }\n    \n    if (updateQueueDto.counterNumber) {\n      queue.counterNumber = updateQueueDto.counterNumber;\n    }\n    \n    const updatedQueue = await this.queueRepository.save(queue);\n    \n    // Notify clients about the queue update\n    this.queueGateway.notifyQueueUpdate(id, {\n      action: 'updated',\n      queue: updatedQueue\n    });\n    \n    return updatedQueue;\n  }\n\n  async getQueuePosition(queueId: number) {\n    const queue = await this.findOne(queueId);\n    \n    // If the queue is not pending, it's not in line\n    if (queue.status !== QueueStatus.PENDING) {\n      return 0;\n    }\n    \n    // Count how many pending queues are ahead of this one\n    const position = await this.queueRepository.count({\n      where: {\n        status: QueueStatus.PENDING,\n        createdAt: LessThanOrEqual(queue.createdAt),\n        id: LessThanOrEqual(queueId) // Break ties using ID\n      }\n    });\n    \n    return position;\n  }\n\n  async callNext(counterId: number) {\n    const counter = await this.counterRepository.findOne({\n      where: { id: counterId },\n      relations: ['currentQueue']\n    });\n    \n    if (!counter) {\n      throw new NotFoundException(`Counter #${counterId} not found`);\n    }\n    \n    // Mark current queue as completed if exists\n    if (counter.currentQueue) {\n      counter.currentQueue.status = QueueStatus.COMPLETED;\n      counter.currentQueue.completedAt = new Date();\n      await this.queueRepository.save(counter.currentQueue);\n    }\n    \n    // Find the next pending queue\n    const nextQueue = await this.queueRepository.findOne({\n      where: { status: QueueStatus.PENDING },\n      order: { createdAt: 'ASC' }\n    });\n    \n    if (!nextQueue) {\n      counter.currentQueueId = null;\n      counter.currentQueue = null;\n      await this.counterRepository.save(counter);\n      return { counter, message: 'No more queues waiting' };\n    }\n    \n    // Update the next queue\n    nextQueue.status = QueueStatus.SERVING;\n    nextQueue.counterNumber = counter.name;\n    await this.queueRepository.save(nextQueue);\n    \n    // Update counter\n    counter.currentQueueId = nextQueue.id;\n    counter.currentQueue = nextQueue;\n    await this.counterRepository.save(counter);\n    \n    // Get associated details\n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId: nextQueue.id }\n    });\n    \n    const result = { \n      counter, \n      queue: nextQueue, \n      details,\n      message: 'Next queue called successfully' \n    };\n    \n    if (nextQueue) {\n      // Notify the specific queue room that it's their turn\n      this.queueGateway.notifyQueueUpdate(nextQueue.id, {\n        action: 'called',\n        counterName: counter.name,\n        counterId: counter.id\n      });\n    }\n    \n    // Notify counter clients\n    this.queueGateway.notifyCounterUpdate(counterId, {\n      action: 'nextCalled',\n      ...result\n    });\n    \n    return result;\n  }\n\n  async getStats() {\n    const [pendingCount, servingCount, completedCount, cancelledCount, totalCount] = await Promise.all([\n      this.queueRepository.count({ where: { status: QueueStatus.PENDING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.SERVING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.COMPLETED } }),\n      this.queueRepository.count({ where: { status: QueueStatus.CANCELLED } }),\n      this.queueRepository.count(),\n    ]);\n    \n    // Calculate average wait time\n    const completedQueues = await this.queueRepository.find({\n      where: { status: QueueStatus.COMPLETED, completedAt: LessThanOrEqual(new Date()) },\n      select: ['createdAt', 'completedAt']\n    });\n    \n    let averageWaitTime = 0;\n    if (completedQueues.length > 0) {\n      const totalWaitTimeMs = completedQueues.reduce((total, queue) => {\n        return total + (queue.completedAt.getTime() - queue.createdAt.getTime());\n      }, 0);\n      averageWaitTime = Math.floor(totalWaitTimeMs / completedQueues.length / 60000); // Convert to minutes\n    }\n    \n    return {\n      pending: pendingCount,\n      serving: servingCount,\n      completed: completedCount,\n      cancelled: cancelledCount,\n      total: totalCount,\n      averageWaitTime\n    };\n  }\n\n  // Add a counter\n  async addCounter(name: string) {\n    const counter = this.counterRepository.create({ name });\n    return await this.counterRepository.save(counter);\n  }\n\n  // Get all counters\n  async getCounters() {\n    return await this.counterRepository.find({\n      relations: ['currentQueue']\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class RegisterDto {\n  email: string;\n  password: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/entities/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, ManyToMany } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity('roles')\nexport class Role {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true, nullable: false })\n  name: string;\n\n  @Column({ nullable: true })\n  description: string;\n\n  @ManyToMany(() => User, (user) => user.roles)\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, UseGuards } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\n\n@Controller('roles')\n@UseGuards(JwtAuthGuard, RolesGuard)\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @Get()\n  @Roles('admin', 'super_admin')\n  findAll() {\n    return this.rolesService.findAll();\n  }\n\n  @Get(':id')\n  @Roles('admin', 'super_admin')\n  findOne(@Param('id') id: string) {\n    return this.rolesService.findOne(+id);\n  }\n\n  @Get('user/:userId')\n  @Roles('admin', 'super_admin')\n  getUserRoles(@Param('userId') userId: string) {\n    return this.rolesService.getUserRoles(+userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles.guard.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const { user } = context.switchToHttp().getRequest();\n    return requiredRoles.some((role) => user.roles?.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\nimport { RolesService } from './roles.service';\nimport { RolesController } from './roles.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Role, User])],\n  providers: [RolesService],\n  controllers: [RolesController],\n  exports: [RolesService],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                assignRolesToUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rolesRepository: Repository, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        assignRolesToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignRolesToUser(userId: number, roleIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectRepository(Role)\n    private rolesRepository: Repository,\n\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async findAll(): Promise {\n    return this.rolesRepository.find();\n  }\n\n  async findOne(id: number): Promise {\n    const role = await this.rolesRepository.findOne({ where: { id } });\n    if (!role) {\n      throw new NotFoundException(`Role with ID ${id} not found`);\n    }\n    return role;\n  }\n\n  async findByName(name: string): Promise {\n    const role = await this.rolesRepository.findOne({ where: { name } });\n    if (!role) {\n      throw new NotFoundException(`Role with name ${name} not found`);\n    }\n    return role;\n  }\n\n  async getUserRoles(userId: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n    return user ? user.roles : [];\n  }\n\n  async assignRolesToUser(userId: number, roleIds: number[]): Promise {\n    // Find the user\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // Find the roles\n    const roles = await this.rolesRepository.findByIds(roleIds);\n\n    // Assign roles to user\n    user.roles = roles;\n    await this.usersRepository.save(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQueueDto.html":{"url":"classes/UpdateQueueDto.html","title":"class - UpdateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/update-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                counterNumber\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(QueueStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEnum, IsOptional } from 'class-validator';\nimport { QueueStatus } from '../entities/queue.entity';\n\nexport class UpdateQueueDto {\n  @IsEnum(QueueStatus)\n  @IsOptional()\n  status?: QueueStatus;\n\n  @IsString()\n  @IsOptional()\n  counterNumber?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'default_role_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'default_role_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable({name: 'user_roles', joinColumn: undefined, inverseJoinColumn: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  ManyToMany,\n  JoinTable,\n} from 'typeorm';\nimport { Role } from '../../roles/entities/role.entity';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column()\n  password: string;\n\n  @Column()\n  name: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @ManyToOne(() => Role, { nullable: true })\n  @JoinColumn({ name: 'default_role_id' })\n  defaultRole: Role;\n\n  @Column({ name: 'default_role_id', nullable: true })\n  defaultRoleId: number;\n\n  @ManyToMany(() => Role)\n  @JoinTable({\n    name: 'user_roles',\n    joinColumn: {\n      name: 'user_id',\n      referencedColumnName: 'id',\n    },\n    inverseJoinColumn: {\n      name: 'role_id',\n      referencedColumnName: 'id',\n    },\n  })\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  exports: [TypeOrmModule],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            seedDatabaseIfNeeded\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/counter/entities/counter.entity.ts\n            \n            entity\n            Counter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/create-queue.dto.ts\n            \n            class\n            CreateQueueDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/update-queue.dto.ts\n            \n            class\n            UpdateQueueDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue-details.entity.ts\n            \n            entity\n            QueueDetails\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue.entity.ts\n            \n            entity\n            Queue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.controller.ts\n            \n            controller\n            QueueController\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.gateway.ts\n            \n            class\n            QueueGateway\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.service.ts\n            \n            injectable\n            QueueService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/roles/entities/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.1.0\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.0\n        \n            @nestjs/platform-socket.io : ^11.1.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @nestjs/websockets : ^11.1.0\n        \n            bcrypt : ^5.1.1\n        \n            class-validator : ^0.14.1\n        \n            dotenv : ^16.5.0\n        \n            mysql2 : ^3.14.1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            socket.io : ^4.8.1\n        \n            typeorm : ^0.3.22\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CounterStatus   (src/.../counter.entity.ts)\n                        \n                        \n                            QueueStatus   (src/.../queue.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/counter/entities/counter.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        CounterStatus\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n                        \n                            \n                                Value : inactive\n                            \n                        \n            \n        \n\n    src/modules/queue/entities/queue.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        QueueStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 SERVING\n                            \n                        \n                        \n                            \n                                Value : serving\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            seedDatabaseIfNeeded   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seedDatabaseIfNeeded\n                        \n                    \n                \n            \n            \n                \nseedDatabaseIfNeeded(dataSource: DataSource)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dataSource\n                                            \n                                                        DataSource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QueueModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nQueueGateway \n\nQueueGateway \n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\n\n\nQueueService \n\nQueueService \n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/database.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  host: process.env.DB_HOST || 'localhost',\n  port: parseInt(process.env.DB_PORT || '3306'),\n  username: process.env.DB_USERNAME || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'bulak_smart_connect',\n  entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n  synchronize: process.env.NODE_ENV !== 'production',\n  logging: process.env.NODE_ENV !== 'production',\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
