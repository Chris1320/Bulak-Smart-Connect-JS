var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.291,1,1.822]],["body/controllers/AppController.html",[0,2.027,1,2.859,2,1.61,3,0.513,4,0.441,5,0.441,6,3.032,7,0.67,8,1.823,9,4.386,10,2.011,11,0.041,12,0.948,13,3.694,14,1.448,15,1.478,16,0.843,17,0.756,18,2.473,19,3.032,20,0.513,21,0.308,22,2.011,23,3.032,24,1.304,25,3.694,26,0.032,27,0.032]],["title/modules/AppModule.html",[28,1.046,29,1.822]],["body/modules/AppModule.html",[1,2.357,2,1.398,3,0.299,4,0.257,5,0.257,11,0.041,16,0.939,17,0.441,18,2.313,19,1.77,20,0.299,21,0.18,26,0.022,27,0.022,28,1.353,29,3.329,30,0.939,31,1.048,32,1.325,33,1.325,34,1.048,35,2.357,36,1.174,37,1.77,38,1.77,39,1.77,40,2.592,41,2.313,42,2.592,43,1.973,44,1.325,45,1.174,46,2.155,47,2.357,48,3.209,49,2.985,50,1.325,51,1.325,52,0.939,53,1.515,54,2.155,55,2.155,56,2.155,57,2.155,58,1.77,59,2.155,60,2.155,61,2.357,62,2.155,63,1.77,64,1.77,65,0.441,66,1.77,67,1.77,68,2.155,69,1.77,70,2.155,71,1.77,72,2.155,73,1.048,74,2.155,75,1.77,76,2.155,77,1.174,78,1.77,79,1.77,80,2.634,81,3.209,82,2.985,83,2.155,84,2.155,85,3.486,86,1.77,87,2.155,88,1.77,89,2.155,90,2.155,91,2.155,92,2.155,93,2.256,94,2.155,95,2.155,96,2.155,97,1.747,98,3.209,99,2.634,100,3.209,101,2.155,102,2.155,103,2.155]],["title/injectables/AppService.html",[18,1.44,104,0.761]],["body/injectables/AppService.html",[3,0.539,4,0.464,5,0.464,7,0.705,8,1.881,9,4.466,11,0.04,12,0.998,14,1.523,15,1.526,16,0.705,17,0.796,18,2.333,20,0.539,21,0.324,24,1.372,26,0.033,27,0.033,104,1.232,105,1.889,106,3.191,107,3.887,108,3.887,109,3.887]],["title/controllers/AuthController.html",[0,1.291,110,1.822]],["body/controllers/AuthController.html",[0,1.05,2,1.05,3,0.334,4,0.287,5,0.287,7,0.437,8,1.365,10,2.227,11,0.041,12,1.05,14,1.603,16,0.861,17,0.493,20,0.334,21,0.201,22,1.312,24,1.443,26,0.024,27,0.024,65,0.713,88,1.978,97,2.696,110,2.141,111,1.978,112,1.978,113,2.41,114,2.859,115,2.859,116,2.859,117,2.41,118,2.41,119,2.41,120,1.782,121,1.3,122,1.782,123,3.482,124,1.978,125,2.78,126,3.482,127,2.41,128,2.448,129,1.978,130,2.78,131,3.482,132,2.41,133,2.41,134,2.41,135,1.978,136,3.482,137,1.694,138,1.987,139,1.978,140,1.978,141,1.978,142,1.312,143,2.41,144,1.978,145,2.41,146,2.41,147,1.978,148,2.41,149,1.978,150,1.312,151,2.859,152,1.694,153,2.41,154,1.978,155,1.978,156,1.482,157,1.312,158,2.41,159,2.41,160,2.41,161,2.41,162,2.41,163,2.41,164,2.41,165,2.41,166,2.41,167,2.41,168,1.978,169,2.41,170,2.41,171,2.41]],["title/modules/AuthModule.html",[28,1.046,40,1.613]],["body/modules/AuthModule.html",[2,1.54,3,0.341,4,0.294,5,0.294,11,0.041,16,0.985,17,0.504,20,0.341,21,0.205,24,0.868,26,0.024,27,0.024,28,1.46,30,1.072,31,1.196,32,1.513,33,1.513,34,1.196,35,2.544,36,2.253,40,3.026,41,2.423,43,2.173,44,1.513,45,1.34,47,2.173,49,2.908,50,1.513,51,1.513,52,1.072,58,2.02,63,2.02,64,2.02,110,2.544,138,2.701,139,2.02,172,2.02,173,2.46,174,2.02,175,2.02,176,3.026,177,2.46,178,2.46,179,1.73,180,3.535,181,1.513,182,0.782,183,1.34,184,2.46,185,2.46,186,2.46,187,2.46,188,1.73,189,2.46,190,2.46,191,2.46,192,2.46,193,2.46,194,2.46,195,2.46,196,2.02]],["title/injectables/AuthService.html",[104,0.761,138,1.44]],["body/injectables/AuthService.html",[3,0.189,4,0.162,5,0.162,7,0.247,8,0.876,11,0.041,12,1.005,14,1.428,15,0.711,16,0.812,17,0.278,20,0.189,21,0.113,24,1.163,26,0.015,27,0.015,52,0.593,65,0.802,73,2.24,97,2.572,104,0.574,105,0.661,114,1.835,115,1.835,116,1.835,120,1.707,121,1.315,122,1.707,124,1.835,125,2.51,128,2.001,129,1.835,130,2.132,137,0.956,138,1.086,140,1.116,141,1.116,147,1.116,149,1.116,150,2.626,151,2.706,152,2.753,154,1.116,155,2.706,156,2.24,157,1.795,179,0.956,182,1.533,183,0.74,197,1.116,198,2.99,199,2.235,200,2.235,201,1.374,202,1.36,203,2.317,204,4.138,205,1.804,206,1.36,207,1.835,208,1.36,209,1.374,210,1.36,211,0.836,212,1.36,213,1.36,214,2.51,215,1.116,216,1.36,217,1.36,218,2.235,219,1.36,220,1.835,221,1.36,222,1.36,223,1.116,224,0.74,225,1.835,226,1.36,227,1.116,228,2.336,229,2.235,230,1.36,231,2.846,232,1.36,233,1.36,234,1.116,235,2.336,236,1.36,237,1.116,238,1.36,239,2.235,240,1.36,241,1.835,242,1.36,243,1.36,244,1.36,245,2.235,246,2.846,247,1.36,248,1.36,249,1.36,250,1.587,251,1.36,252,3.296,253,1.36,254,2.235,255,1.116,256,1.36,257,1.36,258,1.36,259,3.296,260,1.36,261,1.36,262,1.36,263,1.36,264,1.36,265,1.36,266,1.36,267,2.235,268,1.36,269,2.235,270,2.235,271,1.36,272,1.835,273,2.235,274,1.36,275,1.36,276,2.235,277,2.235,278,1.36,279,1.36,280,1.36,281,1.36]],["title/injectables/JwtAuthGuard.html",[104,0.761,142,1.613]],["body/injectables/JwtAuthGuard.html",[3,0.564,4,0.484,5,0.484,11,0.04,16,0.894,17,0.831,20,0.564,21,0.338,26,0.034,27,0.034,104,1.266,105,1.973,142,2.685,181,2.497,282,3.333,283,3.333,284,4.048,285,4.931,286,4.061]],["title/injectables/JwtStrategy.html",[104,0.761,176,1.613]],["body/injectables/JwtStrategy.html",[3,0.396,4,0.341,5,0.341,7,0.518,8,1.538,11,0.041,12,1.151,14,1.119,16,0.876,17,0.585,20,0.396,21,0.238,22,1.555,24,1.008,26,0.027,27,0.027,49,3.678,50,1.756,65,0.803,93,2.007,97,2.442,104,1.008,105,1.388,120,1.711,121,1.248,122,1.711,128,2.007,137,2.007,150,1.555,156,1.756,157,1.555,176,2.137,181,1.756,188,2.007,201,1.756,211,1.756,214,1.555,250,1.244,255,2.344,272,3.222,284,3.222,287,2.344,288,3.925,289,2.855,290,2.855,291,3.925,292,2.855,293,2.855,294,2.855,295,2.855,296,2.344,297,4.485,298,2.855,299,2.855,300,2.855,301,2.007,302,2.855,303,2.855,304,2.855,305,2.855,306,2.855,307,2.855,308,2.855,309,2.855]],["title/classes/LoginDto.html",[21,0.247,125,1.613]],["body/classes/LoginDto.html",[3,0.547,4,0.47,5,0.47,7,0.715,11,0.039,12,1.243,15,1.738,20,0.547,21,0.329,26,0.033,27,0.033,65,0.991,73,2.547,125,2.637,214,2.854,310,2.772,311,3.237,312,2.354,313,3.943,314,3.943]],["title/classes/RegisterDto.html",[21,0.247,130,1.613]],["body/classes/RegisterDto.html",[3,0.524,4,0.451,5,0.451,7,0.685,11,0.039,12,1.32,15,1.797,20,0.524,21,0.315,26,0.032,27,0.032,65,1.053,73,2.499,121,1.635,130,2.569,214,2.801,310,2.657,312,2.293,315,3.102,316,3.779,317,3.779,318,3.779]],["title/entities/Role.html",[319,1.613,320,1.44]],["body/entities/Role.html",[3,0.412,4,0.354,5,0.354,7,0.538,10,2.673,11,0.041,12,1.26,15,1.56,16,0.731,20,0.412,21,0.247,26,0.027,27,0.027,61,3.019,65,1.005,77,1.617,93,2.834,121,1.455,182,1.683,183,1.617,209,2.479,224,1.617,312,1.959,319,1.617,320,1.959,321,2.438,322,3.218,323,2.814,324,4.577,325,2.969,326,2.969,327,3.757,328,2.969,329,2.438,330,3.757,331,2.969,332,2.969,333,3.31,334,2.969,335,3.757,336,3.31,337,2.969,338,2.438]],["title/controllers/RolesController.html",[0,1.291,339,1.822]],["body/controllers/RolesController.html",[0,1.175,2,1.175,3,0.374,4,0.322,5,0.322,7,0.489,8,1.478,10,2.369,11,0.041,12,1.117,14,1.705,15,1.633,16,0.899,17,0.552,20,0.374,21,0.225,22,1.468,23,2.213,24,1.535,26,0.026,27,0.026,65,0.772,112,2.213,120,1.643,121,1.199,122,1.643,135,2.213,142,1.468,144,2.213,168,2.213,205,1.896,211,2.319,250,1.643,323,2.319,339,2.319,340,2.213,341,3.868,342,3.096,343,3.096,344,2.695,345,5.138,346,2.695,347,2.213,348,2.695,349,2.695,350,2.213,351,2.695,352,2.695,353,2.695,354,2.213,355,2.695,356,2.319,357,2.695,358,2.695,359,2.695,360,4.35,361,2.695,362,2.695,363,2.695,364,2.695,365,2.695,366,2.695,367,2.695]],["title/guards/RolesGuard.html",[356,1.822,368,2.083]],["body/guards/RolesGuard.html",[3,0.421,4,0.362,5,0.362,7,0.55,8,1.604,11,0.041,12,1.051,14,1.19,16,0.839,17,0.621,20,0.421,21,0.253,22,1.653,24,1.444,26,0.028,27,0.028,61,1.867,65,0.838,104,1.051,120,1.783,121,1.301,122,1.783,150,2.228,182,0.965,201,1.867,215,3.359,356,2.516,369,3.036,370,2.492,371,4.954,372,3.036,373,5.328,374,3.036,375,4.092,376,4.954,377,3.036,378,3.036,379,2.492,380,2.134,381,3.036,382,3.036,383,4.092,384,3.036,385,3.036,386,3.036,387,3.036,388,3.036,389,3.036]],["title/modules/RolesModule.html",[28,1.046,41,1.44]],["body/modules/RolesModule.html",[2,1.824,3,0.436,4,0.375,5,0.375,11,0.04,16,0.976,17,0.643,20,0.436,21,0.262,26,0.028,27,0.028,28,1.662,30,1.369,31,1.526,32,1.931,33,1.931,34,1.526,35,2.895,36,2.564,41,2.669,43,2.574,44,1.931,45,1.71,47,1.931,51,1.931,52,1.369,182,1.331,183,1.71,205,2.525,320,1.526,339,2.895,354,2.578,390,2.578,391,2.578,392,2.578,393,3.141,394,2.578,395,3.141,396,3.141]],["title/injectables/RolesService.html",[104,0.761,205,1.291]],["body/injectables/RolesService.html",[3,0.247,4,0.212,5,0.212,7,0.323,8,1.087,11,0.041,12,1.134,14,1.634,15,1.083,16,0.756,17,0.364,20,0.247,21,0.148,24,1.358,26,0.019,27,0.019,52,0.776,65,0.854,97,2.925,104,0.712,105,0.865,120,1.817,121,1.558,122,1.817,150,2.271,152,3.105,156,2.095,157,1.855,182,1.466,183,0.969,198,2.277,201,1.705,203,3.242,205,1.209,207,2.797,209,3.188,211,2.365,220,4.113,223,1.461,224,0.969,227,1.461,228,2.277,234,2.277,237,2.797,250,1.925,320,2.241,323,2.716,333,2.277,341,3.158,342,2.277,343,2.277,347,2.277,350,2.277,394,1.461,397,1.461,398,2.774,399,2.774,400,1.78,401,1.78,402,2.774,403,2.774,404,3.407,405,1.78,406,1.78,407,2.774,408,1.78,409,1.78,410,1.78,411,1.78,412,1.78,413,1.78,414,2.774,415,2.774,416,2.774,417,1.78,418,1.78,419,1.78,420,1.78]],["title/entities/User.html",[182,0.942,319,1.613]],["body/entities/User.html",[3,0.311,4,0.267,5,0.267,7,0.406,10,2.789,11,0.041,12,1.315,15,1.534,16,0.598,20,0.311,21,0.186,26,0.022,27,0.022,61,2.836,65,1.048,73,1.905,77,1.219,121,1.662,182,1.049,209,2.659,214,2.134,224,1.219,235,3.217,250,1.708,312,1.603,319,1.219,320,2.425,323,2.836,327,3.217,329,1.837,330,3.551,335,4.096,336,2.709,338,1.837,421,1.837,422,3.919,423,3.919,424,3.299,425,2.238,426,3.299,427,2.238,428,2.238,429,2.238,430,4.325,431,2.238,432,2.238,433,2.238,434,2.238,435,2.238,436,2.238,437,2.238,438,2.238,439,3.299,440,4.325,441,3.299,442,3.299,443,2.238,444,3.299,445,3.299,446,3.299,447,2.238,448,2.238,449,2.238,450,3.299,451,2.238]],["title/modules/UsersModule.html",[28,1.046,42,1.613]],["body/modules/UsersModule.html",[3,0.55,4,0.473,5,0.473,11,0.04,16,0.953,17,0.811,20,0.55,21,0.33,26,0.033,27,0.033,28,1.714,30,1.727,36,2.158,42,2.645,47,2.436,51,2.987,52,1.727,182,1.259,196,3.253,452,3.962,453,3.962]],["title/coverage.html",[454,2.83]],["body/coverage.html",[0,1.93,1,1.714,5,0.333,6,2.288,11,0.04,18,1.355,21,0.322,26,0.026,27,0.026,34,1.355,53,1.959,65,0.571,104,1.289,106,2.288,110,1.714,111,2.288,125,1.518,130,1.518,138,1.355,142,1.518,157,1.518,176,1.518,182,0.886,197,2.288,205,1.215,250,1.215,282,2.288,283,2.288,287,2.288,311,2.288,315,2.288,319,2.102,320,1.355,321,2.288,339,1.714,340,2.288,356,1.714,368,1.959,370,2.288,380,1.959,397,2.288,421,2.288,454,1.959,455,2.288,456,2.787,457,2.787,458,5.868,459,3.86,460,4.428,461,3.86,462,3.169,463,4.428,464,5.427,465,4.428,466,2.288,467,3.169,468,3.86,469,2.288,470,2.787,471,2.787]],["title/dependencies.html",[31,1.729,472,2.039]],["body/dependencies.html",[11,0.041,17,0.746,26,0.031,27,0.031,31,1.771,50,2.241,52,1.588,179,2.562,181,2.241,188,2.562,224,1.984,225,2.992,296,3.785,379,2.992,473,5.058,474,3.644,475,4.611,476,3.644,477,3.644,478,3.644,479,3.644,480,3.644,481,3.644,482,3.644,483,3.644,484,3.644,485,3.644,486,3.644,487,3.644,488,3.644,489,3.644,490,3.644,491,3.644]],["title/miscellaneous/functions.html",[492,1.527,493,2.921]],["body/miscellaneous/functions.html",[7,0.759,11,0.037,26,0.034,27,0.034,34,2.615,65,0.857,120,1.824,121,1.33,122,1.824,467,3.436,469,4.122,492,2.573,493,3.436,494,5.022,495,4.185,496,5.38]],["title/index.html",[7,0.45,497,2.483,498,2.483]],["body/index.html",[4,0.235,11,0.038,26,0.02,27,0.02,45,2.504,82,2.107,85,1.616,203,1.384,241,3.775,322,1.384,454,1.384,455,2.46,499,1.969,500,1.969,501,3.629,502,2.997,503,1.969,504,1.969,505,1.969,506,1.969,507,2.997,508,3.629,509,1.969,510,1.969,511,4.057,512,1.969,513,4.057,514,4.928,515,1.969,516,4.781,517,1.969,518,1.969,519,2.997,520,1.969,521,1.969,522,3.629,523,1.969,524,2.997,525,1.969,526,1.969,527,1.969,528,1.969,529,1.969,530,4.057,531,4.928,532,4.599,533,1.969,534,2.997,535,1.969,536,1.969,537,1.969,538,1.969,539,1.969,540,2.997,541,4.057,542,1.969,543,2.997,544,1.969,545,1.969,546,2.997,547,4.599,548,4.057,549,1.969,550,2.997,551,1.969,552,1.969,553,1.969,554,1.969,555,4.057,556,1.969,557,1.969,558,1.969,559,1.969,560,2.997,561,1.969,562,1.969,563,1.969,564,1.969,565,1.969,566,2.997,567,1.969,568,1.969,569,1.969,570,2.997,571,1.969,572,1.969,573,3.33,574,2.997,575,1.969,576,1.969,577,1.969,578,1.969,579,1.969,580,1.969,581,1.969,582,1.969,583,2.997,584,1.969,585,1.616,586,1.969,587,1.969,588,3.629,589,1.969,590,1.969,591,1.969,592,1.969,593,1.969,594,1.969,595,2.997,596,1.969,597,1.969,598,1.969,599,1.969,600,1.969,601,2.997,602,1.969,603,1.969,604,1.969,605,2.997,606,2.997,607,1.969,608,1.969,609,1.969,610,1.969,611,1.969,612,1.969,613,1.969,614,1.969,615,1.969,616,1.969,617,1.969,618,1.616,619,1.969,620,1.969,621,1.969,622,1.969,623,1.969,624,1.969,625,1.616]],["title/modules.html",[30,1.754]],["body/modules.html",[11,0.034,26,0.034,27,0.034,29,2.573,30,1.824,40,2.279,41,2.034,42,2.279,573,4.417,585,3.436,626,5.38,627,5.38,628,5.579,629,4.185]],["title/overview.html",[630,3.304]],["body/overview.html",[2,1.299,11,0.039,18,2.228,26,0.028,27,0.028,28,1.052,29,3.475,30,1.299,31,1.448,32,1.833,33,1.833,34,1.448,35,1.833,36,1.623,37,2.447,38,2.447,39,2.447,40,3.105,41,2.634,42,2.497,43,2.485,44,1.833,45,1.623,77,1.623,105,1.448,138,2.634,172,2.447,174,2.447,175,2.447,176,2.951,205,2.362,310,2.095,368,2.095,390,2.447,391,2.447,392,2.447,630,2.447,631,2.98,632,2.98,633,4.041,634,2.98,635,2.98]],["title/properties.html",[312,1.729,472,2.039]],["body/properties.html",[11,0.04,26,0.035,27,0.035,312,2.132,322,3.084,618,3.602,625,3.602,636,4.387,637,4.387,638,4.387]],["title/miscellaneous/variables.html",[301,2.501,492,1.527]],["body/miscellaneous/variables.html",[7,0.602,11,0.041,15,1.38,26,0.03,27,0.03,53,3.052,65,0.991,66,2.725,67,2.725,69,2.725,71,2.725,73,1.613,75,2.725,77,1.807,78,2.725,79,2.725,80,2.725,82,3.052,86,2.725,99,3.564,250,2.321,301,2.333,380,3.052,462,2.725,466,2.725,492,2.041,639,3.319,640,4.342,641,3.319,642,4.839,643,4.839,644,3.319,645,3.319,646,3.319,647,3.319,648,3.319,649,3.319,650,3.319,651,3.319,652,3.319,653,3.319]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":458,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":637,"title":{},"body":{"properties.html":{}}}],["0.2.2",{"_index":488,"title":{},"body":{"dependencies.html":{}}}],["0.3.21",{"_index":491,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":484,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":464,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":459,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":465,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":460,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":461,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":635,"title":{},"body":{"overview.html":{}}}],["11.0.0",{"_index":475,"title":{},"body":{"dependencies.html":{}}}],["11.0.12",{"_index":473,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":476,"title":{},"body":{"dependencies.html":{}}}],["16.4.7",{"_index":481,"title":{},"body":{"dependencies.html":{}}}],["1d",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{}}}],["2",{"_index":633,"title":{},"body":{"overview.html":{}}}],["3",{"_index":632,"title":{},"body":{"overview.html":{}}}],["3.14.0",{"_index":483,"title":{},"body":{"dependencies.html":{}}}],["3306",{"_index":647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":631,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":485,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":634,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":479,"title":{},"body":{"dependencies.html":{}}}],["7.8.2",{"_index":490,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["__dirname",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["access_token",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["afterconnect",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["allowing",{"_index":561,"title":{},"body":{"index.html":{}}}],["already",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":611,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":532,"title":{},"body":{"index.html":{}}}],["applications",{"_index":507,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["assign",{"_index":419,"title":{},"body":{"injectables/RolesService.html":{}}}],["assignrolestouser",{"_index":398,"title":{},"body":{"injectables/RolesService.html":{}}}],["assignrolestouser(userid",{"_index":403,"title":{},"body":{"injectables/RolesService.html":{}}}],["async",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RolesService.html":{}}}],["attempt",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RolesController.html":{}}}],["auth.guard.ts",{"_index":283,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/roles.decorator",{"_index":358,"title":{},"body":{"controllers/RolesController.html":{}}}],["auth/guards/jwt",{"_index":355,"title":{},"body":{"controllers/RolesController.html":{}}}],["auth/guards/roles.guard",{"_index":357,"title":{},"body":{"controllers/RolesController.html":{}}}],["authcontroller",{"_index":110,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":286,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":285,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":618,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":138,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":629,"title":{},"body":{"modules.html":{}}}],["await",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["aws",{"_index":550,"title":{},"body":{"index.html":{}}}],["backers",{"_index":612,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('invalid",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["based",{"_index":545,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(logindto.password",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["beforeconnect",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["below",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["board",{"_index":604,"title":{},"body":{"index.html":{}}}],["body",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":628,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":626,"title":{},"body":{"modules.html":{}}}],["building",{"_index":502,"title":{},"body":{"index.html":{}}}],["bulak_smart_connect",{"_index":652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":371,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":375,"title":{},"body":{"guards/RolesGuard.html":{}}}],["catch",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["channel",{"_index":576,"title":{},"body":{"index.html":{}}}],["check",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["citizen",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":21,"title":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["classes",{"_index":310,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"overview.html":{}}}],["clicks",{"_index":560,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":544,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":390,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":391,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":392,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["code",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":335,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["column({name",{"_index":432,"title":{},"body":{"entities/User.html":{}}}],["column({nullable",{"_index":325,"title":{},"body":{"entities/Role.html":{}}}],["column({unique",{"_index":329,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["come",{"_index":567,"title":{},"body":{"index.html":{}}}],["config",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.get('jwt_secret",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["config/database.config",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('db_host",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_name",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_secret",{"_index":298,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('node_env",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('email",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["connection",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["connection.query('set",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error('login",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('comparing",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('generated",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('login",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["console.log('password",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('register",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('stored",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('user",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["constructor",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["constructor(configservice",{"_index":289,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{}}}],["constructor(reflector",{"_index":372,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(rolesrepository",{"_index":400,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(usersrepository",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":378,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":386,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":385,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":387,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/RolesController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/RolesController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('roles",{"_index":359,"title":{},"body":{"controllers/RolesController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["courses",{"_index":582,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":454,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["created_at",{"_index":426,"title":{},"body":{"entities/User.html":{}}}],["createdat",{"_index":422,"title":{},"body":{"entities/User.html":{}}}],["createdatecolumn",{"_index":444,"title":{},"body":{"entities/User.html":{}}}],["createdatecolumn({name",{"_index":425,"title":{},"body":{"entities/User.html":{}}}],["credentials",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["data",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{}}}],["database",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":496,"title":{},"body":{"miscellaneous/functions.html":{}}}],["date",{"_index":424,"title":{},"body":{"entities/User.html":{}}}],["debug",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["debugging",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"entities/User.html":{}}}],["decorators/roles.decorator",{"_index":381,"title":{},"body":{"guards/RolesGuard.html":{}}}],["deeper",{"_index":578,"title":{},"body":{"index.html":{}}}],["default",{"_index":642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default_role_id",{"_index":430,"title":{},"body":{"entities/User.html":{}}}],["defaultrole",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["defaultroleid",{"_index":423,"title":{},"body":{"entities/User.html":{}}}],["defaultstrategy",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"entities/User.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":530,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":549,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":540,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":559,"title":{},"body":{"index.html":{}}}],["description",{"_index":322,"title":{},"body":{"entities/Role.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["devtools",{"_index":590,"title":{},"body":{"index.html":{}}}],["discord",{"_index":575,"title":{},"body":{"index.html":{}}}],["dive",{"_index":577,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":455,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dotenv",{"_index":480,"title":{},"body":{"dependencies.html":{}}}],["dropschema",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["dto/login.dto",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/register.dto",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["e2e",{"_index":525,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":503,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":538,"title":{},"body":{"index.html":{}}}],["email",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["endpoint",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["ensure",{"_index":536,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":594,"title":{},"body":{"index.html":{}}}],["entities",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"entities/Role.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/role.entity",{"_index":394,"title":{},"body":{"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["entities/user.entity",{"_index":453,"title":{},"body":{"modules/UsersModule.html":{}}}],["entity",{"_index":319,"title":{"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('roles",{"_index":337,"title":{},"body":{"entities/Role.html":{}}}],["entity('users",{"_index":448,"title":{},"body":{"entities/User.html":{}}}],["entity{.ts,.js",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["environment",{"_index":300,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["environments",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["error('jwt_secret",{"_index":299,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["error('user",{"_index":417,"title":{},"body":{"injectables/RolesService.html":{}}}],["example",{"_index":513,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":376,"title":{},"body":{"guards/RolesGuard.html":{}}}],["existinguser",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["experience",{"_index":580,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":478,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":284,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":294,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":304,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failed",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["false",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"entities/Role.html":{}}}],["fast",{"_index":553,"title":{},"body":{"index.html":{}}}],["features",{"_index":563,"title":{},"body":{"index.html":{}}}],["few",{"_index":555,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["find",{"_index":416,"title":{},"body":{"injectables/RolesService.html":{}}}],["findall",{"_index":341,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findbyname",{"_index":399,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname(name",{"_index":407,"title":{},"body":{"injectables/RolesService.html":{}}}],["findone",{"_index":342,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findone(@param('id",{"_index":363,"title":{},"body":{"controllers/RolesController.html":{}}}],["findone(id",{"_index":347,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["focus",{"_index":562,"title":{},"body":{"index.html":{}}}],["follow",{"_index":598,"title":{},"body":{"index.html":{}}}],["foreign_key_checks=0",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=1",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["format",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["found",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["framework",{"_index":501,"title":{},"body":{"index.html":{}}}],["full",{"_index":593,"title":{},"body":{"index.html":{}}}],["function",{"_index":468,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":493,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":558,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":362,"title":{},"body":{"controllers/RolesController.html":{}}}],["get(':id')@roles('admin",{"_index":348,"title":{},"body":{"controllers/RolesController.html":{}}}],["get('profile",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('user/:userid",{"_index":365,"title":{},"body":{"controllers/RolesController.html":{}}}],["get('user/:userid')@roles('admin",{"_index":351,"title":{},"body":{"controllers/RolesController.html":{}}}],["get()@roles('admin",{"_index":344,"title":{},"body":{"controllers/RolesController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getprofile",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getprofile(@request",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(req",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(userid",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["getting",{"_index":497,"title":{"index.html":{}},"body":{}}],["getuserroles",{"_index":343,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getuserroles(@param('userid",{"_index":366,"title":{},"body":{"controllers/RolesController.html":{}}}],["getuserroles(userid",{"_index":350,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["graph",{"_index":585,"title":{},"body":{"index.html":{},"modules.html":{}}}],["grow",{"_index":608,"title":{},"body":{"index.html":{}}}],["guard",{"_index":368,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":369,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["hands",{"_index":579,"title":{},"body":{"index.html":{}}}],["handy",{"_index":568,"title":{},"body":{"index.html":{}}}],["hash",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["hello",{"_index":108,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":583,"title":{},"body":{"index.html":{}}}],["here",{"_index":616,"title":{},"body":{"index.html":{}}}],["hit",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["host",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":622,"title":{},"body":{"index.html":{}}}],["id",{"_index":323,"title":{},"body":{"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"entities/User.html":{}}}],["identifier",{"_index":456,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":305,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":382,"title":{},"body":{"guards/RolesGuard.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["information",{"_index":542,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":565,"title":{},"body":{"index.html":{}}}],["inject",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["injectable",{"_index":104,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/RolesService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["injectables",{"_index":105,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/RolesService.html":{},"overview.html":{}}}],["injectrepository",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["injectrepository(role",{"_index":412,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectrepository(user",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["install",{"_index":557,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":515,"title":{},"body":{"index.html":{}}}],["interact",{"_index":586,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["inversejoincolumn",{"_index":442,"title":{},"body":{"entities/User.html":{}}}],["isglobal",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["ispasswordvalid",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["isvalidemail",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["isvalidemail(email",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["job",{"_index":601,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":603,"title":{},"body":{"index.html":{}}}],["join",{"_index":614,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":440,"title":{},"body":{"entities/User.html":{}}}],["jointable",{"_index":446,"title":{},"body":{"entities/User.html":{}}}],["jwt",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":142,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/RolesController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":303,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":176,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":619,"title":{},"body":{"index.html":{}}}],["key",{"_index":533,"title":{},"body":{"index.html":{}}}],["learn",{"_index":571,"title":{},"body":{"index.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["license",{"_index":625,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":606,"title":{},"body":{"index.html":{}}}],["linkedin",{"_index":600,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logging",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":125,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.email",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.password",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":543,"title":{},"body":{"index.html":{}}}],["loop",{"_index":596,"title":{},"body":{"index.html":{}}}],["loss",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["makes",{"_index":551,"title":{},"body":{"index.html":{}}}],["managing",{"_index":564,"title":{},"body":{"index.html":{}}}],["manytomany",{"_index":336,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":332,"title":{},"body":{"entities/Role.html":{}}}],["manytomany(undefined)@jointable({name",{"_index":438,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":445,"title":{},"body":{"entities/User.html":{}}}],["manytoone(undefined",{"_index":428,"title":{},"body":{"entities/User.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":547,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":487,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["migrationsrun",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["miscellaneous",{"_index":492,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":605,"title":{},"body":{"index.html":{}}}],["mode",{"_index":519,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":541,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["mysql2",{"_index":482,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":620,"title":{},"body":{"index.html":{}}}],["name",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":591,"title":{},"body":{"index.html":{}}}],["nest",{"_index":508,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":624,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":531,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":379,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["node.js",{"_index":500,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":411,"title":{},"body":{"injectables/RolesService.html":{}}}],["notfoundexception(`role",{"_index":415,"title":{},"body":{"injectables/RolesService.html":{}}}],["npm",{"_index":514,"title":{},"body":{"index.html":{}}}],["null",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["nullable",{"_index":330,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["number",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{}}}],["offer",{"_index":602,"title":{},"body":{"index.html":{}}}],["official",{"_index":548,"title":{},"body":{"index.html":{}}}],["open",{"_index":607,"title":{},"body":{"index.html":{}}}],["optional",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":630,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":472,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":353,"title":{},"body":{"controllers/RolesController.html":{}}}],["parameters",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"miscellaneous/functions.html":{}}}],["parseint(process.env.db_port",{"_index":646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["part",{"_index":592,"title":{},"body":{"index.html":{}}}],["passport",{"_index":296,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":293,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":288,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["password.length",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":308,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.roles",{"_index":309,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":307,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["platform",{"_index":546,"title":{},"body":{"index.html":{}}}],["please",{"_index":574,"title":{},"body":{"index.html":{}}}],["port",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["possible",{"_index":539,"title":{},"body":{"index.html":{}}}],["post",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RolesController.html":{}}}],["prevent",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["primarygeneratedcolumn",{"_index":327,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["private",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["process.env.db_host",{"_index":644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_username",{"_index":648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":499,"title":{},"body":{"index.html":{}}}],["project",{"_index":511,"title":{},"body":{"index.html":{}}}],["promise",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["properties",{"_index":312,"title":{"properties.html":{}},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"entities/User.html":{},"properties.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["questions",{"_index":572,"title":{},"body":{"index.html":{}}}],["read",{"_index":615,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/RolesController.html":{}}}],["ready",{"_index":529,"title":{},"body":{"index.html":{}}}],["real",{"_index":587,"title":{},"body":{"index.html":{}}}],["received",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["referencedcolumnname",{"_index":450,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":486,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":373,"title":{},"body":{"guards/RolesGuard.html":{}}}],["register",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registerdto",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registerdto",{"_index":130,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["relations",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["remove",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["repository",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{},"index.html":{}}}],["req",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["requiredroles",{"_index":383,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":388,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiring",{"_index":554,"title":{},"body":{"index.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["resources",{"_index":566,"title":{},"body":{"index.html":{}}}],["response",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["result",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["role",{"_index":320,"title":{"entities/Role.html":{}},"body":{"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"coverage.html":{}}}],["role.name",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["role_id",{"_index":451,"title":{},"body":{"entities/User.html":{}}}],["roleids",{"_index":404,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolenames",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":360,"title":{},"body":{"controllers/RolesController.html":{}}}],["roles.controller",{"_index":395,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.map(role",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles.service",{"_index":354,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/entities/role.entity",{"_index":447,"title":{},"body":{"entities/User.html":{}}}],["roles/roles.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["roles/roles.service",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles_key",{"_index":380,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolescontroller",{"_index":339,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesguard",{"_index":356,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesmodule",{"_index":41,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesrepository",{"_index":402,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolesservice",{"_index":205,"title":{"injectables/RolesService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"coverage.html":{},"overview.html":{}}}],["root",{"_index":649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":516,"title":{},"body":{"index.html":{}}}],["runs",{"_index":537,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":489,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":504,"title":{},"body":{"index.html":{}}}],["secret",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretkey",{"_index":297,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretorkey",{"_index":306,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["seeddatabaseifneeded",{"_index":469,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seeddatabaseifneeded(datasource",{"_index":495,"title":{},"body":{"miscellaneous/functions.html":{}}}],["server",{"_index":505,"title":{},"body":{"index.html":{}}}],["set",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["setmetadata(roles_key",{"_index":653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":512,"title":{},"body":{"index.html":{}}}],["sheesh",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["side",{"_index":506,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":556,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["sponsors",{"_index":610,"title":{},"body":{"index.html":{}}}],["src/.../database.config.ts",{"_index":639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":494,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":106,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":107,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:20",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:31",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:38",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:158",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:163",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:20",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:31",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:90",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":462,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":311,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:2",{"_index":313,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:3",{"_index":314,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":315,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts:2",{"_index":316,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:3",{"_index":318,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:4",{"_index":317,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/guards/jwt",{"_index":282,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":370,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:6",{"_index":374,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:9",{"_index":377,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":287,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:22",{"_index":292,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":290,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/config/database.config.ts",{"_index":466,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":467,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/roles/entities/role.entity.ts",{"_index":321,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["src/roles/entities/role.entity.ts:10",{"_index":331,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:13",{"_index":326,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:16",{"_index":334,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:7",{"_index":328,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/roles.controller.ts",{"_index":340,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts:14",{"_index":346,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:20",{"_index":349,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:26",{"_index":352,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.module.ts",{"_index":393,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service.ts",{"_index":397,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:17",{"_index":406,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:21",{"_index":409,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:29",{"_index":408,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:37",{"_index":410,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:45",{"_index":405,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:8",{"_index":401,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/users/entities/user.entity.ts",{"_index":421,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:16",{"_index":435,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:19",{"_index":434,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":437,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:25",{"_index":436,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:28",{"_index":427,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:32",{"_index":431,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:35",{"_index":433,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:49",{"_index":443,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.module.ts",{"_index":452,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":517,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":520,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":521,"title":{},"body":{"index.html":{}}}],["started",{"_index":498,"title":{"index.html":{}},"body":{}}],["starter",{"_index":510,"title":{},"body":{"index.html":{}}}],["statement",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["statements",{"_index":457,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":595,"title":{},"body":{"index.html":{}}}],["steps",{"_index":534,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":552,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":295,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strength",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["success",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["super",{"_index":302,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super_admin",{"_index":345,"title":{},"body":{"controllers/RolesController.html":{}}}],["support",{"_index":573,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":627,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":471,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":470,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":535,"title":{},"body":{"index.html":{}}}],["test",{"_index":524,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":527,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":526,"title":{},"body":{"index.html":{}}}],["tests",{"_index":522,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":609,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.getprofile(req.user.userid",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(logindto",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registerdto",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.isvalidemail(email",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":384,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.rolesrepository.find",{"_index":413,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findbyids(roleids",{"_index":418,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findone",{"_index":414,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.findall",{"_index":361,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(+id",{"_index":364,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserroles(+userid",{"_index":367,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserroles(user.id",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.findone",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["this.usersrepository.save(user",{"_index":420,"title":{},"body":{"injectables/RolesService.html":{}}}],["throw",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RolesService.html":{}}}],["time",{"_index":588,"title":{},"body":{"index.html":{}}}],["token",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":617,"title":{},"body":{"index.html":{}}}],["true",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"entities/User.html":{}}}],["true})@joincolumn({name",{"_index":429,"title":{},"body":{"entities/User.html":{}}}],["try",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["twitter",{"_index":623,"title":{},"body":{"index.html":{}}}],["type",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":396,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":509,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(error.message",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined",{"_index":441,"title":{},"body":{"entities/User.html":{}}}],["unique",{"_index":338,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["unit",{"_index":523,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unlicensed",{"_index":638,"title":{},"body":{"properties.html":{}}}],["updates",{"_index":597,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RolesController.html":{}}}],["useguards(jwtauthguard",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RolesController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":182,"title":{"entities/User.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["user.defaultrole?.name",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.email",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles",{"_index":333,"title":{},"body":{"entities/Role.html":{},"injectables/RolesService.html":{}}}],["user.roles?.includes(role",{"_index":389,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user_id",{"_index":449,"title":{},"body":{"entities/User.html":{}}}],["user_roles",{"_index":439,"title":{},"body":{"entities/User.html":{}}}],["userid",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["username",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":324,"title":{},"body":{"entities/Role.html":{}}}],["users/entities/user.entity",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["users/users.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["usersmodule",{"_index":42,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["userwithoutpassword",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["using",{"_index":589,"title":{},"body":{"index.html":{}}}],["valid",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":291,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(logindto",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":463,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":301,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":636,"title":{},"body":{"properties.html":{}}}],["video",{"_index":581,"title":{},"body":{"index.html":{}}}],["visit",{"_index":570,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":584,"title":{},"body":{"index.html":{}}}],["watch",{"_index":518,"title":{},"body":{"index.html":{}}}],["website",{"_index":621,"title":{},"body":{"index.html":{}}}],["working",{"_index":569,"title":{},"body":{"index.html":{}}}],["world",{"_index":109,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":599,"title":{},"body":{"index.html":{}}}],["yes",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["you'd",{"_index":613,"title":{},"body":{"index.html":{}}}],["you're",{"_index":528,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { databaseConfig } from './config/database.config';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { RolesModule } from './roles/roles.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'mysql',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: [__dirname + '/**/*.entity{.ts,.js}'],\n        synchronize: configService.get('NODE_ENV') !== 'production', //set this sheesh to true in development only\n        logging: configService.get('NODE_ENV') !== 'production',\n        // Prevent data loss in development (below code is for development only)\n        // synchronize: true,\n        migrationsRun: false,\n        dropSchema: false,\n\n        // Only for development environments!\n        beforeConnect: async (connection) => {\n          if (process.env.NODE_ENV !== 'production') {\n            connection.query('SET FOREIGN_KEY_CHECKS=0;');\n          }\n        },\n        afterConnect: async (connection) => {\n          if (process.env.NODE_ENV !== 'production') {\n            connection.query('SET FOREIGN_KEY_CHECKS=1;');\n          }\n        }\n      }),\n    }),\n    UsersModule,\n    AuthModule,\n    RolesModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    console.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(error.message || 'Invalid credentials');\n    }\n  }\n\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    console.log('Register endpoint hit with data:', registerDto); //Debugging Statement\n    return this.authService.register(registerDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return this.authService.getProfile(req.user.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../users/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtStrategy } from './jwt.strategy';\nimport { ConfigService } from '@nestjs/config';\nimport { RolesModule } from '../roles/roles.module';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => {\n        return {\n          secret: config.get('JWT_SECRET'),\n          signOptions: { expiresIn: '1d' },\n        };\n      },\n    }),\n    TypeOrmModule.forFeature([User]),\n    RolesModule,\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService, JwtStrategy, PassportModule],\n})\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Private\n                                isValidEmail\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, jwtService: JwtService, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:163\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isValidEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValidEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:158\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException, ConflictException, BadRequestException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../users/entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { RolesService } from '../roles/roles.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private jwtService: JwtService,\n    private rolesService: RolesService, \n  ) {}\n\n  async validateUser(loginDto: LoginDto): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { email: loginDto.email },\n    });\n    if (user && (await bcrypt.compare(loginDto.password, user.password))) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(loginDto: LoginDto) {\n    console.log('Login attempt with:', loginDto);\n\n    try {\n      const user = await this.usersRepository.findOne({\n        where: { email: loginDto.email },\n        relations: ['defaultRole'],\n      });\n\n      console.log('User found:', user ? 'Yes' : 'No');\n\n      if (!user) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Debug password check\n      console.log('Stored password hash:', user.password);\n      console.log('Comparing with:', loginDto.password);\n\n      const isPasswordValid = await bcrypt.compare(\n        loginDto.password,\n        user.password,\n      );\n      console.log('Password valid:', isPasswordValid);\n\n      if (!isPasswordValid) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Get user roles\n      const roles = await this.rolesService.getUserRoles(user.id);\n      const roleNames = roles.map(role => role.name);\n\n      const payload = { \n        sub: user.id, \n        email: user.email,\n        roles: roleNames\n      };\n      \n      const token = this.jwtService.sign(payload);\n      console.log('Generated token:', token ? 'Success' : 'Failed');\n\n      // Remove password from response\n      const { password: _, ...userWithoutPassword } = user;\n\n      return {\n        access_token: token,\n        user: {\n          ...userWithoutPassword,\n          roles: roleNames,\n          defaultRole: user.defaultRole?.name || 'citizen'\n        },\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  async register(registerDto: RegisterDto) {\n    const { email, password, name } = registerDto;\n    \n    // Validate email format\n    if (!this.isValidEmail(email)) {\n      throw new BadRequestException('Invalid email format');\n    }\n    \n    // Check if user exists\n    const existingUser = await this.usersRepository.findOne({ where: { email } });\n    if (existingUser) {\n      throw new ConflictException('Email already exists');\n    }\n    \n    // Validate password strength\n    if (password.length  role.name);\n\n    const { password, ...result } = user;\n    return {\n      ...result,\n      roles: roleNames,\n      defaultRole: user.defaultRole?.name || 'citizen'\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  async validate(payload: any) {\n    return { userId: payload.sub, email: payload.email, roles: payload.roles || [] };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LoginDto {\n  email: string;\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class RegisterDto {\n  email: string;\n  password: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/entities/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, ManyToMany } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity('roles')\nexport class Role {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true, nullable: false }) \n  name: string;\n\n  @Column({ nullable: true })\n  description: string;\n\n  @ManyToMany(() => User, user => user.roles)\n  users: User[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, UseGuards } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\n\n@Controller('roles')\n@UseGuards(JwtAuthGuard, RolesGuard)\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @Get()\n  @Roles('admin', 'super_admin')\n  findAll() {\n    return this.rolesService.findAll();\n  }\n\n  @Get(':id')\n  @Roles('admin', 'super_admin')\n  findOne(@Param('id') id: string) {\n    return this.rolesService.findOne(+id);\n  }\n\n  @Get('user/:userId')\n  @Roles('admin', 'super_admin')\n  getUserRoles(@Param('userId') userId: string) {\n    return this.rolesService.getUserRoles(+userId);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles.guard.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    \n    if (!requiredRoles) {\n      return true;\n    }\n    \n    const { user } = context.switchToHttp().getRequest();\n    return requiredRoles.some((role) => user.roles?.includes(role));\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\nimport { RolesService } from './roles.service';\nimport { RolesController } from './roles.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Role, User])],\n  providers: [RolesService],\n  controllers: [RolesController],\n  exports: [RolesService],\n})\nexport class RolesModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                assignRolesToUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rolesRepository: Repository, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        assignRolesToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignRolesToUser(userId: number, roleIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectRepository(Role)\n    private rolesRepository: Repository,\n    \n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async findAll(): Promise {\n    return this.rolesRepository.find();\n  }\n\n  async findOne(id: number): Promise {\n    const role = await this.rolesRepository.findOne({ where: { id } });\n    if (!role) {\n      throw new NotFoundException(`Role with ID ${id} not found`);\n    }\n    return role;\n  }\n\n  async findByName(name: string): Promise {\n    const role = await this.rolesRepository.findOne({ where: { name } });\n    if (!role) {\n      throw new NotFoundException(`Role with name ${name} not found`);\n    }\n    return role;\n  }\n\n  async getUserRoles(userId: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n    return user ? user.roles : [];\n  }\n\n  async assignRolesToUser(userId: number, roleIds: number[]): Promise {\n    // Find the user\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n    \n    if (!user) {\n      throw new Error('User not found');\n    }\n    \n    // Find the roles\n    const roles = await this.rolesRepository.findByIds(roleIds);\n    \n    // Assign roles to user\n    user.roles = roles;\n    await this.usersRepository.save(user);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'default_role_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'default_role_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable({name: 'user_roles', joinColumn: undefined, inverseJoinColumn: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  ManyToMany,\n  JoinTable\n} from 'typeorm';\nimport { Role } from '../../roles/entities/role.entity';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column()\n  password: string;\n\n  @Column()\n  name: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n  \n  @ManyToOne(() => Role, { nullable: true })\n  @JoinColumn({ name: 'default_role_id' })\n  defaultRole: Role;\n  \n  @Column({ name: 'default_role_id', nullable: true })\n  defaultRoleId: number;\n  \n  @ManyToMany(() => Role)\n  @JoinTable({\n    name: \"user_roles\",\n    joinColumn: {\n      name: \"user_id\",\n      referencedColumnName: \"id\"\n    },\n    inverseJoinColumn: {\n      name: \"role_id\",\n      referencedColumnName: \"id\"\n    }\n  })\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  exports: [TypeOrmModule],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            seedDatabaseIfNeeded\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/entities/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.0.12\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.12\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.0.12\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            bcrypt : ^5.1.1\n        \n            dotenv : ^16.4.7\n        \n            mysql2 : ^3.14.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            typeorm : ^0.3.21\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            seedDatabaseIfNeeded   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seedDatabaseIfNeeded\n                        \n                    \n                \n            \n            \n                \nseedDatabaseIfNeeded(dataSource: DataSource)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dataSource\n                                            \n                                                        DataSource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/database.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  host: process.env.DB_HOST || 'localhost',\n  port: parseInt(process.env.DB_PORT || '3306'),\n  username: process.env.DB_USERNAME || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'bulak_smart_connect',\n  entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n  synchronize: process.env.NODE_ENV !== 'production',\n  logging: process.env.NODE_ENV !== 'production',\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
